<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>HTTP原理及具体细节</title>
    <link href="/2025/04/29/HTTP%E5%8E%9F%E7%90%86%E5%8F%8A%E5%85%B7%E4%BD%93%E7%BB%86%E8%8A%82/"/>
    <url>/2025/04/29/HTTP%E5%8E%9F%E7%90%86%E5%8F%8A%E5%85%B7%E4%BD%93%E7%BB%86%E8%8A%82/</url>
    
    <content type="html"><![CDATA[<p>111HTTP（Hypertext Transfer Protocol）是一种用于在计算机网络上传输超文本数据的应用层协议。它是构成万维网的基础之一，被广泛用于万维网上的数据通信。超文本(Hypertext)是指用<a href="https://baike.baidu.com/item/%E8%B6%85%E9%93%BE%E6%8E%A5/0?fromModule=lemma_inlink" title="超链接">超链接</a>的方法，将各种不同空间的文字<a href="https://baike.baidu.com/item/%E4%BF%A1%E6%81%AF%E7%BB%84%E7%BB%87/0?fromModule=lemma_inlink" title="信息组织">信息组织</a>在一起的网状文本。</p><p><strong>以上解释太过官方，简单来说，在网络上传输信息有一定的规则、要遵循一定的格式， 就像收发快递要有包装、贴码等标准一样，我们在网络上传递的信息也有其标准，而HTTP就是网络上传输多种信息的标准（不仅仅是文本，所以叫超文本）。</strong></p><p>那这个“标准“具体都有啥呢?从下图可以看出HTTP包含了请求、响应及会话三个部分，下面我们分别进行讲解。</p><p><img src="https://i-blog.csdnimg.cn/direct/bd1bcf8750294b3a9e23c30fb24449c4.png"></p><h2 id="一、HTTP-请求"><a href="#一、HTTP-请求" class="headerlink" title="一、HTTP 请求"></a>一、HTTP <strong>请求</strong></h2><p>当我们在浏览器中输入网址并回车后，浏览器会向服务器发送一个 HTTP 请求。这个请求由多个部分组成，其中最重要的是请求行、头部和正文。</p><h3 id="1、请求行"><a href="#1、请求行" class="headerlink" title="1、请求行"></a>1、请求行</h3><p>请求行包含三个部分，分别是请求方法、请求 URI 和 HTTP 版本号。</p><p>1）请求方法指定了客户端想要执行的动作，例如 GET、POST、PUT、DELETE 等。</p><p>2）请求 URI 指定了要访问的资源的位置，也就是我们想要的信息的存放地。</p><p>3）HTTP 版本号表示请求所使用的 HTTP 协议版本，往往是HTTP1.1。</p><h3 id="2、头部"><a href="#2、头部" class="headerlink" title="2、头部"></a>2、头部</h3><p>包含了一系列的键值对，用于向服务器传递一些请求信息。例如，Accept 表示客户端可以接受的响应内容类型，User-Agent 表示客户端的浏览器信息，Referer 表示客户端从哪个页面跳转而来等等。</p><p><img src="https://i-blog.csdnimg.cn/direct/49649004c2ce488f9a3bcdd65224d727.png"></p><h3 id="3、正文"><a href="#3、正文" class="headerlink" title="3、正文"></a>3、正文</h3><p>正文是可选的（get就没有请求正文），用于向服务器传递一些数据。例如，当客户端向服务器提交表单时，表单数据就可以放在请求的正文中。</p><h3 id="4、HTTP-请求报文分析"><a href="#4、HTTP-请求报文分析" class="headerlink" title="4、HTTP 请求报文分析"></a>4、HTTP 请求报文分析</h3><p><strong>上面我们已经讲了HTTP请求的格式和内容，下面我们实战，看一下HTTP请求在实际传输过程中的样子。</strong></p><p>HTTP请求报文组成部分（再简述一下上面的理论）：</p><p>1）请求行（必须在 HTTP 请求报文的第一行）</p><p>2）请求头（即头部，从第二行开始，到第一个空行结束。请求头和请求体之间存在一个空行，是键值对）</p><p>3）请求体（即正文，通常以键值对 {key:value}方式传递数据）</p><p>下面是HTTP请求进行传递时的样子，</p><p><img src="https://i-blog.csdnimg.cn/direct/70c0241bf46b465e825da1266989c276.jpeg"></p><p>这段请求的意思就是：</p><p><strong>以POST方式请求访问某台 HTTP 服务器上的 &#x2F;form&#x2F;login 页面资源，并附带参数 name &#x3D; veal、age &#x3D; 37</strong>，是HTTP1.1版本，请求体长度为16。</p><h2 id="二、HTTP-响应"><a href="#二、HTTP-响应" class="headerlink" title="二、HTTP 响应"></a><strong>二、HTTP</strong> 响应</h2><p>当服务器收到客户端的请求后，它会向客户端返回一个 HTTP 响应。与请求类似，响应也由多个部分组成，其中最重要的是状态行、头部和正文。</p><h3 id="1、状态行"><a href="#1、状态行" class="headerlink" title="1、状态行"></a>1、状态行</h3><p>状态行包含三个部分，分别是 HTTP 版本号、状态码和状态短语。</p><p>1）HTTP 版本号表示响应所使用的 HTTP 协议版本。</p><p>2）状态码是一个三位数字，用于表示服务器对请求的处理结果。常见的状态码有 200 表示成功、404 表示未找到资源、500 表示服务器内部错误等等。HTTP 定义了很多状态码，用于表示服务器对请求的处理结果。这些状态码被分成 5 类，分别是 1xx、2xx、3xx、4xx 和 5xx。</p><p>其中，</p><p>  1xx 表示信息类状态</p><p>  2xx 表示成功状态，例如 200 表示成功，201 表示资源创建成功。</p><p>  3xx 表示重定向状态，例如 301 表示永久重定向，302 表示临时重定向。</p><p>  4xx 表示客户端错误状态，例如 400 表示请求格式错误，401 表示未授权，404 表示未找到资源等等。</p><p>  5xx 表示服务器错误状态，例如 500 表示服务器内部错误，503 表示服务器暂时无法处理请求等等。</p><p>常见状态码及其含义：</p><p><img src="https://i-blog.csdnimg.cn/direct/af90669c49c24b318fd233265cf5dad7.png"></p><p>3）状态短语是对状态码的简短描述，例如 200 对应的状态短语是 OK，404 对应的状态短语是 Not Found。</p><h3 id="2、头部-1"><a href="#2、头部-1" class="headerlink" title="2、头部"></a>2、头部</h3><p>包含了一系列的键值对，用于向客户端传递一些响应信息。</p><p>例如，Content-Type 表示响应内容的类型，Content-Length 表示响应内容的长度，Set-Cookie 表示服务器要求客户端保存一个 Cookie 等等。</p><p><img src="https://i-blog.csdnimg.cn/direct/ef7b90898ebc4e0db0365b29cf254e78.png"></p><h3 id="3、正文-1"><a href="#3、正文-1" class="headerlink" title="3、正文"></a>3、正文</h3><p>响应的实际内容。例如，当客户端请求一个网页时，网页的 HTML 代码就可以放在响应的正文中。</p><h3 id="4、HTTP-响应报文分析"><a href="#4、HTTP-响应报文分析" class="headerlink" title="4、HTTP 响应报文分析"></a>4、HTTP 响应报文分析</h3><p>还是看一下HTTP响应实际长什么样子。</p><p>HTTP 的响应报文组成部分：</p><p>1）响应行（必须在 HTTP 响应报文的第一行）报文协议及版本，状态码及状态描述</p><p>2）响应头（从第二行开始，到第一个空行结束。响应头和响应体之间存在一个空行，是键值对形式）</p><p>3）响应体</p><p>下图为例，</p><p><img src="https://i-blog.csdnimg.cn/direct/f830b9830f234f55ba2dc413f4093196.jpeg"></p><p>在响应行开头的 HTTP 1.1 表示服务器对应的 HTTP 版本。<strong>紧随的 200 OK 表示请求的处理结果的“状态码”和“原因短语”。</strong></p><h2 id="三、HTTP-会话"><a href="#三、HTTP-会话" class="headerlink" title="三、HTTP 会话"></a><strong>三、HTTP 会话</strong></h2><p><strong>（这里指常见的cookie与session机制）</strong></p><p>从打开一个浏览器访问某个站点，到关闭这个浏览器的整个过程，称为一次会话。会话技术就是记录这次会话中客户端的状态和数据的。</p><p><strong>简单来说，一次会话就是你与某个网站进行了一次完整的交流，这个交流可能会你来我往很多次（一次会话可能会有很多次请求、响应，就像人与人的一次会话会有很多对话）。</strong></p><p>HTTP 是一种无状态协议，这意味着每次请求都是独立的，服务器不会记录客户端的状态信息。为了实现状态管理，HTTP 引入了 Cookie 和 Session 机制。</p><p><strong>简单来说，我们电脑与网站服务器又不和人一样能面对面互相见到，它怎么知道我是我？cookie与session就相当于我们双方的“脸部特征”，让我们能够互相认识，从而不用每说一句之前都得重新“自我介绍“。</strong></p><h3 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h3><p>1）Session：由于HTTP协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识具体的用户，这个机制就是 Session。</p><p>Session 是一种在服务器保存状态信息的机制。服务器在接收到客户端的请求时，为该客户端创建一个 Session 对象，并将该对象的 ID 保存在一个 Cookie 中发送给客户端。客户端在下一次请求时将该 Cookie 发送回服务器，服务器根据 Cookie 中的 Session ID 来查找该客户端对应的 Session 对象，从而实现状态管理。</p><p>典型的场景比如购物车，当你点击下单按钮时，由于HTTP协议无状态，所以并不知道是哪个用户操作的，所以服务端要为特定的用户创建了特定的 Session，用用于标识这个用户，并且跟踪用户，这样才知道购物车里面有几本书。</p><p>这个 Session是保存在服务端的，有一个唯一标识。在服务端保存 Session的方法很多，内存、数据库、文件都有。集群的时候也要考虑 Session的转移，在大型的网站一般会有专门的 Session服务器集群，用来保存用户会话，这个时候 Session信息都是放在内存的，使用一些缓存服务比如 Memcached之类的来放 Session。</p><p>2）Cookie：思考一下服务端如何识别特定的客户？这个时候 Cookie就登场了。</p><p>Cookie 是一种在客户端保存状态信息的机制。服务器可以通过 Set-Cookie 头部向客户端发送一个 Cookie，客户端在下一次请求时将该 Cookie 发送回服务器。服务器可以根据 Cookie 的内容来识别客户端的身份，从而实现状态管理。</p><p>每次HTTP请求的时候，客户端都会发送相应的Cookie信息到服务端。实际上大多数的应用都是用 Cookie来实现 Session跟踪的，第一次创建 Session的时候，服务端会在HTTP协议中告诉客户端，需要在Cookie里面记录个SessionID，以后每次请求把这个会话ID发送到服务器，我就知道你是谁了。</p><p>设想你某次登陆过一个网站，只需要登录一次就可以在一定时间内浏览这个网站的所有内容，这是如何做到的？也是 Cookie</p><p>Cookie是指某些网站为了辨别用户身份而储存在客户端上的数据（通常经过加密）。也就是说，只要有了某个用户的 cookie，就能以他的身份登录。</p><h3 id="2、工作原理"><a href="#2、工作原理" class="headerlink" title="2、工作原理"></a>2、工作原理</h3><p>其中工作原理大致如下：</p><p> 客户端请求服务端</p><p>——&gt; 服务端开启会话，并下发一个特殊的COOKIE（会话的唯一标识符），   服务端将会话数据存储在指定位置</p><p> ——&gt;客户端收到服务端响应内容，并且保存这个COOKIE</p><p> ——&gt;客户端在下一次请求服务端时带上这个COOKIE，服务端根据这个唯一标识符读取相关会话数据，恢复会话的状态</p><h3 id="3、基于COOKIE、SESSION能做什么？"><a href="#3、基于COOKIE、SESSION能做什么？" class="headerlink" title="3、基于COOKIE、SESSION能做什么？"></a>3、基于COOKIE、SESSION能做什么？</h3><p>有了COOKIE，我们能存储SESSION在浏览器端的唯一标识，能存储其他各种不敏感的数据。</p><p>有了SESSION，我们能对同一个用户的连续访问行为进行识别，用户可以 避免重复登录的烦恼，比如你在PC上登录天猫，就能很欢乐的连续买买买，而不用买一件登录一次。</p><p><strong>简单来说，有了COOKIE、SESSION，我们就能进行连续请求与响应（与服务器已经“互相认识”），不用每次请求之前都得重新登录。</strong></p><h2 id="四、相关练习"><a href="#四、相关练习" class="headerlink" title="四、相关练习"></a>四、相关练习</h2><p>这里有几道题目还不错，大家可以找着做一下。</p><p><a href="https://www.ctfhub.com/#/skilltree" title="CTFHub技能树">CTFHub技能树</a>的：</p><p><a href="https://blog.csdn.net/2302_81178149/article/details/142718250?spm=1001.2014.3001.5501" title="前置技能(HTTP协议）-CTFHub_ctfhub web前置技能-CSDN博客">前置技能(HTTP协议）-CTFHub_ctfhub web前置技能-CSDN博客</a></p><p><a href="https://adworld.xctf.org.cn/home/index" title="攻防世界">攻防世界</a>的：</p><p><a href="https://blog.csdn.net/2302_81178149/article/details/142716122?spm=1001.2014.3001.5501" title="HTTP相关练习-攻防世界_hackbar怎么进行post传参-CSDN博客">HTTP相关练习-攻防世界_hackbar怎么进行post传参-CSDN博客</a></p><h2 id="五、参考文献"><a href="#五、参考文献" class="headerlink" title="五、参考文献"></a><strong>五、参考文献</strong></h2><p><a href="https://baijiahao.baidu.com/s?id=1763886249997509955&wfr=spider&for=pc" title="HTTP 的工作原理">HTTP 的工作原理</a></p><p><a href="https://zhuanlan.zhihu.com/p/565192947" title="HTTP协议演进与各版本特性">HTTP协议演进与各版本特性</a></p><p><a href="https://blog.csdn.net/weixin_41605937/article/details/108306408" title="计算机网络——HTTP协议原理-CSDN博客">计算机网络——HTTP协议原理-CSDN博客</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>AboutThisBlog</title>
    <link href="/2025/04/28/About%20This%20Blog/"/>
    <url>/2025/04/28/About%20This%20Blog/</url>
    
    <content type="html"><![CDATA[<h1 id="网站介绍"><a href="#网站介绍" class="headerlink" title="网站介绍"></a>网站介绍</h1><p>这是一个技术风的个人博客网站，我会在这里分享技术总结、靶场练习记录、一些CTF的wp……，也会写一些没那么技术的文章，比如我个人的思考或者奇思幻想。</p><p>欢迎大家讨论以及友链++</p><h1 id="为什么要维护这个个人博客？"><a href="#为什么要维护这个个人博客？" class="headerlink" title="为什么要维护这个个人博客？"></a>为什么要维护这个个人博客？</h1><p>考量之一是我的文章或许可以帮到一些人。在我刚刚接触Web安全时，是靠着前辈们的技术文章才得以入门。这种分享知识的精神很是鼓舞人，于是我也想出一份微薄之力。</p><p>加上我本来就崇尚多记录，会积攒一些技术文章，所以维护这个博客用以汇集产出。</p><p>其实大约一年前我就搭了一个静态站玩，但是当时并没有维护的打算。那时的文章多偏新手向，为便于初学者查找，大都发在CSDN上。但今天编辑文章时，仅仅是改了一些格式问题，就一直审核不通过（讽刺的是一点不改，多提交几次就能过）。况且看大家都维护了个人博客，便也想做一个用来加友链（于是连夜重做）。</p><p>（所以部分文章是由CSDN迁徙而来，里面的链接啥的都指向CSDN，阅读不便还请谅解）</p><p>考量之二是希望通过这个博客来激发我的分享欲，不要变得死气沉沉。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
